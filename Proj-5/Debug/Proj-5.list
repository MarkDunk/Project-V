
Proj-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080085c0  080085c0  000095c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a8  080089a8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080089a8  080089a8  000099a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b0  080089b0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089b4  080089b4  000099b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000338  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011222  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b5c  00000000  00000000  0001b426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0001df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b78  00000000  00000000  0001ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d52  00000000  00000000  0001f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147f9  00000000  00000000  0004273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc95a  00000000  00000000  00056f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012388d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d1c  00000000  00000000  001238d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001285ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085a4 	.word	0x080085a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080085a4 	.word	0x080085a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <DriveMotor_Init>:
//     STOP   FWD	RWD   UNDEFINED
// (A)  0      1     0      1     
// (B)  0      0     1      1

void DriveMotor_Init(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	// Enable GPIO Clock
	SET_BITS	(RCC->AHBENR, RCC_AHBENR_GPIOCEN);
 8000c5c:	4b81      	ldr	r3, [pc, #516]	@ (8000e64 <DriveMotor_Init+0x20c>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4a80      	ldr	r2, [pc, #512]	@ (8000e64 <DriveMotor_Init+0x20c>)
 8000c62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c66:	6153      	str	r3, [r2, #20]

	CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*12));
 8000c68:	4b7f      	ldr	r3, [pc, #508]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a7e      	ldr	r2, [pc, #504]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c6e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000c72:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x1UL << (2*12));
 8000c74:	4b7c      	ldr	r3, [pc, #496]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a7b      	ldr	r2, [pc, #492]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c7e:	6013      	str	r3, [r2, #0]
	CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*13));
 8000c80:	4b79      	ldr	r3, [pc, #484]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a78      	ldr	r2, [pc, #480]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c86:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c8a:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x1UL << (2*13));
 8000c8c:	4b76      	ldr	r3, [pc, #472]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a75      	ldr	r2, [pc, #468]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c96:	6013      	str	r3, [r2, #0]
	CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*8));
 8000c98:	4b73      	ldr	r3, [pc, #460]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a72      	ldr	r2, [pc, #456]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000c9e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000ca2:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x1UL << (2*8));	
 8000ca4:	4b70      	ldr	r3, [pc, #448]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a6f      	ldr	r2, [pc, #444]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cae:	6013      	str	r3, [r2, #0]
		CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*9));
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a6c      	ldr	r2, [pc, #432]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cb6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000cba:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x1UL << (2*9));
 8000cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a69      	ldr	r2, [pc, #420]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]
	//    MODE = Output
	//    Output Type = Push Pull
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 12));
 8000cc8:	4b67      	ldr	r3, [pc, #412]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a66      	ldr	r2, [pc, #408]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cd2:	6053      	str	r3, [r2, #4]
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 13));
 8000cd4:	4b64      	ldr	r3, [pc, #400]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a63      	ldr	r2, [pc, #396]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000cde:	6053      	str	r3, [r2, #4]
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 8));
 8000ce0:	4b61      	ldr	r3, [pc, #388]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a60      	ldr	r2, [pc, #384]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cea:	6053      	str	r3, [r2, #4]
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 9));
 8000cec:	4b5e      	ldr	r3, [pc, #376]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cf2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cf6:	6053      	str	r3, [r2, #4]
	//    Pull-up / Pull-down = No Pull
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*12)));
 8000cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000cfe:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000d02:	60d3      	str	r3, [r2, #12]
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*13)));
 8000d04:	4b58      	ldr	r3, [pc, #352]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4a57      	ldr	r2, [pc, #348]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d0a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d0e:	60d3      	str	r3, [r2, #12]
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*8)));
 8000d10:	4b55      	ldr	r3, [pc, #340]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a54      	ldr	r2, [pc, #336]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d16:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000d1a:	60d3      	str	r3, [r2, #12]
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*9)));
 8000d1c:	4b52      	ldr	r3, [pc, #328]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a51      	ldr	r2, [pc, #324]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d22:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000d26:	60d3      	str	r3, [r2, #12]
	//    Initial Output Value should be set to 0 (STOP by default)
	
	//  For Speed Control, connect TIM8 channels to PC10 and PC11 with the following configurations
	CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*10));
 8000d28:	4b4f      	ldr	r3, [pc, #316]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a4e      	ldr	r2, [pc, #312]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d2e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000d32:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x3UL << (2*10));
 8000d34:	4b4c      	ldr	r3, [pc, #304]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a4b      	ldr	r2, [pc, #300]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d3a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000d3e:	6013      	str	r3, [r2, #0]
	CLEAR_BITS	(GPIOC->MODER, 0x03UL << (2*11));
 8000d40:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a48      	ldr	r2, [pc, #288]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d4a:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOC->MODER, 0x3UL << (2*11));
 8000d4c:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a45      	ldr	r2, [pc, #276]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d52:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000d56:	6013      	str	r3, [r2, #0]
	//	  MODE = Alternative Function 4
	SET_BITS (GPIOC->AFR[0], 0x03UL << (4*10));
 8000d58:	4b43      	ldr	r3, [pc, #268]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d5a:	4a43      	ldr	r2, [pc, #268]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	6213      	str	r3, [r2, #32]
	SET_BITS (GPIOC->AFR[0], 0x03UL << (4*11));
 8000d60:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d62:	4a41      	ldr	r2, [pc, #260]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	6213      	str	r3, [r2, #32]
	//    Output Type = Push Pull
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 10));
 8000d68:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d72:	6053      	str	r3, [r2, #4]
	CLEAR_BITS(GPIOC->OTYPER, (0x1UL << 11));
 8000d74:	4b3c      	ldr	r3, [pc, #240]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a3b      	ldr	r2, [pc, #236]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d7e:	6053      	str	r3, [r2, #4]
	
	//    Pull-up / Pull-down = No Pull
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*10)));
 8000d80:	4b39      	ldr	r3, [pc, #228]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a38      	ldr	r2, [pc, #224]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d86:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000d8a:	60d3      	str	r3, [r2, #12]
	CLEAR_BITS(GPIOC->PUPDR, (0x3UL << (2*11)));
 8000d8c:	4b36      	ldr	r3, [pc, #216]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	4a35      	ldr	r2, [pc, #212]	@ (8000e68 <DriveMotor_Init+0x210>)
 8000d92:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d96:	60d3      	str	r3, [r2, #12]
	
	
	
	// Next, Configure Timer 8 for CH1N and CH2N - Mostly like Servo with 2 exceptions 
	// 1. Turn o Timer 8
	SET_BITS (RCC->APB2ENR, RCC_APB2ENR_TIM8EN);
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <DriveMotor_Init+0x20c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <DriveMotor_Init+0x20c>)
 8000d9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000da2:	6193      	str	r3, [r2, #24]
	
	// 2. Program Timer 8 prescaler to count in microseconds
	TIM8->PSC = 36;
 8000da4:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000da6:	2224      	movs	r2, #36	@ 0x24
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
		//You need -1 to allow the timer start sequence (mandatory)
		
	// 3. Set TIM8 to upcounting mode (MANDATORY!! because TIM8 default mode can be something else)
		// [DIFFERENT!] This is different from TIM15 in Servo Lab because TIM15 only supports upcounting
	TIM8->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a2f      	ldr	r2, [pc, #188]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000db4:	6013      	str	r3, [r2, #0]
	// 4. Set the TIM8 reload value to 1000 us period (Remember -1 because it's repeating)
			TIM8->ARR = 1000;
 8000db6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000db8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	// 5. Enable TIM8 ARR preload
		SET_BITS (TIM8->CR1, TIM_CR1_ARPE);
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc8:	6013      	str	r3, [r2, #0]
	// 6. Set TIM8 main output enabled
	SET_BITS (TIM8->BDTR, TIM_BDTR_MOE);
 8000dca:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a27      	ldr	r2, [pc, #156]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
		
	
	// Configure CH1N (Complementary) of TIM8 for Left Wheel PWM output compare mode
	
	// 1. Select PWM mode 1 for TIM8 channel 1N
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a24      	ldr	r2, [pc, #144]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000ddc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000de0:	6193      	str	r3, [r2, #24]
		// Set OC1M bits to 0110 (i.e. set bit 1 and 2) in CCMR1
		// Read manual again to confirm
	
	// 2. Enable output compare preload on channel 1 (i.e. update counter register only on timer enabled (UE) )
	    // Set OC1PE bit in CCMR1
	SET_BITS (TIM8->CCMR1, TIM_CCMR1_OC1PE);
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6193      	str	r3, [r2, #24]
	// 3. Enable the COMPLEMENTARY output channel (CH1N)
		// Set CC1NE bit in CCER
		 
			SET_BITS (TIM8->CCER , TIM_CCER_CC1NE);
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
		// Read Manual to confirm
		
	
	// 4. Make CH1N active HI (standard polarity)
		// Clear CC1NP bit in CCER
		 TIM8->CCER &= ~TIM_CCER_CC1NP;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e00:	f023 0308 	bic.w	r3, r3, #8
 8000e04:	6213      	str	r3, [r2, #32]
		// [DIFFERENT!] Also because we are working with completentary output
	
	// 5. Set the CH1N initial PWM ON-time to 0 by clearing CCR1, so that PWM will not be outputted until the first 1ms elapsed
		TIM8->CCR1 = 0;
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34
	
	// Configure CH2N (Complementary) of TIM8 for Right Wheel PWM output compare mode
	
	// 1. Select PWM mode 1 for TIM8 channel 2N
		// Set OC2M to 0110 in CCMR1 - same as CH1N configurations
		TIM8->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e12:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000e16:	6193      	str	r3, [r2, #24]
		// Read Manual to confirm
	
	// 2. Enable output compare preload on channel 2 (i.e. update counter register only on timer enabled (UE) )
		// Set OC2PE to 1 in CCMR1 - same as CH1N configurations
		SET_BITS (TIM8->CCMR1, TIM_CCMR1_OC2PE);
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e22:	6193      	str	r3, [r2, #24]
	// 3. Enable the COMPLEMENTARY output channel (CH2N)
		// Set CC2NE in CCER - same as CH1N
		SET_BITS (TIM8->CCER, TIM_CCER_CC2NE);
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2e:	6213      	str	r3, [r2, #32]
	// 4. Make CH2N active HI (standard polarity)
		// Clear CC2NP in CCER - same as CH1N
		TIM8->CCER &= ~TIM_CCER_CC2NP;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e3a:	6213      	str	r3, [r2, #32]
	// 5. Set the CH2N initial PWM ON-time to 0 by clearing CCR1, so that PWM will not be outputted until the first 1ms elapsed
		TIM8->CCR2 = 0;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
	
	// Finally, Start TIM8 CH1N and CH2N Outputs
				
	// 1. Force an update event to preload all the registers
		// Set UG to 1 in TIM8 EGR
		TIM8->EGR |= TIM_EGR_UG;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6153      	str	r3, [r2, #20]
	// 2. Enable TIM15 to start counting
		// Set CEN in TIM8 CR1
		SET_BITS( TIM8->CR1, TIM_CR1_CEN );
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <DriveMotor_Init+0x214>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6013      	str	r3, [r2, #0]
	
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	40013400 	.word	0x40013400

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Encoder_Init>:

/**
 * @brief Initialize encoders for left (PA0) and right (PA1) wheels.
 * @return None
 */
void Encoder_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    // Enable clock for GPIO port A
    ENABLE_GPIO_CLOCK(A);
 8000f04:	4b5e      	ldr	r3, [pc, #376]	@ (8001080 <Encoder_Init+0x180>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a5d      	ldr	r2, [pc, #372]	@ (8001080 <Encoder_Init+0x180>)
 8000f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0e:	6153      	str	r3, [r2, #20]
    
    // Configure PA0 and PA1 as alternate function mode for encoders
    GPIO_MODER_SET(A, 0, GPIO_MODE_AF);
 8000f10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6013      	str	r3, [r2, #0]
    GPIO_MODER_SET(A, 1, GPIO_MODE_AF);
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 030c 	bic.w	r3, r3, #12
 8000f2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
    GPIO_PUPDR_SET(A, 0, GPIO_PUPD_NO);
 8000f38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	60d3      	str	r3, [r2, #12]
    GPIO_PUPDR_SET(A, 1, GPIO_PUPD_NO);
 8000f48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f52:	f023 030c 	bic.w	r3, r3, #12
 8000f56:	60d3      	str	r3, [r2, #12]
    GPIO_AFR_SET(A, 0, 1); // PA0 set to TIM2 CH1
 8000f58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	f023 030f 	bic.w	r3, r3, #15
 8000f62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6213      	str	r3, [r2, #32]
    GPIO_AFR_SET(A, 1, 1); // PA1 set to TIM2 CH2
 8000f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6213      	str	r3, [r2, #32]
    
    // Enable clock for TIM2
    SET_BITS(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);
 8000f80:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <Encoder_Init+0x180>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4a3e      	ldr	r2, [pc, #248]	@ (8001080 <Encoder_Init+0x180>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	61d3      	str	r3, [r2, #28]
    SET_BITS(TIM2->PSC, 71UL); // Prescaler set to count in 1us intervals
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f96:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 8000f9a:	6293      	str	r3, [r2, #40]	@ 0x28
    CLEAR_BITS(TIM2->CR1, TIM_CR1_DIR); // Set timer to upcounting mode
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa6:	f023 0310 	bic.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
    
    // Configure TIM2 CH1 for left wheel input capture
    SET_BITS(TIM2->CCMR1, TIM_CCMR1_CC1S_0); // Set CH1 to input capture mode
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
    SET_BITS(TIM2->CCER, TIM_CCER_CC1E); // Enable input capture for CH1
 8000fbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCER, TIM_CCER_CC1P | TIM_CCER_CC1NP); // Detect rising edges
 8000fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd6:	f023 030a 	bic.w	r3, r3, #10
 8000fda:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCR1, TIM_CCR1_CCR1); // Clear any old data in CCR1
 8000fdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	041b      	lsls	r3, r3, #16
 8000fea:	6353      	str	r3, [r2, #52]	@ 0x34
    
    // Configure TIM2 CH2 for right wheel input capture
    SET_BITS(TIM2->CCMR1, TIM_CCMR1_CC2S_0); // Set CH2 to input capture mode
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	6193      	str	r3, [r2, #24]
    SET_BITS(TIM2->CCER, TIM_CCER_CC2E); // Enable input capture for CH2
 8000ffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCER, TIM_CCER_CC2P | TIM_CCER_CC2NP); // Detect rising edges
 800100c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001016:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800101a:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCR2, TIM_CCR2_CCR2); // Clear any old data in CCR2
 800101c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	6393      	str	r3, [r2, #56]	@ 0x38
    
    // Enable interrupts for CH1 and CH2, and set priority in NVIC
    SET_BITS(TIM2->DIER, TIM_DIER_CC1IE); // Enable CH1 interrupt
 800102c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	60d3      	str	r3, [r2, #12]
    SET_BITS(TIM2->DIER, TIM_DIER_CC2IE); // Enable CH2 interrupt
 800103c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 IRQ in NVIC
 800104c:	201c      	movs	r0, #28
 800104e:	f7ff ff0f 	bl	8000e70 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, ENCODER_PRIORITY); // Set IRQ priority
 8001052:	2109      	movs	r1, #9
 8001054:	201c      	movs	r0, #28
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriority>
    
    // Start TIM2 and initialize input captures
    SET_BITS(TIM2->EGR, TIM_EGR_UG); // Trigger update event
 800105a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6153      	str	r3, [r2, #20]
    SET_BITS(TIM2->CR1, TIM_CR1_CEN); // Start TIM2
 800106a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6013      	str	r3, [r2, #0]
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief TIM2 interrupt handler for left and right wheel encoders.
 * @return None
 */
//void TIM2_IRQHandler(void) {
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    // Handle left wheel encoder interrupt

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7f1b      	ldrb	r3, [r3, #28]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x22>
	leftEncoder[1] = leftEncoder[0];
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x48>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x48>)
 800109a:	6053      	str	r3, [r2, #4]
	leftEncoder[0] = TIM2->CCR1;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x48>)
 80010a4:	6013      	str	r3, [r2, #0]
//        leftEncoder[1] = leftEncoder[0]; // Update previous timestamp
//        leftEncoder[0] = TIM2->CCR1; // Capture current timestamp
//    }
    
    // Handle right wheel encoder interrupt
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7f1b      	ldrb	r3, [r3, #28]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d108      	bne.n	80010c0 <HAL_TIM_IC_CaptureCallback+0x3c>
        rightEncoder[1] = rightEncoder[0]; // Update previous timestamp
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80010b4:	6053      	str	r3, [r2, #4]
        rightEncoder[0] = TIM2->CCR2; // Capture current timestamp
 80010b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80010be:	6013      	str	r3, [r2, #0]
    }
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000200 	.word	0x20000200
 80010d0:	20000208 	.word	0x20000208

080010d4 <Calculate_Encoder_TimePeriod>:

/**
 * @brief Calculate the time period for each encoder in microseconds per vane.
 * @return None
 */
uint32_t* Calculate_Encoder_TimePeriod(void) {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    // Calculate left encoder period and update global variable
    Global_LeftEncoderPeriod = leftEncoder[0] - leftEncoder[1];
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <Calculate_Encoder_TimePeriod+0x58>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <Calculate_Encoder_TimePeriod+0x58>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <Calculate_Encoder_TimePeriod+0x5c>)
 80010e4:	6013      	str	r3, [r2, #0]
    leftEncoder[1] = leftEncoder[0] = 0; // Reset timestamps
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <Calculate_Encoder_TimePeriod+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <Calculate_Encoder_TimePeriod+0x58>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <Calculate_Encoder_TimePeriod+0x58>)
 80010f2:	6053      	str	r3, [r2, #4]
    
    // Calculate right encoder period and update global variable
    Global_RightEncoderPeriod = rightEncoder[0] - rightEncoder[1];
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <Calculate_Encoder_TimePeriod+0x60>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <Calculate_Encoder_TimePeriod+0x60>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <Calculate_Encoder_TimePeriod+0x64>)
 8001100:	6013      	str	r3, [r2, #0]
    rightEncoder[1] = rightEncoder[0] = 0; // Reset timestamps
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <Calculate_Encoder_TimePeriod+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <Calculate_Encoder_TimePeriod+0x60>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <Calculate_Encoder_TimePeriod+0x60>)
 800110e:	6053      	str	r3, [r2, #4]

    pair[0] = Global_LeftEncoderPeriod;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <Calculate_Encoder_TimePeriod+0x5c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a09      	ldr	r2, [pc, #36]	@ (800113c <Calculate_Encoder_TimePeriod+0x68>)
 8001116:	6013      	str	r3, [r2, #0]
    pair[1] = Global_RightEncoderPeriod;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <Calculate_Encoder_TimePeriod+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	@ (800113c <Calculate_Encoder_TimePeriod+0x68>)
 800111e:	6053      	str	r3, [r2, #4]

    return (pair);
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <Calculate_Encoder_TimePeriod+0x68>)



}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	20000200 	.word	0x20000200
 8001130:	200001f0 	.word	0x200001f0
 8001134:	20000208 	.word	0x20000208
 8001138:	200001f4 	.word	0x200001f4
 800113c:	200001f8 	.word	0x200001f8

08001140 <PWMInit>:

#include "stm32f303xe.h"
#include "PWM.h"

//Initialize CH2 of TIM15
void PWMInit(void){
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	//enable gpiob clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001144:	4b31      	ldr	r3, [pc, #196]	@ (800120c <PWMInit+0xcc>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <PWMInit+0xcc>)
 800114a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114e:	6153      	str	r3, [r2, #20]
	//set to af
	GPIOB->MODER &= ~(0x03UL << (2*15));
 8001150:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <PWMInit+0xd0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2e      	ldr	r2, [pc, #184]	@ (8001210 <PWMInit+0xd0>)
 8001156:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800115a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02UL << (2*15));
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <PWMInit+0xd0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <PWMInit+0xd0>)
 8001162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001166:	6013      	str	r3, [r2, #0]
	//set af mode
	GPIOB->AFR[1] |= (0x1UL << (4*7));
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <PWMInit+0xd0>)
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <PWMInit+0xd0>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001172:	6253      	str	r3, [r2, #36]	@ 0x24
	//No-pull
	GPIOB->PUPDR &= ~(0x3UL << (2*15));
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <PWMInit+0xd0>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4a25      	ldr	r2, [pc, #148]	@ (8001210 <PWMInit+0xd0>)
 800117a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800117e:	60d3      	str	r3, [r2, #12]
	//set to output mode
	GPIOB->OTYPER &= ~(0x1UL << 15);
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <PWMInit+0xd0>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <PWMInit+0xd0>)
 8001186:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800118a:	6053      	str	r3, [r2, #4]
	//Enable APB2 bus
	RCC->APB2ENR |= (0x1UL << 16);
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <PWMInit+0xcc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <PWMInit+0xcc>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001196:	6193      	str	r3, [r2, #24]
	//for 1us clock
	TIM15->PSC = 36;
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <PWMInit+0xd4>)
 800119a:	2224      	movs	r2, #36	@ 0x24
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
	//20ms period
	TIM15->ARR = 20000;
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <PWMInit+0xd4>)
 80011a0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	//enable ARPE
	TIM15->CR1 |= (0x1UL << 7);
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <PWMInit+0xd4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <PWMInit+0xd4>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b0:	6013      	str	r3, [r2, #0]
	//Enable MOE
	TIM15->BDTR |= (0x1UL << 15);
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <PWMInit+0xd4>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <PWMInit+0xd4>)
 80011b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
	//Configure ch2 of TIM15
	TIM15->CCMR1 |= (0x6UL << 12);
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <PWMInit+0xd4>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <PWMInit+0xd4>)
 80011c4:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80011c8:	6193      	str	r3, [r2, #24]
	TIM15->CCMR1 |= (0x1UL << 11);
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <PWMInit+0xd4>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <PWMInit+0xd4>)
 80011d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d4:	6193      	str	r3, [r2, #24]
	//Enable output 2 of tim15
	TIM15->CCER |= (0x1UL << 4);
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <PWMInit+0xd4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <PWMInit+0xd4>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6213      	str	r3, [r2, #32]
	//Clear the ccr2 reg
	TIM15->CCR2 = 0;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <PWMInit+0xd4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	639a      	str	r2, [r3, #56]	@ 0x38

	//Force update
	TIM15->EGR |= (0x1UL);
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <PWMInit+0xd4>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <PWMInit+0xd4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6153      	str	r3, [r2, #20]
	//Start the timer
	TIM15->CR1 |= (0x1UL);
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <PWMInit+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <PWMInit+0xd4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400
 8001214:	40014000 	.word	0x40014000

08001218 <UARTputc>:
 * Sends a single character over UART.
 * Waits until the Transmit Data Register Empty (TXE) flag is set before sending.
 * Uses USART2 for communication.
 */
void UARTputc(char thisChar)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
    while ((USART2->ISR & USART_ISR_TXE) == 0);  // Wait until TDR is empty
 8001222:	bf00      	nop
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <UARTputc+0x2c>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f9      	beq.n	8001224 <UARTputc+0xc>
    USART2->TDR = (uint8_t)thisChar;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <UARTputc+0x2c>)
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	b292      	uxth	r2, r2
 8001236:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40004400 	.word	0x40004400

08001248 <UARTputs>:
 * -------------------
 * Sends a null-terminated string over UART using UARTputc for each character.
 * Uses USART2 for communication.
 */
void UARTputs(char *thisChar)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    while (*thisChar)
 8001250:	e007      	b.n	8001262 <UARTputs+0x1a>
    {
        UARTputc(*thisChar);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffde 	bl	8001218 <UARTputc>
        thisChar++;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
    while (*thisChar)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f3      	bne.n	8001252 <UARTputs+0xa>
    }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <UARTprintf>:
 * ---------------------
 * Prints a formatted string over UART using variable arguments.
 * Uses USART2 for communication.
 */
void UARTprintf(char *fmt, ...)
{
 8001274:	b40f      	push	{r0, r1, r2, r3}
 8001276:	b580      	push	{r7, lr}
 8001278:	b0a0      	sub	sp, #128	@ 0x80
 800127a:	af00      	add	r7, sp, #0
    va_list args;

    // Need to guarantee that buffer is big enough for any string
    char buffer[MAX_UART_BUFSIZ];

    va_start(args, fmt);
 800127c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001280:	67fb      	str	r3, [r7, #124]	@ 0x7c
    vsnprintf(buffer, MAX_UART_BUFSIZ, fmt, args);
 8001282:	1d38      	adds	r0, r7, #4
 8001284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001286:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800128a:	2178      	movs	r1, #120	@ 0x78
 800128c:	f005 f870 	bl	8006370 <vsniprintf>
    va_end(args);

    // Send the formatted string over UART
    UARTputs(buffer);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffd8 	bl	8001248 <UARTputs>
	}
 8001298:	bf00      	nop
 800129a:	3780      	adds	r7, #128	@ 0x80
 800129c:	46bd      	mov	sp, r7
 800129e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012a2:	b004      	add	sp, #16
 80012a4:	4770      	bx	lr
	...

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_DMA_Init+0x38>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <MX_DMA_Init+0x38>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_DMA_Init+0x38>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	203a      	movs	r0, #58	@ 0x3a
 80012cc:	f000 fe05 	bl	8001eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80012d0:	203a      	movs	r0, #58	@ 0x3a
 80012d2:	f000 fe1e 	bl	8001f12 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_GPIO_Init+0xc4>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001362:	f001 f92d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <MX_GPIO_Init+0xc8>)
 800137e:	f000 ff95 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001382:	2320      	movs	r3, #32
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f000 ff86 	bl	80022ac <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	@ 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f000 fc50 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f826 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff ff92 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c0:	f7ff ff72 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013c4:	f000 fb4e 	bl	8001a64 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013c8:	f000 fa76 	bl	80018b8 <MX_TIM2_Init>
  MX_UART4_Init();
 80013cc:	f000 fb1a 	bl	8001a04 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  Encoder_Init();
 80013d0:	f7ff fd96 	bl	8000f00 <Encoder_Init>

  PWMInit();
 80013d4:	f7ff feb4 	bl	8001140 <PWMInit>
  DriveMotor_Init();
 80013d8:	f7ff fc3e 	bl	8000c58 <DriveMotor_Init>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80013dc:	2100      	movs	r1, #0
 80013de:	4807      	ldr	r0, [pc, #28]	@ (80013fc <main+0x4c>)
 80013e0:	f002 fdf0 	bl	8003fc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80013e4:	2104      	movs	r1, #4
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <main+0x4c>)
 80013e8:	f002 fdec 	bl	8003fc4 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	4904      	ldr	r1, [pc, #16]	@ (8001400 <main+0x50>)
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <main+0x54>)
 80013f2:	f003 fc6c 	bl	8004cce <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Bytes 1=right motor sp, 2=left motor sp, 3=stepper angle, 4=servo angle
	  calculateAndDisplayMotorSpeed();
 80013f6:	f000 f86b 	bl	80014d0 <calculateAndDisplayMotorSpeed>
 80013fa:	e7fc      	b.n	80013f6 <main+0x46>
 80013fc:	2000021c 	.word	0x2000021c
 8001400:	20000210 	.word	0x20000210
 8001404:	20000268 	.word	0x20000268

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0a6      	sub	sp, #152	@ 0x98
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001412:	2228      	movs	r2, #40	@ 0x28
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f004 ffb8 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2258      	movs	r2, #88	@ 0x58
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f004 ffaa 	bl	800638c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001450:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001454:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f8c2 	bl	80025f0 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001472:	f000 f8db 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001486:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f002 f900 	bl	8003698 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800149e:	f000 f8c5 	bl	800162c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <SystemClock_Config+0xc4>)
 80014a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fb0f 	bl	8003ad8 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80014c0:	f000 f8b4 	bl	800162c <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3798      	adds	r7, #152	@ 0x98
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0010000a 	.word	0x0010000a

080014d0 <calculateAndDisplayMotorSpeed>:

/* USER CODE BEGIN 4 */

void calculateAndDisplayMotorSpeed() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
    // Calculate encoder periods
    uint32_t* both = Calculate_Encoder_TimePeriod();
 80014d6:	f7ff fdfd 	bl	80010d4 <Calculate_Encoder_TimePeriod>
 80014da:	6178      	str	r0, [r7, #20]

    // Retrieve global encoder periods
    uint32_t leftPeriod = *both;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	613b      	str	r3, [r7, #16]
    both += 1;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
    uint32_t rightPeriod = *both;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]

    // Calculate the speed of the left and right wheels in terms of revolutions per second
    // Assuming 20 vanes per wheel revolution and period in microseconds
    float leftSpeed = (float)(1.0 / (leftPeriod * 20e-6)); // Left wheel speed in revolutions per second
 80014ee:	6938      	ldr	r0, [r7, #16]
 80014f0:	f7ff f810 	bl	8000514 <__aeabi_ui2d>
 80014f4:	a338      	add	r3, pc, #224	@ (adr r3, 80015d8 <calculateAndDisplayMotorSpeed+0x108>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f885 	bl	8000608 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	4938      	ldr	r1, [pc, #224]	@ (80015e8 <calculateAndDisplayMotorSpeed+0x118>)
 8001508:	f7ff f9a8 	bl	800085c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb50 	bl	8000bb8 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60bb      	str	r3, [r7, #8]
    float rightSpeed = (float)(1.0 / (rightPeriod * 20e-6)); // Right wheel speed in revolutions per second
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7fe fff9 	bl	8000514 <__aeabi_ui2d>
 8001522:	a32d      	add	r3, pc, #180	@ (adr r3, 80015d8 <calculateAndDisplayMotorSpeed+0x108>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f86e 	bl	8000608 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	f04f 0000 	mov.w	r0, #0
 8001534:	492c      	ldr	r1, [pc, #176]	@ (80015e8 <calculateAndDisplayMotorSpeed+0x118>)
 8001536:	f7ff f991 	bl	800085c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fb39 	bl	8000bb8 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	607b      	str	r3, [r7, #4]
    leftSpeed = leftSpeed*3.14*3;
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7ff f804 	bl	8000558 <__aeabi_f2d>
 8001550:	a323      	add	r3, pc, #140	@ (adr r3, 80015e0 <calculateAndDisplayMotorSpeed+0x110>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f857 	bl	8000608 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <calculateAndDisplayMotorSpeed+0x11c>)
 8001568:	f7ff f84e 	bl	8000608 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fb20 	bl	8000bb8 <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	60bb      	str	r3, [r7, #8]
    rightSpeed = rightSpeed*3.14*3;
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7fe ffeb 	bl	8000558 <__aeabi_f2d>
 8001582:	a317      	add	r3, pc, #92	@ (adr r3, 80015e0 <calculateAndDisplayMotorSpeed+0x110>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f83e 	bl	8000608 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <calculateAndDisplayMotorSpeed+0x11c>)
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fb07 	bl	8000bb8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	607b      	str	r3, [r7, #4]
    // Display the calculated motor wheel speed on the terminal
        UARTprintf("Left Wheel Speed: %.2f inch/s\n", (double)leftSpeed);
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f7fe ffd2 	bl	8000558 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <calculateAndDisplayMotorSpeed+0x120>)
 80015ba:	f7ff fe5b 	bl	8001274 <UARTprintf>
        UARTprintf("Right Wheel Speed: %.2f inch/s\n", (double)rightSpeed);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	480a      	ldr	r0, [pc, #40]	@ (80015f4 <calculateAndDisplayMotorSpeed+0x124>)
 80015ca:	f7ff fe53 	bl	8001274 <UARTprintf>
//    UARTprintf("Left Wheel Speed: %.2f revolutions/s\n", (double)leftSpeed);
//    UARTprintf("Right Wheel Speed: %.2f revolutions/s\n", (double)rightSpeed);
//    UARTputc((char)leftSpeed);
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	88e368f1 	.word	0x88e368f1
 80015dc:	3ef4f8b5 	.word	0x3ef4f8b5
 80015e0:	51eb851f 	.word	0x51eb851f
 80015e4:	40091eb8 	.word	0x40091eb8
 80015e8:	3ff00000 	.word	0x3ff00000
 80015ec:	40080000 	.word	0x40080000
 80015f0:	080085c0 	.word	0x080085c0
 80015f4:	080085e0 	.word	0x080085e0

080015f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, UART4_rxBuffer, 1, 100);
 8001600:	2364      	movs	r3, #100	@ 0x64
 8001602:	2201      	movs	r2, #1
 8001604:	4906      	ldr	r1, [pc, #24]	@ (8001620 <HAL_UART_RxCpltCallback+0x28>)
 8001606:	4807      	ldr	r0, [pc, #28]	@ (8001624 <HAL_UART_RxCpltCallback+0x2c>)
 8001608:	f003 fad8 	bl	8004bbc <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart4, UART4_rxBuffer, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	4904      	ldr	r1, [pc, #16]	@ (8001620 <HAL_UART_RxCpltCallback+0x28>)
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_UART_RxCpltCallback+0x30>)
 8001612:	f003 fb5c 	bl	8004cce <HAL_UART_Receive_DMA>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000210 	.word	0x20000210
 8001624:	200002f0 	.word	0x200002f0
 8001628:	20000268 	.word	0x20000268

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <Error_Handler+0x8>

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_MspInit+0x44>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a0e      	ldr	r2, [pc, #56]	@ (800167c <HAL_MspInit+0x44>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_MspInit+0x44>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_MspInit+0x44>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_MspInit+0x44>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_MspInit+0x44>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166e:	2007      	movs	r0, #7
 8001670:	f000 fc28 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 fb05 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <TIM2_IRQHandler+0x10>)
 80016e6:	f002 fdb7 	bl	8004258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000021c 	.word	0x2000021c

080016f4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <DMA2_Channel3_IRQHandler+0x10>)
 80016fa:	f000 fcca 	bl	8002092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000378 	.word	0x20000378

08001708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_kill>:

int _kill(int pid, int sig)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001722:	f004 fe3f 	bl	80063a4 <__errno>
 8001726:	4603      	mov	r3, r0
 8001728:	2216      	movs	r2, #22
 800172a:	601a      	str	r2, [r3, #0]
  return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_exit>:

void _exit (int status)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001740:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffe7 	bl	8001718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <_exit+0x12>

0800174e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e00a      	b.n	8001776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001760:	f3af 8000 	nop.w
 8001764:	4601      	mov	r1, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbf0      	blt.n	8001760 <_read+0x12>
  }

  return len;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e009      	b.n	80017ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf1      	blt.n	800179a <_write+0x12>
  }
  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_close>:

int _close(int file)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_isatty>:

int _isatty(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f004 fda4 	bl	80063a4 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20010000 	.word	0x20010000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000218 	.word	0x20000218
 8001890:	20000510 	.word	0x20000510

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018e0:	2247      	movs	r2, #71	@ 0x47
 80018e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <MX_TIM2_Init+0xb8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018fe:	481c      	ldr	r0, [pc, #112]	@ (8001970 <MX_TIM2_Init+0xb8>)
 8001900:	f002 fb08 	bl	8003f14 <HAL_TIM_IC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800190a:	f7ff fe8f 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4814      	ldr	r0, [pc, #80]	@ (8001970 <MX_TIM2_Init+0xb8>)
 800191e:	f003 f855 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001928:	f7ff fe80 	bl	800162c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001930:	2301      	movs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	4619      	mov	r1, r3
 8001942:	480b      	ldr	r0, [pc, #44]	@ (8001970 <MX_TIM2_Init+0xb8>)
 8001944:	f002 fd8a 	bl	800445c <HAL_TIM_IC_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800194e:	f7ff fe6d 	bl	800162c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2204      	movs	r2, #4
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_TIM2_Init+0xb8>)
 800195a:	f002 fd7f 	bl	800445c <HAL_TIM_IC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001964:	f7ff fe62 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000021c 	.word	0x2000021c

08001974 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d130      	bne.n	80019f8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	6153      	str	r3, [r2, #20]
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_TIM_IC_MspInit+0x8c>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c6:	2303      	movs	r3, #3
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d6:	2301      	movs	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e4:	f000 fc62 	bl	80022ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	201c      	movs	r0, #28
 80019ee:	f000 fa74 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f2:	201c      	movs	r0, #28
 80019f4:	f000 fa8d 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	@ 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000

08001a04 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a0a:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <MX_UART4_Init+0x5c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_UART4_Init+0x58>)
 8001a48:	f003 f86a 	bl	8004b20 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a52:	f7ff fdeb 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000268 	.word	0x20000268
 8001a60:	40004c00 	.word	0x40004c00

08001a64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <MX_USART2_UART_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a70:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART2_UART_Init+0x58>)
 8001aa8:	f003 f83a 	bl	8004b20 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f7ff fdbb 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200002f0 	.word	0x200002f0
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a42      	ldr	r2, [pc, #264]	@ (8001bec <HAL_UART_MspInit+0x128>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d14f      	bne.n	8001b86 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a41      	ldr	r2, [pc, #260]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001aec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b08:	6153      	str	r3, [r2, #20]
 8001b0a:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4830      	ldr	r0, [pc, #192]	@ (8001bf4 <HAL_UART_MspInit+0x130>)
 8001b34:	f000 fbba 	bl	80022ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8001b38:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b3a:	4a30      	ldr	r2, [pc, #192]	@ (8001bfc <HAL_UART_MspInit+0x138>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b44:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b50:	4b29      	ldr	r3, [pc, #164]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b56:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b5c:	4b26      	ldr	r3, [pc, #152]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b62:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b68:	4823      	ldr	r0, [pc, #140]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b6a:	f000 f9ec 	bl	8001f46 <HAL_DMA_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001b74:	f7ff fd5a 	bl	800162c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b7c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <HAL_UART_MspInit+0x134>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b84:	e02d      	b.n	8001be2 <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_UART_MspInit+0x13c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d128      	bne.n	8001be2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9a:	61d3      	str	r3, [r2, #28]
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb2:	6153      	str	r3, [r2, #20]
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bde:	f000 fb65 	bl	80022ac <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	@ 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40004c00 	.word	0x40004c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	20000378 	.word	0x20000378
 8001bfc:	40020430 	.word	0x40020430
 8001c00:	40004400 	.word	0x40004400

08001c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c08:	f7ff fe44 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <LoopForever+0xe>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c24:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <LoopForever+0x16>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c32:	f004 fbbd 	bl	80063b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c36:	f7ff fbbb 	bl	80013b0 <main>

08001c3a <LoopForever>:

LoopForever:
    b LoopForever
 8001c3a:	e7fe      	b.n	8001c3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c48:	080089b8 	.word	0x080089b8
  ldr r2, =_sbss
 8001c4c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c50:	2000050c 	.word	0x2000050c

08001c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC1_2_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_Init+0x28>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <HAL_Init+0x28>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f92b 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f808 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fce0 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_InitTick+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_InitTick+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f943 	bl	8001f2e <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cc0:	f000 f90b 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <HAL_InitTick+0x5c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008
 8001d08:	200003bc 	.word	0x200003bc

08001d0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200003bc 	.word	0x200003bc

08001d24 <__NVIC_SetPriorityGrouping>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e037      	b.n	8001fcc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f940 	bl	8002234 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Start_IT+0x20>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e04a      	b.n	800208a <HAL_DMA_Start_IT+0xb6>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002002:	2b01      	cmp	r3, #1
 8002004:	d13a      	bne.n	800207c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f8d4 	bl	80021d8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 020e 	orr.w	r2, r2, #14
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e00f      	b.n	800206a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 020a 	orr.w	r2, r2, #10
 8002058:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0204 	bic.w	r2, r2, #4
 8002068:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e005      	b.n	8002088 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d024      	beq.n	8002104 <HAL_DMA_IRQHandler+0x72>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01f      	beq.n	8002104 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0204 	bic.w	r2, r2, #4
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ea:	2104      	movs	r1, #4
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002102:	e065      	b.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	2202      	movs	r2, #2
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d02c      	beq.n	800216e <HAL_DMA_IRQHandler+0xdc>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d027      	beq.n	800216e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020a 	bic.w	r2, r2, #10
 800213a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	2102      	movs	r1, #2
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	d035      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800216c:	e030      	b.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2208      	movs	r2, #8
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d028      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020e 	bic.w	r2, r2, #14
 8002196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
    }
  }
}
 80021ce:	e7ff      	b.n	80021d0 <HAL_DMA_IRQHandler+0x13e>
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f202 	lsl.w	r2, r1, r2
 80021f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d108      	bne.n	8002218 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002216:	e007      	b.n	8002228 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <DMA_CalcBaseAndBitshift+0x60>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d80f      	bhi.n	8002268 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <DMA_CalcBaseAndBitshift+0x64>)
 8002250:	4413      	add	r3, r2
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <DMA_CalcBaseAndBitshift+0x68>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0f      	ldr	r2, [pc, #60]	@ (80022a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002264:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002266:	e00e      	b.n	8002286 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <DMA_CalcBaseAndBitshift+0x70>)
 8002270:	4413      	add	r3, r2
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <DMA_CalcBaseAndBitshift+0x68>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	009a      	lsls	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <DMA_CalcBaseAndBitshift+0x74>)
 8002284:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40020407 	.word	0x40020407
 8002298:	bffdfff8 	.word	0xbffdfff8
 800229c:	cccccccd 	.word	0xcccccccd
 80022a0:	40020000 	.word	0x40020000
 80022a4:	bffdfbf8 	.word	0xbffdfbf8
 80022a8:	40020400 	.word	0x40020400

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e160      	b.n	800257e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8152 	beq.w	8002578 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x40>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80ac 	beq.w	8002578 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b5e      	ldr	r3, [pc, #376]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a5d      	ldr	r2, [pc, #372]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b5b      	ldr	r3, [pc, #364]	@ (800259c <HAL_GPIO_Init+0x2f0>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a59      	ldr	r2, [pc, #356]	@ (80025a0 <HAL_GPIO_Init+0x2f4>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002462:	d025      	beq.n	80024b0 <HAL_GPIO_Init+0x204>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4f      	ldr	r2, [pc, #316]	@ (80025a4 <HAL_GPIO_Init+0x2f8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01f      	beq.n	80024ac <HAL_GPIO_Init+0x200>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <HAL_GPIO_Init+0x2fc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d019      	beq.n	80024a8 <HAL_GPIO_Init+0x1fc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4d      	ldr	r2, [pc, #308]	@ (80025ac <HAL_GPIO_Init+0x300>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_GPIO_Init+0x1f8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x304>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00d      	beq.n	80024a0 <HAL_GPIO_Init+0x1f4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <HAL_GPIO_Init+0x308>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x1f0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4a      	ldr	r2, [pc, #296]	@ (80025b8 <HAL_GPIO_Init+0x30c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002494:	2306      	movs	r3, #6
 8002496:	e00c      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 8002498:	2307      	movs	r3, #7
 800249a:	e00a      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 800249c:	2305      	movs	r3, #5
 800249e:	e008      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 80024a4:	2303      	movs	r3, #3
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x206>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c2:	4937      	ldr	r1, [pc, #220]	@ (80025a0 <HAL_GPIO_Init+0x2f4>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d0:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_GPIO_Init+0x310>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f4:	4a31      	ldr	r2, [pc, #196]	@ (80025bc <HAL_GPIO_Init+0x310>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fa:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_GPIO_Init+0x310>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800251e:	4a27      	ldr	r2, [pc, #156]	@ (80025bc <HAL_GPIO_Init+0x310>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <HAL_GPIO_Init+0x310>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002548:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_GPIO_Init+0x310>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_GPIO_Init+0x310>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <HAL_GPIO_Init+0x310>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f ae97 	bne.w	80022bc <HAL_GPIO_Init+0x10>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48001000 	.word	0x48001000
 80025b4:	48001400 	.word	0x48001400
 80025b8:	48001800 	.word	0x48001800
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002600:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f001 b83a 	b.w	800368a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 816f 	beq.w	800290a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800262c:	4bb5      	ldr	r3, [pc, #724]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d00c      	beq.n	8002652 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002638:	4bb2      	ldr	r3, [pc, #712]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d15c      	bne.n	80026fe <HAL_RCC_OscConfig+0x10e>
 8002644:	4baf      	ldr	r3, [pc, #700]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d155      	bne.n	80026fe <HAL_RCC_OscConfig+0x10e>
 8002652:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002656:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002666:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x94>
 800267e:	4ba1      	ldr	r3, [pc, #644]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 8002684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002688:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026ac:	4b95      	ldr	r3, [pc, #596]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026b4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80026b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80026c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8111 	beq.w	8002908 <HAL_RCC_OscConfig+0x318>
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 8108 	bne.w	8002908 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f000 bfc6 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x12e>
 8002710:	4b7c      	ldr	r3, [pc, #496]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a7b      	ldr	r2, [pc, #492]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e036      	b.n	800278c <HAL_RCC_OscConfig+0x19c>
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x158>
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a74      	ldr	r2, [pc, #464]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b72      	ldr	r3, [pc, #456]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a71      	ldr	r2, [pc, #452]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e021      	b.n	800278c <HAL_RCC_OscConfig+0x19c>
 8002748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x184>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x19c>
 8002774:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a62      	ldr	r2, [pc, #392]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b60      	ldr	r3, [pc, #384]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d059      	beq.n	8002850 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fab6 	bl	8001d0c <HAL_GetTick>
 80027a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a6:	f7ff fab1 	bl	8001d0c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d902      	bls.n	80027bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	f000 bf67 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 80027bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80027d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_OscConfig+0x1fe>
 80027e8:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x22a>
 80027ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002802:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002806:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800280a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002816:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800281e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002822:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002826:	fa92 f2a2 	rbit	r2, r2
 800282a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800282e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002832:	fab2 f282 	clz	r2, r2
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f042 0220 	orr.w	r2, r2, #32
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f002 021f 	and.w	r2, r2, #31
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ab      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1b6>
 800284e:	e05c      	b.n	800290a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fa5c 	bl	8001d0c <HAL_GetTick>
 8002854:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285a:	f7ff fa57 	bl	8001d0c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	@ 0x64
 8002868:	d902      	bls.n	8002870 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f000 bf0d 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 8002870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002874:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002884:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2b2>
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x2de>
 80028a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80028b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028ba:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <HAL_RCC_OscConfig+0x314>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028d2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80028d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80028e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f042 0220 	orr.w	r2, r2, #32
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f002 021f 	and.w	r2, r2, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ab      	bne.n	800285a <HAL_RCC_OscConfig+0x26a>
 8002902:	e002      	b.n	800290a <HAL_RCC_OscConfig+0x31a>
 8002904:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 817f 	beq.w	8002c1e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002920:	4ba7      	ldr	r3, [pc, #668]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800292c:	4ba4      	ldr	r3, [pc, #656]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d173      	bne.n	8002a20 <HAL_RCC_OscConfig+0x430>
 8002938:	4ba1      	ldr	r3, [pc, #644]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002944:	d16c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x430>
 8002946:	2302      	movs	r3, #2
 8002948:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002958:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_RCC_OscConfig+0x386>
 8002970:	4b93      	ldr	r3, [pc, #588]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	e013      	b.n	800299e <HAL_RCC_OscConfig+0x3ae>
 8002976:	2302      	movs	r3, #2
 8002978:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800298e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800299a:	4b89      	ldr	r3, [pc, #548]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	2202      	movs	r2, #2
 80029a0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80029a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80029a8:	fa92 f2a2 	rbit	r2, r2
 80029ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80029b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f002 021f 	and.w	r2, r2, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3f6>
 80029d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f000 be52 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	21f8      	movs	r1, #248	@ 0xf8
 80029fc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002a04:	fa91 f1a1 	rbit	r1, r1
 8002a08:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002a0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a10:	fab1 f181 	clz	r1, r1
 8002a14:	b2c9      	uxtb	r1, r1
 8002a16:	408b      	lsls	r3, r1
 8002a18:	4969      	ldr	r1, [pc, #420]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e0fe      	b.n	8002c1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8088 	beq.w	8002b42 <HAL_RCC_OscConfig+0x552>
 8002a32:	2301      	movs	r3, #1
 8002a34:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002a44:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff f955 	bl	8001d0c <HAL_GetTick>
 8002a62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff f950 	bl	8001d0c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d902      	bls.n	8002a7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f000 be06 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002a90:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0x4be>
 8002aa8:	4b45      	ldr	r3, [pc, #276]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e013      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e6>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002adc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002ae8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0af      	beq.n	8002a68 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	21f8      	movs	r1, #248	@ 0xf8
 8002b1e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002b26:	fa91 f1a1 	rbit	r1, r1
 8002b2a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002b2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b32:	fab1 f181 	clz	r1, r1
 8002b36:	b2c9      	uxtb	r1, r1
 8002b38:	408b      	lsls	r3, r1
 8002b3a:	4921      	ldr	r1, [pc, #132]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e06d      	b.n	8002c1e <HAL_RCC_OscConfig+0x62e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002b54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff f8cd 	bl	8001d0c <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff f8c8 	bl	8001d0c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f000 bd7e 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5d4>
 8002bb8:	4b01      	ldr	r3, [pc, #4]	@ (8002bc0 <HAL_RCC_OscConfig+0x5d0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e016      	b.n	8002bec <HAL_RCC_OscConfig+0x5fc>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002be8:	4bbf      	ldr	r3, [pc, #764]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	2202      	movs	r2, #2
 8002bee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002bf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002bfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ac      	bne.n	8002b78 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8113 	beq.w	8002e5a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d07c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x74e>
 8002c44:	2301      	movs	r3, #1
 8002c46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	4ba2      	ldr	r3, [pc, #648]	@ (8002eec <HAL_RCC_OscConfig+0x8fc>)
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f84d 	bl	8001d0c <HAL_GetTick>
 8002c72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7ff f848 	bl	8001d0c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d902      	bls.n	8002c8e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f000 bcfe 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	6019      	str	r1, [r3, #0]
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f1a3 	rbit	r1, r3
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d14:	6019      	str	r1, [r3, #0]
  return result;
 8002d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d09d      	beq.n	8002c78 <HAL_RCC_OscConfig+0x688>
 8002d3c:	e08d      	b.n	8002e5a <HAL_RCC_OscConfig+0x86a>
 8002d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d42:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f2a3 	rbit	r2, r3
 8002d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d60:	601a      	str	r2, [r3, #0]
  return result;
 8002d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d6a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x8fc>)
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe ffc4 	bl	8001d0c <HAL_GetTick>
 8002d84:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe ffbf 	bl	8001d0c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	f000 bc75 	b.w	800368a <HAL_RCC_OscConfig+0x109a>
 8002da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002dcc:	2202      	movs	r2, #2
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f2a3 	rbit	r2, r3
 8002dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002df0:	2202      	movs	r2, #2
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e18:	2102      	movs	r1, #2
 8002e1a:	6019      	str	r1, [r3, #0]
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f1a3 	rbit	r1, r3
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e32:	6019      	str	r1, [r3, #0]
  return result;
 8002e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d197      	bne.n	8002d8a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 81a5 	beq.w	80031ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	61d3      	str	r3, [r2, #28]
 8002e8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <HAL_RCC_OscConfig+0x8f8>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_RCC_OscConfig+0x900>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d121      	bne.n	8002f00 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_RCC_OscConfig+0x900>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef0 <HAL_RCC_OscConfig+0x900>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe ff20 	bl	8001d0c <HAL_GetTick>
 8002ecc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e010      	b.n	8002ef4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fe ff1b 	bl	8001d0c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e3d1      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	10908120 	.word	0x10908120
 8002ef0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b8d      	ldr	r3, [pc, #564]	@ (800312c <HAL_RCC_OscConfig+0xb3c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0e8      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x92e>
 8002f10:	4b87      	ldr	r3, [pc, #540]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a86      	ldr	r2, [pc, #536]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	e035      	b.n	8002f8a <HAL_RCC_OscConfig+0x99a>
 8002f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x958>
 8002f2e:	4b80      	ldr	r3, [pc, #512]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a7f      	ldr	r2, [pc, #508]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	e020      	b.n	8002f8a <HAL_RCC_OscConfig+0x99a>
 8002f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x982>
 8002f58:	4b75      	ldr	r3, [pc, #468]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a74      	ldr	r2, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	4b72      	ldr	r3, [pc, #456]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a71      	ldr	r2, [pc, #452]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x99a>
 8002f72:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a6b      	ldr	r2, [pc, #428]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8081 	beq.w	800309e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe feb6 	bl	8001d0c <HAL_GetTick>
 8002fa0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe feb1 	bl	8001d0c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e365      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003000:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003004:	601a      	str	r2, [r3, #0]
  return result;
 8003006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800300e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d102      	bne.n	800302a <HAL_RCC_OscConfig+0xa3a>
 8003024:	4b42      	ldr	r3, [pc, #264]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	e013      	b.n	8003052 <HAL_RCC_OscConfig+0xa62>
 800302a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003056:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800305a:	2102      	movs	r1, #2
 800305c:	6011      	str	r1, [r2, #0]
 800305e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003062:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fa92 f1a2 	rbit	r1, r2
 800306c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003070:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003074:	6011      	str	r1, [r2, #0]
  return result;
 8003076:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800307a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f002 021f 	and.w	r2, r2, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d084      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x9b6>
 800309c:	e083      	b.n	80031a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fe35 	bl	8001d0c <HAL_GetTick>
 80030a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe fe30 	bl	8001d0c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e2e4      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 80030c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003102:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003106:	601a      	str	r2, [r3, #0]
  return result;
 8003108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003110:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <HAL_RCC_OscConfig+0xb44>
 8003126:	4b02      	ldr	r3, [pc, #8]	@ (8003130 <HAL_RCC_OscConfig+0xb40>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	e017      	b.n	800315c <HAL_RCC_OscConfig+0xb6c>
 800312c:	40007000 	.word	0x40007000
 8003130:	40021000 	.word	0x40021000
 8003134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003138:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003144:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003152:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	4bb3      	ldr	r3, [pc, #716]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003160:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003164:	2102      	movs	r1, #2
 8003166:	6011      	str	r1, [r2, #0]
 8003168:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800316c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	fa92 f1a2 	rbit	r1, r2
 8003176:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800317a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800317e:	6011      	str	r1, [r2, #0]
  return result;
 8003180:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003184:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	fab2 f282 	clz	r2, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f002 021f 	and.w	r2, r2, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d180      	bne.n	80030a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 825e 	beq.w	8003688 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031cc:	4b96      	ldr	r3, [pc, #600]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	f000 821f 	beq.w	8003618 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	f040 8170 	bne.w	80034cc <HAL_RCC_OscConfig+0xedc>
 80031ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80031f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003216:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800321a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003226:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fd6b 	bl	8001d0c <HAL_GetTick>
 8003236:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323a:	e009      	b.n	8003250 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fd66 	bl	8001d0c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e21c      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003270:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003274:	601a      	str	r2, [r3, #0]
  return result;
 8003276:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800327e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0xcaa>
 8003294:	4b64      	ldr	r3, [pc, #400]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e027      	b.n	80032ea <HAL_RCC_OscConfig+0xcfa>
 800329a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80032f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032f6:	6011      	str	r1, [r2, #0]
 80032f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032fc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	fa92 f1a2 	rbit	r1, r2
 8003306:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800330a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800330e:	6011      	str	r1, [r2, #0]
  return result;
 8003310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003314:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fab2 f282 	clz	r2, r2
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f002 021f 	and.w	r2, r2, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d182      	bne.n	800323c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003336:	4b3c      	ldr	r3, [pc, #240]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003342:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	4937      	ldr	r1, [pc, #220]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 800334c:	4313      	orrs	r3, r2
 800334e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003350:	4b35      	ldr	r3, [pc, #212]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a19      	ldr	r1, [r3, #32]
 8003364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003368:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	430b      	orrs	r3, r1
 8003372:	492d      	ldr	r1, [pc, #180]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003380:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003398:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800339c:	601a      	str	r2, [r3, #0]
  return result;
 800339e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	461a      	mov	r2, r3
 80033ba:	2301      	movs	r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe fca5 	bl	8001d0c <HAL_GetTick>
 80033c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c6:	e009      	b.n	80033dc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fca0 	bl	8001d0c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e156      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003400:	601a      	str	r2, [r3, #0]
  return result;
 8003402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003406:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800340a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0xe3c>
 8003420:	4b01      	ldr	r3, [pc, #4]	@ (8003428 <HAL_RCC_OscConfig+0xe38>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e02a      	b.n	800347c <HAL_RCC_OscConfig+0xe8c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003430:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	fa93 f2a3 	rbit	r2, r3
 8003448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003456:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800345a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003464:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003472:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	4b86      	ldr	r3, [pc, #536]	@ (8003694 <HAL_RCC_OscConfig+0x10a4>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003480:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003484:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003488:	6011      	str	r1, [r2, #0]
 800348a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800348e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	fa92 f1a2 	rbit	r1, r2
 8003498:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800349c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80034a0:	6011      	str	r1, [r2, #0]
  return result;
 80034a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034a6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f43f af7f 	beq.w	80033c8 <HAL_RCC_OscConfig+0xdd8>
 80034ca:	e0dd      	b.n	8003688 <HAL_RCC_OscConfig+0x1098>
 80034cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034f0:	601a      	str	r2, [r3, #0]
  return result;
 80034f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80034fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003506:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe fbfb 	bl	8001d0c <HAL_GetTick>
 8003516:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	e009      	b.n	8003530 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fbf6 	bl	8001d0c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0ac      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003538:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800353c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003542:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003554:	601a      	str	r2, [r3, #0]
  return result;
 8003556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800355e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0xf8a>
 8003574:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <HAL_RCC_OscConfig+0x10a4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	e027      	b.n	80035ca <HAL_RCC_OscConfig+0xfda>
 800357a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800357e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003582:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	fa93 f2a3 	rbit	r2, r3
 8003596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fa93 f2a3 	rbit	r2, r3
 80035bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <HAL_RCC_OscConfig+0x10a4>)
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035d6:	6011      	str	r1, [r2, #0]
 80035d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	fa92 f1a2 	rbit	r1, r2
 80035e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035ea:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80035ee:	6011      	str	r1, [r2, #0]
  return result;
 80035f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035f4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	fab2 f282 	clz	r2, r2
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f042 0220 	orr.w	r2, r2, #32
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f002 021f 	and.w	r2, r2, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d182      	bne.n	800351c <HAL_RCC_OscConfig+0xf2c>
 8003616:	e037      	b.n	8003688 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e02e      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_OscConfig+0x10a4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003634:	4b17      	ldr	r3, [pc, #92]	@ (8003694 <HAL_RCC_OscConfig+0x10a4>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800363c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003640:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003648:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d117      	bne.n	8003684 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003654:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003658:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800365c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003660:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003668:	429a      	cmp	r2, r3
 800366a:	d10b      	bne.n	8003684 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800366c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b09e      	sub	sp, #120	@ 0x78
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e162      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b90      	ldr	r3, [pc, #576]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b8d      	ldr	r3, [pc, #564]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	498b      	ldr	r1, [pc, #556]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b89      	ldr	r3, [pc, #548]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e14a      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b82      	ldr	r3, [pc, #520]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	497f      	ldr	r1, [pc, #508]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80dc 	beq.w	80038c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13c      	bne.n	800378e <HAL_RCC_ClockConfig+0xf6>
 8003714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003718:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <HAL_RCC_ClockConfig+0xa6>
 8003738:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e00f      	b.n	800375e <HAL_RCC_ClockConfig+0xc6>
 800373e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003742:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	667b      	str	r3, [r7, #100]	@ 0x64
 800374c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003750:	663b      	str	r3, [r7, #96]	@ 0x60
 8003752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375a:	4b67      	ldr	r3, [pc, #412]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003762:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003766:	fa92 f2a2 	rbit	r2, r2
 800376a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800376c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0220 	orr.w	r2, r2, #32
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d17b      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0f3      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d13c      	bne.n	8003810 <HAL_RCC_ClockConfig+0x178>
 8003796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800379a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80037a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x128>
 80037ba:	4b4f      	ldr	r3, [pc, #316]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e00f      	b.n	80037e0 <HAL_RCC_ClockConfig+0x148>
 80037c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037dc:	4b46      	ldr	r3, [pc, #280]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037f0:	fab2 f282 	clz	r2, r2
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	f002 021f 	and.w	r2, r2, #31
 8003800:	2101      	movs	r1, #1
 8003802:	fa01 f202 	lsl.w	r2, r1, r2
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13a      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b2      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
 8003810:	2302      	movs	r3, #2
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
 8003832:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e00d      	b.n	8003854 <HAL_RCC_ClockConfig+0x1bc>
 8003838:	2302      	movs	r3, #2
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	4b29      	ldr	r3, [pc, #164]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	2202      	movs	r2, #2
 8003856:	61ba      	str	r2, [r7, #24]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	fa92 f2a2 	rbit	r2, r2
 800385e:	617a      	str	r2, [r7, #20]
  return result;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e079      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	491a      	ldr	r1, [pc, #104]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe fa3a 	bl	8001d0c <HAL_GetTick>
 8003898:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fe fa36 	bl	8001d0c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e061      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d214      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 0207 	bic.w	r2, r3, #7
 80038da:	4906      	ldr	r1, [pc, #24]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <HAL_RCC_ClockConfig+0x25c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e040      	b.n	8003976 <HAL_RCC_ClockConfig+0x2de>
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b1d      	ldr	r3, [pc, #116]	@ (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	491a      	ldr	r1, [pc, #104]	@ (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b16      	ldr	r3, [pc, #88]	@ (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4912      	ldr	r1, [pc, #72]	@ (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800393a:	f000 f829 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800393e:	4601      	mov	r1, r0
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <HAL_RCC_ClockConfig+0x2e8>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003948:	22f0      	movs	r2, #240	@ 0xf0
 800394a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	fa92 f2a2 	rbit	r2, r2
 8003952:	60fa      	str	r2, [r7, #12]
  return result;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	fab2 f282 	clz	r2, r2
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	40d3      	lsrs	r3, r2
 800395e:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <HAL_RCC_ClockConfig+0x2ec>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	fa21 f303 	lsr.w	r3, r1, r3
 8003966:	4a08      	ldr	r2, [pc, #32]	@ (8003988 <HAL_RCC_ClockConfig+0x2f0>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800396a:	4b08      	ldr	r3, [pc, #32]	@ (800398c <HAL_RCC_ClockConfig+0x2f4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe f988 	bl	8001c84 <HAL_InitTick>
  
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3778      	adds	r7, #120	@ 0x78
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	08008600 	.word	0x08008600
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x36>
 80039be:	e029      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c2:	613b      	str	r3, [r7, #16]
      break;
 80039c4:	e029      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	0c9b      	lsrs	r3, r3, #18
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039d0:	5cd3      	ldrb	r3, [r2, r3]
 80039d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80039d4:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039ec:	4a0f      	ldr	r2, [pc, #60]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e007      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039fe:	4a0b      	ldr	r2, [pc, #44]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	613b      	str	r3, [r7, #16]
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a16:	613b      	str	r3, [r7, #16]
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	693b      	ldr	r3, [r7, #16]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	08008618 	.word	0x08008618
 8003a34:	08008628 	.word	0x08008628

08003a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000000 	.word	0x20000000

08003a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a56:	f7ff ffef 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	fa92 f2a2 	rbit	r2, r2
 8003a70:	603a      	str	r2, [r7, #0]
  return result;
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	40d3      	lsrs	r3, r2
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08008610 	.word	0x08008610

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a9a:	f7ff ffcd 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003aa8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003aac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	603a      	str	r2, [r7, #0]
  return result;
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	40d3      	lsrs	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08008610 	.word	0x08008610

08003ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b092      	sub	sp, #72	@ 0x48
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80d4 	beq.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afc:	4b4e      	ldr	r3, [pc, #312]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10e      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b4b      	ldr	r3, [pc, #300]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	4b48      	ldr	r3, [pc, #288]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b45      	ldr	r3, [pc, #276]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b42      	ldr	r3, [pc, #264]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a41      	ldr	r2, [pc, #260]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe f8e5 	bl	8001d0c <HAL_GetTick>
 8003b42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fe f8e1 	bl	8001d0c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	@ 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1d6      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b38      	ldr	r3, [pc, #224]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b64:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8084 	beq.w	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d07c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b84:	4b2c      	ldr	r3, [pc, #176]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	461a      	mov	r2, r3
 8003bae:	2301      	movs	r3, #1
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bd6:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d04b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe f891 	bl	8001d0c <HAL_GetTick>
 8003bea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fe f88d 	bl	8001d0c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e180      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c04:	2302      	movs	r3, #2
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c10:	2302      	movs	r3, #2
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d108      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c32:	4b01      	ldr	r3, [pc, #4]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	e00d      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	10908100 	.word	0x10908100
 8003c44:	2302      	movs	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	4b9a      	ldr	r3, [pc, #616]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	2202      	movs	r2, #2
 8003c56:	613a      	str	r2, [r7, #16]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	fa92 f2a2 	rbit	r2, r2
 8003c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f002 021f 	and.w	r2, r2, #31
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0b7      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	498c      	ldr	r1, [pc, #560]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b88      	ldr	r3, [pc, #544]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a87      	ldr	r2, [pc, #540]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb0:	4b82      	ldr	r3, [pc, #520]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	f023 0203 	bic.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	497f      	ldr	r1, [pc, #508]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cce:	4b7b      	ldr	r3, [pc, #492]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4978      	ldr	r1, [pc, #480]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cec:	4b73      	ldr	r3, [pc, #460]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	4970      	ldr	r1, [pc, #448]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f023 0210 	bic.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4969      	ldr	r1, [pc, #420]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d28:	4b64      	ldr	r3, [pc, #400]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d34:	4961      	ldr	r1, [pc, #388]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d46:	4b5d      	ldr	r3, [pc, #372]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	f023 0220 	bic.w	r2, r3, #32
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	495a      	ldr	r1, [pc, #360]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d64:	4b55      	ldr	r3, [pc, #340]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	4952      	ldr	r1, [pc, #328]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d82:	4b4e      	ldr	r3, [pc, #312]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	494b      	ldr	r1, [pc, #300]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003da0:	4b46      	ldr	r3, [pc, #280]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4943      	ldr	r1, [pc, #268]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	493c      	ldr	r1, [pc, #240]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de8:	4934      	ldr	r1, [pc, #208]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003dfa:	4b30      	ldr	r3, [pc, #192]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	492d      	ldr	r1, [pc, #180]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e18:	4b28      	ldr	r3, [pc, #160]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e24:	4925      	ldr	r1, [pc, #148]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e36:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	491e      	ldr	r1, [pc, #120]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	4916      	ldr	r1, [pc, #88]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	490f      	ldr	r1, [pc, #60]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	4907      	ldr	r1, [pc, #28]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003eae:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	4913      	ldr	r1, [pc, #76]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee0:	490b      	ldr	r1, [pc, #44]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efe:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3748      	adds	r7, #72	@ 0x48
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000

08003f14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e049      	b.n	8003fba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fd1a 	bl	8001974 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 fb46 	bl	80045e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_IC_Start_IT+0x1e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e023      	b.n	800402a <HAL_TIM_IC_Start_IT+0x66>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_IC_Start_IT+0x2e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e01b      	b.n	800402a <HAL_TIM_IC_Start_IT+0x66>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_IC_Start_IT+0x3e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e013      	b.n	800402a <HAL_TIM_IC_Start_IT+0x66>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d104      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0x4e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e00b      	b.n	800402a <HAL_TIM_IC_Start_IT+0x66>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d104      	bne.n	8004022 <HAL_TIM_IC_Start_IT+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e003      	b.n	800402a <HAL_TIM_IC_Start_IT+0x66>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004028:	b2db      	uxtb	r3, r3
 800402a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <HAL_TIM_IC_Start_IT+0x78>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e013      	b.n	8004064 <HAL_TIM_IC_Start_IT+0xa0>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d104      	bne.n	800404c <HAL_TIM_IC_Start_IT+0x88>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e00b      	b.n	8004064 <HAL_TIM_IC_Start_IT+0xa0>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d104      	bne.n	800405c <HAL_TIM_IC_Start_IT+0x98>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e003      	b.n	8004064 <HAL_TIM_IC_Start_IT+0xa0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004062:	b2db      	uxtb	r3, r3
 8004064:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004066:	7bbb      	ldrb	r3, [r7, #14]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800406c:	7b7b      	ldrb	r3, [r7, #13]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d001      	beq.n	8004076 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0dd      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_TIM_IC_Start_IT+0xc2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	e023      	b.n	80040ce <HAL_TIM_IC_Start_IT+0x10a>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d104      	bne.n	8004096 <HAL_TIM_IC_Start_IT+0xd2>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	e01b      	b.n	80040ce <HAL_TIM_IC_Start_IT+0x10a>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_IC_Start_IT+0xe2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a4:	e013      	b.n	80040ce <HAL_TIM_IC_Start_IT+0x10a>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0xf2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b4:	e00b      	b.n	80040ce <HAL_TIM_IC_Start_IT+0x10a>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_IC_Start_IT+0x102>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	e003      	b.n	80040ce <HAL_TIM_IC_Start_IT+0x10a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_TIM_IC_Start_IT+0x11a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040dc:	e013      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x142>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_IC_Start_IT+0x12a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040ec:	e00b      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x142>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_IC_Start_IT+0x13a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040fc:	e003      	b.n	8004106 <HAL_TIM_IC_Start_IT+0x142>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d841      	bhi.n	8004190 <HAL_TIM_IC_Start_IT+0x1cc>
 800410c:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <HAL_TIM_IC_Start_IT+0x150>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004149 	.word	0x08004149
 8004118:	08004191 	.word	0x08004191
 800411c:	08004191 	.word	0x08004191
 8004120:	08004191 	.word	0x08004191
 8004124:	0800415b 	.word	0x0800415b
 8004128:	08004191 	.word	0x08004191
 800412c:	08004191 	.word	0x08004191
 8004130:	08004191 	.word	0x08004191
 8004134:	0800416d 	.word	0x0800416d
 8004138:	08004191 	.word	0x08004191
 800413c:	08004191 	.word	0x08004191
 8004140:	08004191 	.word	0x08004191
 8004144:	0800417f 	.word	0x0800417f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0202 	orr.w	r2, r2, #2
 8004156:	60da      	str	r2, [r3, #12]
      break;
 8004158:	e01d      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0204 	orr.w	r2, r2, #4
 8004168:	60da      	str	r2, [r3, #12]
      break;
 800416a:	e014      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	60da      	str	r2, [r3, #12]
      break;
 800417c:	e00b      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0210 	orr.w	r2, r2, #16
 800418c:	60da      	str	r2, [r3, #12]
      break;
 800418e:	e002      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	bf00      	nop
  }

  if (status == HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d149      	bne.n	8004230 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fbeb 	bl	8004980 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a23      	ldr	r2, [pc, #140]	@ (800423c <HAL_TIM_IC_Start_IT+0x278>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01d      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004240 <HAL_TIM_IC_Start_IT+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <HAL_TIM_IC_Start_IT+0x280>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <HAL_TIM_IC_Start_IT+0x284>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <HAL_TIM_IC_Start_IT+0x288>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_IC_Start_IT+0x22c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <HAL_TIM_IC_Start_IT+0x28c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d115      	bne.n	800421c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	4b17      	ldr	r3, [pc, #92]	@ (8004254 <HAL_TIM_IC_Start_IT+0x290>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d015      	beq.n	800422e <HAL_TIM_IC_Start_IT+0x26a>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004208:	d011      	beq.n	800422e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	e008      	b.n	800422e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e000      	b.n	8004230 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40015000 	.word	0x40015000
 8004254:	00010007 	.word	0x00010007

08004258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d020      	beq.n	80042bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0202 	mvn.w	r2, #2
 800428c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc feee 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f97c 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f983 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0204 	mvn.w	r2, #4
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fec8 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f956 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f95d 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0208 	mvn.w	r2, #8
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fea2 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f930 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f937 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0210 	mvn.w	r2, #16
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2208      	movs	r2, #8
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc fe7c 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f90a 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f911 	bl	80045bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d007      	beq.n	80043c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0201 	mvn.w	r2, #1
 80043bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8e8 	bl	8004594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fb88 	bl	8004af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb80 	bl	8004b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8d0 	bl	80045d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0220 	mvn.w	r2, #32
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb48 	bl	8004ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e088      	b.n	800458c <HAL_TIM_IC_ConfigChannel+0x130>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11b      	bne.n	80044c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004498:	f000 f94e 	bl	8004738 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 020c 	bic.w	r2, r2, #12
 80044aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	619a      	str	r2, [r3, #24]
 80044be:	e060      	b.n	8004582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d11c      	bne.n	8004500 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80044d6:	f000 f99d 	bl	8004814 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6999      	ldr	r1, [r3, #24]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	021a      	lsls	r2, r3, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
 80044fe:	e040      	b.n	8004582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b08      	cmp	r3, #8
 8004504:	d11b      	bne.n	800453e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004516:	f000 f9ba 	bl	800488e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 020c 	bic.w	r2, r2, #12
 8004528:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	61da      	str	r2, [r3, #28]
 800453c:	e021      	b.n	8004582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b0c      	cmp	r3, #12
 8004542:	d11c      	bne.n	800457e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004554:	f000 f9d7 	bl	8004906 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004566:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69d9      	ldr	r1, [r3, #28]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	61da      	str	r2, [r3, #28]
 800457c:	e001      	b.n	8004582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800458a:	7dfb      	ldrb	r3, [r7, #23]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a48      	ldr	r2, [pc, #288]	@ (8004718 <TIM_Base_SetConfig+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a45      	ldr	r2, [pc, #276]	@ (800471c <TIM_Base_SetConfig+0x138>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a44      	ldr	r2, [pc, #272]	@ (8004720 <TIM_Base_SetConfig+0x13c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a43      	ldr	r2, [pc, #268]	@ (8004724 <TIM_Base_SetConfig+0x140>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a42      	ldr	r2, [pc, #264]	@ (8004728 <TIM_Base_SetConfig+0x144>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a37      	ldr	r2, [pc, #220]	@ (8004718 <TIM_Base_SetConfig+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01f      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d01b      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a34      	ldr	r2, [pc, #208]	@ (800471c <TIM_Base_SetConfig+0x138>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d017      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a33      	ldr	r2, [pc, #204]	@ (8004720 <TIM_Base_SetConfig+0x13c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a32      	ldr	r2, [pc, #200]	@ (8004724 <TIM_Base_SetConfig+0x140>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a32      	ldr	r2, [pc, #200]	@ (800472c <TIM_Base_SetConfig+0x148>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a31      	ldr	r2, [pc, #196]	@ (8004730 <TIM_Base_SetConfig+0x14c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a30      	ldr	r2, [pc, #192]	@ (8004734 <TIM_Base_SetConfig+0x150>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2b      	ldr	r2, [pc, #172]	@ (8004728 <TIM_Base_SetConfig+0x144>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <TIM_Base_SetConfig+0x134>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x100>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <TIM_Base_SetConfig+0x140>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x100>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a19      	ldr	r2, [pc, #100]	@ (800472c <TIM_Base_SetConfig+0x148>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x100>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <TIM_Base_SetConfig+0x14c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x100>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <TIM_Base_SetConfig+0x150>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x100>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a12      	ldr	r2, [pc, #72]	@ (8004728 <TIM_Base_SetConfig+0x144>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]
  }
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40013400 	.word	0x40013400
 8004728:	40015000 	.word	0x40015000
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800

08004738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0201 	bic.w	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a26      	ldr	r2, [pc, #152]	@ (80047fc <TIM_TI1_SetConfig+0xc4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d013      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <TIM_TI1_SetConfig+0xc8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <TIM_TI1_SetConfig+0xcc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <TIM_TI1_SetConfig+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a20      	ldr	r2, [pc, #128]	@ (800480c <TIM_TI1_SetConfig+0xd4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_TI1_SetConfig+0x5e>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <TIM_TI1_SetConfig+0xd8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <TIM_TI1_SetConfig+0x62>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <TIM_TI1_SetConfig+0x64>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e003      	b.n	80047ba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f023 030a 	bic.w	r3, r3, #10
 80047d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 030a 	and.w	r3, r3, #10
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	40015000 	.word	0x40015000

08004814 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f023 0210 	bic.w	r2, r3, #16
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	b29b      	uxth	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80048de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004944:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	031b      	lsls	r3, r3, #12
 800494a:	b29b      	uxth	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	031b      	lsls	r3, r3, #12
 800495e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	621a      	str	r2, [r3, #32]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e06d      	b.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1e      	ldr	r2, [pc, #120]	@ (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d01d      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a60:	d018      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10c      	bne.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40013400 	.word	0x40013400
 8004ad4:	40015000 	.word	0x40015000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40014000 	.word	0x40014000

08004ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e040      	b.n	8004bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc ffbe 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	@ 0x24
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 faea 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f913 	bl	8004d98 <UART_SetConfig>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e01b      	b.n	8004bb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb69 	bl	8005284 <UART_CheckIdleState>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	@ 0x28
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d177      	bne.n	8004cc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Transmit+0x24>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e070      	b.n	8004cc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	@ 0x21
 8004bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf2:	f7fd f88b 	bl	8001d0c <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c10:	d108      	bne.n	8004c24 <HAL_UART_Transmit+0x68>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e003      	b.n	8004c2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c2c:	e02f      	b.n	8004c8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fbcb 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e03b      	b.n	8004cc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c60:	b292      	uxth	r2, r2
 8004c62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	3302      	adds	r3, #2
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e007      	b.n	8004c7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1c9      	bne.n	8004c2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2140      	movs	r1, #64	@ 0x40
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fb95 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e005      	b.n	8004cc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b08a      	sub	sp, #40	@ 0x28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d132      	bne.n	8004d4c <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_UART_Receive_DMA+0x24>
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e02b      	b.n	8004d4e <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	613b      	str	r3, [r7, #16]
   return(result);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	69f9      	ldr	r1, [r7, #28]
 8004d2e:	6a3a      	ldr	r2, [r7, #32]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fbb4 	bl	80054b0 <UART_Start_Receive_DMA>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e000      	b.n	8004d4e <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	@ 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b92      	ldr	r3, [pc, #584]	@ (800500c <UART_SetConfig+0x274>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6979      	ldr	r1, [r7, #20]
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a80      	ldr	r2, [pc, #512]	@ (8005010 <UART_SetConfig+0x278>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d120      	bne.n	8004e56 <UART_SetConfig+0xbe>
 8004e14:	4b7f      	ldr	r3, [pc, #508]	@ (8005014 <UART_SetConfig+0x27c>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d817      	bhi.n	8004e50 <UART_SetConfig+0xb8>
 8004e20:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <UART_SetConfig+0x90>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e45 	.word	0x08004e45
 8004e30:	08004e4b 	.word	0x08004e4b
 8004e34:	08004e3f 	.word	0x08004e3f
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e0b5      	b.n	8004faa <UART_SetConfig+0x212>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e0b2      	b.n	8004faa <UART_SetConfig+0x212>
 8004e44:	2304      	movs	r3, #4
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e0af      	b.n	8004faa <UART_SetConfig+0x212>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e0ac      	b.n	8004faa <UART_SetConfig+0x212>
 8004e50:	2310      	movs	r3, #16
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e0a9      	b.n	8004faa <UART_SetConfig+0x212>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8005018 <UART_SetConfig+0x280>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d124      	bne.n	8004eaa <UART_SetConfig+0x112>
 8004e60:	4b6c      	ldr	r3, [pc, #432]	@ (8005014 <UART_SetConfig+0x27c>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e6c:	d011      	beq.n	8004e92 <UART_SetConfig+0xfa>
 8004e6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e72:	d817      	bhi.n	8004ea4 <UART_SetConfig+0x10c>
 8004e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e78:	d011      	beq.n	8004e9e <UART_SetConfig+0x106>
 8004e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e7e:	d811      	bhi.n	8004ea4 <UART_SetConfig+0x10c>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <UART_SetConfig+0xf4>
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e88:	d006      	beq.n	8004e98 <UART_SetConfig+0x100>
 8004e8a:	e00b      	b.n	8004ea4 <UART_SetConfig+0x10c>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e08b      	b.n	8004faa <UART_SetConfig+0x212>
 8004e92:	2302      	movs	r3, #2
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e088      	b.n	8004faa <UART_SetConfig+0x212>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e085      	b.n	8004faa <UART_SetConfig+0x212>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e082      	b.n	8004faa <UART_SetConfig+0x212>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e07f      	b.n	8004faa <UART_SetConfig+0x212>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a5b      	ldr	r2, [pc, #364]	@ (800501c <UART_SetConfig+0x284>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d124      	bne.n	8004efe <UART_SetConfig+0x166>
 8004eb4:	4b57      	ldr	r3, [pc, #348]	@ (8005014 <UART_SetConfig+0x27c>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ec0:	d011      	beq.n	8004ee6 <UART_SetConfig+0x14e>
 8004ec2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ec6:	d817      	bhi.n	8004ef8 <UART_SetConfig+0x160>
 8004ec8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ecc:	d011      	beq.n	8004ef2 <UART_SetConfig+0x15a>
 8004ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ed2:	d811      	bhi.n	8004ef8 <UART_SetConfig+0x160>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x148>
 8004ed8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x154>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x160>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e061      	b.n	8004faa <UART_SetConfig+0x212>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e05e      	b.n	8004faa <UART_SetConfig+0x212>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e05b      	b.n	8004faa <UART_SetConfig+0x212>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e058      	b.n	8004faa <UART_SetConfig+0x212>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e055      	b.n	8004faa <UART_SetConfig+0x212>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a47      	ldr	r2, [pc, #284]	@ (8005020 <UART_SetConfig+0x288>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d124      	bne.n	8004f52 <UART_SetConfig+0x1ba>
 8004f08:	4b42      	ldr	r3, [pc, #264]	@ (8005014 <UART_SetConfig+0x27c>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f14:	d011      	beq.n	8004f3a <UART_SetConfig+0x1a2>
 8004f16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f1a:	d817      	bhi.n	8004f4c <UART_SetConfig+0x1b4>
 8004f1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f20:	d011      	beq.n	8004f46 <UART_SetConfig+0x1ae>
 8004f22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f26:	d811      	bhi.n	8004f4c <UART_SetConfig+0x1b4>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x19c>
 8004f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f30:	d006      	beq.n	8004f40 <UART_SetConfig+0x1a8>
 8004f32:	e00b      	b.n	8004f4c <UART_SetConfig+0x1b4>
 8004f34:	2300      	movs	r3, #0
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e037      	b.n	8004faa <UART_SetConfig+0x212>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e034      	b.n	8004faa <UART_SetConfig+0x212>
 8004f40:	2304      	movs	r3, #4
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e031      	b.n	8004faa <UART_SetConfig+0x212>
 8004f46:	2308      	movs	r3, #8
 8004f48:	77fb      	strb	r3, [r7, #31]
 8004f4a:	e02e      	b.n	8004faa <UART_SetConfig+0x212>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e02b      	b.n	8004faa <UART_SetConfig+0x212>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <UART_SetConfig+0x28c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d124      	bne.n	8004fa6 <UART_SetConfig+0x20e>
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <UART_SetConfig+0x27c>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004f64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f68:	d011      	beq.n	8004f8e <UART_SetConfig+0x1f6>
 8004f6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f6e:	d817      	bhi.n	8004fa0 <UART_SetConfig+0x208>
 8004f70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f74:	d011      	beq.n	8004f9a <UART_SetConfig+0x202>
 8004f76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f7a:	d811      	bhi.n	8004fa0 <UART_SetConfig+0x208>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <UART_SetConfig+0x1f0>
 8004f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f84:	d006      	beq.n	8004f94 <UART_SetConfig+0x1fc>
 8004f86:	e00b      	b.n	8004fa0 <UART_SetConfig+0x208>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e00d      	b.n	8004faa <UART_SetConfig+0x212>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e00a      	b.n	8004faa <UART_SetConfig+0x212>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e007      	b.n	8004faa <UART_SetConfig+0x212>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e004      	b.n	8004faa <UART_SetConfig+0x212>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e001      	b.n	8004faa <UART_SetConfig+0x212>
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb2:	d16b      	bne.n	800508c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d838      	bhi.n	800502c <UART_SetConfig+0x294>
 8004fba:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <UART_SetConfig+0x228>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	08005003 	.word	0x08005003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe fd34 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	61b8      	str	r0, [r7, #24]
        break;
 8004fea:	e024      	b.n	8005036 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fec:	f7fe fd52 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8004ff0:	61b8      	str	r0, [r7, #24]
        break;
 8004ff2:	e020      	b.n	8005036 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <UART_SetConfig+0x290>)
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e01d      	b.n	8005036 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffa:	f7fe fcc9 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8004ffe:	61b8      	str	r0, [r7, #24]
        break;
 8005000:	e019      	b.n	8005036 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005006:	61bb      	str	r3, [r7, #24]
        break;
 8005008:	e015      	b.n	8005036 <UART_SetConfig+0x29e>
 800500a:	bf00      	nop
 800500c:	efff69f3 	.word	0xefff69f3
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	40004c00 	.word	0x40004c00
 8005024:	40005000 	.word	0x40005000
 8005028:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	77bb      	strb	r3, [r7, #30]
        break;
 8005034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d073      	beq.n	8005124 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	005a      	lsls	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	441a      	add	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b0f      	cmp	r3, #15
 8005056:	d916      	bls.n	8005086 <UART_SetConfig+0x2ee>
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505e:	d212      	bcs.n	8005086 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f023 030f 	bic.w	r3, r3, #15
 8005068:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	b29a      	uxth	r2, r3
 8005076:	89fb      	ldrh	r3, [r7, #14]
 8005078:	4313      	orrs	r3, r2
 800507a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	89fa      	ldrh	r2, [r7, #14]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e04e      	b.n	8005124 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	77bb      	strb	r3, [r7, #30]
 800508a:	e04b      	b.n	8005124 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d827      	bhi.n	80050e2 <UART_SetConfig+0x34a>
 8005092:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <UART_SetConfig+0x300>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050d3 	.word	0x080050d3
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	080050e3 	.word	0x080050e3
 80050b4:	080050e3 	.word	0x080050e3
 80050b8:	080050db 	.word	0x080050db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7fe fcc8 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 80050c0:	61b8      	str	r0, [r7, #24]
        break;
 80050c2:	e013      	b.n	80050ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe fce6 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <UART_SetConfig+0x3a4>)
 80050ce:	61bb      	str	r3, [r7, #24]
        break;
 80050d0:	e00c      	b.n	80050ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d2:	f7fe fc5d 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80050d6:	61b8      	str	r0, [r7, #24]
        break;
 80050d8:	e008      	b.n	80050ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050de:	61bb      	str	r3, [r7, #24]
        break;
 80050e0:	e004      	b.n	80050ec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	77bb      	strb	r3, [r7, #30]
        break;
 80050ea:	bf00      	nop
    }

    if (pclk != 0U)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	085a      	lsrs	r2, r3, #1
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b0f      	cmp	r3, #15
 800510a:	d909      	bls.n	8005120 <UART_SetConfig+0x388>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005112:	d205      	bcs.n	8005120 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	e001      	b.n	8005124 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005130:	7fbb      	ldrb	r3, [r7, #30]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	007a1200 	.word	0x007a1200

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523e:	d10a      	bne.n	8005256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b098      	sub	sp, #96	@ 0x60
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fc fd3a 	bl	8001d0c <HAL_GetTick>
 8005298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d12e      	bne.n	8005306 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f88c 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d021      	beq.n	8005306 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e6      	bne.n	80052c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e062      	b.n	80053cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d149      	bne.n	80053a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005314:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531c:	2200      	movs	r2, #0
 800531e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f856 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03c      	beq.n	80053a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	623b      	str	r3, [r7, #32]
   return(result);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800534c:	633b      	str	r3, [r7, #48]	@ 0x30
 800534e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e6      	bne.n	800532e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005380:	61fa      	str	r2, [r7, #28]
 8005382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	69b9      	ldr	r1, [r7, #24]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	617b      	str	r3, [r7, #20]
   return(result);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e011      	b.n	80053cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3758      	adds	r7, #88	@ 0x58
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	e04f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ec:	d04b      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fc fc8d 	bl	8001d0c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e04e      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d037      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d034      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b40      	cmp	r3, #64	@ 0x40
 8005420:	d031      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d110      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2208      	movs	r2, #8
 8005436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f8ff 	bl	800563c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2208      	movs	r2, #8
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e029      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005460:	d111      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800546a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f8e5 	bl	800563c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e00f      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d0a0      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b096      	sub	sp, #88	@ 0x58
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2222      	movs	r2, #34	@ 0x22
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e8:	4a3e      	ldr	r2, [pc, #248]	@ (80055e4 <UART_Start_Receive_DMA+0x134>)
 80054ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f0:	4a3d      	ldr	r2, [pc, #244]	@ (80055e8 <UART_Start_Receive_DMA+0x138>)
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f8:	4a3c      	ldr	r2, [pc, #240]	@ (80055ec <UART_Start_Receive_DMA+0x13c>)
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005500:	2200      	movs	r2, #0
 8005502:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3324      	adds	r3, #36	@ 0x24
 800550e:	4619      	mov	r1, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005514:	461a      	mov	r2, r3
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	f7fc fd5c 	bl	8001fd4 <HAL_DMA_Start_IT>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2210      	movs	r2, #16
 8005526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e051      	b.n	80055da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d018      	beq.n	8005570 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005552:	657b      	str	r3, [r7, #84]	@ 0x54
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800555e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800556a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3308      	adds	r3, #8
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	653b      	str	r3, [r7, #80]	@ 0x50
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005590:	637a      	str	r2, [r7, #52]	@ 0x34
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e5      	bne.n	8005570 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	613b      	str	r3, [r7, #16]
   return(result);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055c4:	623a      	str	r2, [r7, #32]
 80055c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3758      	adds	r7, #88	@ 0x58
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	08005705 	.word	0x08005705
 80055e8:	0800582b 	.word	0x0800582b
 80055ec:	08005869 	.word	0x08005869

080055f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	@ 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	60bb      	str	r3, [r7, #8]
   return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005630:	bf00      	nop
 8005632:	3724      	adds	r7, #36	@ 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	@ 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005662:	643b      	str	r3, [r7, #64]	@ 0x40
 8005664:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	61fb      	str	r3, [r7, #28]
   return(result);
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800569c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d118      	bne.n	80056e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6979      	ldr	r1, [r7, #20]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	613b      	str	r3, [r7, #16]
   return(result);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056f8:	bf00      	nop
 80056fa:	3754      	adds	r7, #84	@ 0x54
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b09c      	sub	sp, #112	@ 0x70
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b20      	cmp	r3, #32
 8005718:	d071      	beq.n	80057fe <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800571a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571c:	2200      	movs	r2, #0
 800571e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005732:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005736:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005742:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005746:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800574e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	667b      	str	r3, [r7, #100]	@ 0x64
 800576c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005774:	647a      	str	r2, [r7, #68]	@ 0x44
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800577a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	623b      	str	r3, [r7, #32]
   return(result);
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579e:	663b      	str	r3, [r7, #96]	@ 0x60
 80057a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d118      	bne.n	80057fe <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	617b      	str	r3, [r7, #20]
   return(result);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005800:	2200      	movs	r2, #0
 8005802:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800580c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005812:	4619      	mov	r1, r3
 8005814:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005816:	f7ff fab2 	bl	8004d7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800581a:	e002      	b.n	8005822 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800581c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800581e:	f7fb feeb 	bl	80015f8 <HAL_UART_RxCpltCallback>
}
 8005822:	bf00      	nop
 8005824:	3770      	adds	r7, #112	@ 0x70
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005842:	2b01      	cmp	r3, #1
 8005844:	d109      	bne.n	800585a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fa93 	bl	8004d7e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005858:	e002      	b.n	8005860 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff fa7b 	bl	8004d56 <HAL_UART_RxHalfCpltCallback>
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800587a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005882:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588e:	2b80      	cmp	r3, #128	@ 0x80
 8005890:	d109      	bne.n	80058a6 <UART_DMAError+0x3e>
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b21      	cmp	r3, #33	@ 0x21
 8005896:	d106      	bne.n	80058a6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80058a0:	6978      	ldr	r0, [r7, #20]
 80058a2:	f7ff fea5 	bl	80055f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d109      	bne.n	80058c8 <UART_DMAError+0x60>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b22      	cmp	r3, #34	@ 0x22
 80058b8:	d106      	bne.n	80058c8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7ff feba 	bl	800563c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ce:	f043 0210 	orr.w	r2, r3, #16
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d8:	6978      	ldr	r0, [r7, #20]
 80058da:	f7ff fa46 	bl	8004d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <__cvt>:
 80058e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ea:	ec57 6b10 	vmov	r6, r7, d0
 80058ee:	2f00      	cmp	r7, #0
 80058f0:	460c      	mov	r4, r1
 80058f2:	4619      	mov	r1, r3
 80058f4:	463b      	mov	r3, r7
 80058f6:	bfbb      	ittet	lt
 80058f8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80058fc:	461f      	movlt	r7, r3
 80058fe:	2300      	movge	r3, #0
 8005900:	232d      	movlt	r3, #45	@ 0x2d
 8005902:	700b      	strb	r3, [r1, #0]
 8005904:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005906:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800590a:	4691      	mov	r9, r2
 800590c:	f023 0820 	bic.w	r8, r3, #32
 8005910:	bfbc      	itt	lt
 8005912:	4632      	movlt	r2, r6
 8005914:	4616      	movlt	r6, r2
 8005916:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800591a:	d005      	beq.n	8005928 <__cvt+0x42>
 800591c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005920:	d100      	bne.n	8005924 <__cvt+0x3e>
 8005922:	3401      	adds	r4, #1
 8005924:	2102      	movs	r1, #2
 8005926:	e000      	b.n	800592a <__cvt+0x44>
 8005928:	2103      	movs	r1, #3
 800592a:	ab03      	add	r3, sp, #12
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	ab02      	add	r3, sp, #8
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	ec47 6b10 	vmov	d0, r6, r7
 8005936:	4653      	mov	r3, sl
 8005938:	4622      	mov	r2, r4
 800593a:	f000 fde9 	bl	8006510 <_dtoa_r>
 800593e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005942:	4605      	mov	r5, r0
 8005944:	d119      	bne.n	800597a <__cvt+0x94>
 8005946:	f019 0f01 	tst.w	r9, #1
 800594a:	d00e      	beq.n	800596a <__cvt+0x84>
 800594c:	eb00 0904 	add.w	r9, r0, r4
 8005950:	2200      	movs	r2, #0
 8005952:	2300      	movs	r3, #0
 8005954:	4630      	mov	r0, r6
 8005956:	4639      	mov	r1, r7
 8005958:	f7fb f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800595c:	b108      	cbz	r0, 8005962 <__cvt+0x7c>
 800595e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005962:	2230      	movs	r2, #48	@ 0x30
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	454b      	cmp	r3, r9
 8005968:	d31e      	bcc.n	80059a8 <__cvt+0xc2>
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800596e:	1b5b      	subs	r3, r3, r5
 8005970:	4628      	mov	r0, r5
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	b004      	add	sp, #16
 8005976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800597e:	eb00 0904 	add.w	r9, r0, r4
 8005982:	d1e5      	bne.n	8005950 <__cvt+0x6a>
 8005984:	7803      	ldrb	r3, [r0, #0]
 8005986:	2b30      	cmp	r3, #48	@ 0x30
 8005988:	d10a      	bne.n	80059a0 <__cvt+0xba>
 800598a:	2200      	movs	r2, #0
 800598c:	2300      	movs	r3, #0
 800598e:	4630      	mov	r0, r6
 8005990:	4639      	mov	r1, r7
 8005992:	f7fb f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005996:	b918      	cbnz	r0, 80059a0 <__cvt+0xba>
 8005998:	f1c4 0401 	rsb	r4, r4, #1
 800599c:	f8ca 4000 	str.w	r4, [sl]
 80059a0:	f8da 3000 	ldr.w	r3, [sl]
 80059a4:	4499      	add	r9, r3
 80059a6:	e7d3      	b.n	8005950 <__cvt+0x6a>
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e7d9      	b.n	8005964 <__cvt+0x7e>

080059b0 <__exponent>:
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b2:	2900      	cmp	r1, #0
 80059b4:	bfba      	itte	lt
 80059b6:	4249      	neglt	r1, r1
 80059b8:	232d      	movlt	r3, #45	@ 0x2d
 80059ba:	232b      	movge	r3, #43	@ 0x2b
 80059bc:	2909      	cmp	r1, #9
 80059be:	7002      	strb	r2, [r0, #0]
 80059c0:	7043      	strb	r3, [r0, #1]
 80059c2:	dd29      	ble.n	8005a18 <__exponent+0x68>
 80059c4:	f10d 0307 	add.w	r3, sp, #7
 80059c8:	461d      	mov	r5, r3
 80059ca:	270a      	movs	r7, #10
 80059cc:	461a      	mov	r2, r3
 80059ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80059d2:	fb07 1416 	mls	r4, r7, r6, r1
 80059d6:	3430      	adds	r4, #48	@ 0x30
 80059d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80059dc:	460c      	mov	r4, r1
 80059de:	2c63      	cmp	r4, #99	@ 0x63
 80059e0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80059e4:	4631      	mov	r1, r6
 80059e6:	dcf1      	bgt.n	80059cc <__exponent+0x1c>
 80059e8:	3130      	adds	r1, #48	@ 0x30
 80059ea:	1e94      	subs	r4, r2, #2
 80059ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059f0:	1c41      	adds	r1, r0, #1
 80059f2:	4623      	mov	r3, r4
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	d30a      	bcc.n	8005a0e <__exponent+0x5e>
 80059f8:	f10d 0309 	add.w	r3, sp, #9
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	42ac      	cmp	r4, r5
 8005a00:	bf88      	it	hi
 8005a02:	2300      	movhi	r3, #0
 8005a04:	3302      	adds	r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	1a18      	subs	r0, r3, r0
 8005a0a:	b003      	add	sp, #12
 8005a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a16:	e7ed      	b.n	80059f4 <__exponent+0x44>
 8005a18:	2330      	movs	r3, #48	@ 0x30
 8005a1a:	3130      	adds	r1, #48	@ 0x30
 8005a1c:	7083      	strb	r3, [r0, #2]
 8005a1e:	70c1      	strb	r1, [r0, #3]
 8005a20:	1d03      	adds	r3, r0, #4
 8005a22:	e7f1      	b.n	8005a08 <__exponent+0x58>

08005a24 <_printf_float>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	b08d      	sub	sp, #52	@ 0x34
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a30:	4616      	mov	r6, r2
 8005a32:	461f      	mov	r7, r3
 8005a34:	4605      	mov	r5, r0
 8005a36:	f000 fcb1 	bl	800639c <_localeconv_r>
 8005a3a:	6803      	ldr	r3, [r0, #0]
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fa fc1e 	bl	8000280 <strlen>
 8005a44:	2300      	movs	r3, #0
 8005a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a48:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4c:	9005      	str	r0, [sp, #20]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	f103 0208 	add.w	r2, r3, #8
 8005a58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a60:	f8c8 2000 	str.w	r2, [r8]
 8005a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a6c:	9307      	str	r3, [sp, #28]
 8005a6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8005cec <_printf_float+0x2c8>)
 8005a7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a80:	f7fb f85c 	bl	8000b3c <__aeabi_dcmpun>
 8005a84:	bb70      	cbnz	r0, 8005ae4 <_printf_float+0xc0>
 8005a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a8a:	4b98      	ldr	r3, [pc, #608]	@ (8005cec <_printf_float+0x2c8>)
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a90:	f7fb f836 	bl	8000b00 <__aeabi_dcmple>
 8005a94:	bb30      	cbnz	r0, 8005ae4 <_printf_float+0xc0>
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fb f825 	bl	8000aec <__aeabi_dcmplt>
 8005aa2:	b110      	cbz	r0, 8005aaa <_printf_float+0x86>
 8005aa4:	232d      	movs	r3, #45	@ 0x2d
 8005aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aaa:	4a91      	ldr	r2, [pc, #580]	@ (8005cf0 <_printf_float+0x2cc>)
 8005aac:	4b91      	ldr	r3, [pc, #580]	@ (8005cf4 <_printf_float+0x2d0>)
 8005aae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ab2:	bf94      	ite	ls
 8005ab4:	4690      	movls	r8, r2
 8005ab6:	4698      	movhi	r8, r3
 8005ab8:	2303      	movs	r3, #3
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	f02b 0304 	bic.w	r3, fp, #4
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	9700      	str	r7, [sp, #0]
 8005ac8:	4633      	mov	r3, r6
 8005aca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005acc:	4621      	mov	r1, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f9d2 	bl	8005e78 <_printf_common>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f040 808d 	bne.w	8005bf4 <_printf_float+0x1d0>
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ade:	b00d      	add	sp, #52	@ 0x34
 8005ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	4649      	mov	r1, r9
 8005aec:	f7fb f826 	bl	8000b3c <__aeabi_dcmpun>
 8005af0:	b140      	cbz	r0, 8005b04 <_printf_float+0xe0>
 8005af2:	464b      	mov	r3, r9
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bfbc      	itt	lt
 8005af8:	232d      	movlt	r3, #45	@ 0x2d
 8005afa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005afe:	4a7e      	ldr	r2, [pc, #504]	@ (8005cf8 <_printf_float+0x2d4>)
 8005b00:	4b7e      	ldr	r3, [pc, #504]	@ (8005cfc <_printf_float+0x2d8>)
 8005b02:	e7d4      	b.n	8005aae <_printf_float+0x8a>
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b0a:	9206      	str	r2, [sp, #24]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	d13b      	bne.n	8005b88 <_printf_float+0x164>
 8005b10:	2306      	movs	r3, #6
 8005b12:	6063      	str	r3, [r4, #4]
 8005b14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b18:	2300      	movs	r3, #0
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	9303      	str	r3, [sp, #12]
 8005b1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b24:	ab09      	add	r3, sp, #36	@ 0x24
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	6861      	ldr	r1, [r4, #4]
 8005b2a:	ec49 8b10 	vmov	d0, r8, r9
 8005b2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b32:	4628      	mov	r0, r5
 8005b34:	f7ff fed7 	bl	80058e6 <__cvt>
 8005b38:	9b06      	ldr	r3, [sp, #24]
 8005b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b3c:	2b47      	cmp	r3, #71	@ 0x47
 8005b3e:	4680      	mov	r8, r0
 8005b40:	d129      	bne.n	8005b96 <_printf_float+0x172>
 8005b42:	1cc8      	adds	r0, r1, #3
 8005b44:	db02      	blt.n	8005b4c <_printf_float+0x128>
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	dd41      	ble.n	8005bd0 <_printf_float+0x1ac>
 8005b4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b50:	fa5f fa8a 	uxtb.w	sl, sl
 8005b54:	3901      	subs	r1, #1
 8005b56:	4652      	mov	r2, sl
 8005b58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b5e:	f7ff ff27 	bl	80059b0 <__exponent>
 8005b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b64:	1813      	adds	r3, r2, r0
 8005b66:	2a01      	cmp	r2, #1
 8005b68:	4681      	mov	r9, r0
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	dc02      	bgt.n	8005b74 <_printf_float+0x150>
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	07d2      	lsls	r2, r2, #31
 8005b72:	d501      	bpl.n	8005b78 <_printf_float+0x154>
 8005b74:	3301      	adds	r3, #1
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0a2      	beq.n	8005ac6 <_printf_float+0xa2>
 8005b80:	232d      	movs	r3, #45	@ 0x2d
 8005b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b86:	e79e      	b.n	8005ac6 <_printf_float+0xa2>
 8005b88:	9a06      	ldr	r2, [sp, #24]
 8005b8a:	2a47      	cmp	r2, #71	@ 0x47
 8005b8c:	d1c2      	bne.n	8005b14 <_printf_float+0xf0>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c0      	bne.n	8005b14 <_printf_float+0xf0>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7bd      	b.n	8005b12 <_printf_float+0xee>
 8005b96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b9a:	d9db      	bls.n	8005b54 <_printf_float+0x130>
 8005b9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ba0:	d118      	bne.n	8005bd4 <_printf_float+0x1b0>
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	dd0b      	ble.n	8005bc0 <_printf_float+0x19c>
 8005ba8:	6121      	str	r1, [r4, #16]
 8005baa:	b913      	cbnz	r3, 8005bb2 <_printf_float+0x18e>
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	07d0      	lsls	r0, r2, #31
 8005bb0:	d502      	bpl.n	8005bb8 <_printf_float+0x194>
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	440b      	add	r3, r1
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	e7db      	b.n	8005b78 <_printf_float+0x154>
 8005bc0:	b913      	cbnz	r3, 8005bc8 <_printf_float+0x1a4>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	07d2      	lsls	r2, r2, #31
 8005bc6:	d501      	bpl.n	8005bcc <_printf_float+0x1a8>
 8005bc8:	3302      	adds	r3, #2
 8005bca:	e7f4      	b.n	8005bb6 <_printf_float+0x192>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e7f2      	b.n	8005bb6 <_printf_float+0x192>
 8005bd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	db05      	blt.n	8005be6 <_printf_float+0x1c2>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	6121      	str	r1, [r4, #16]
 8005bde:	07d8      	lsls	r0, r3, #31
 8005be0:	d5ea      	bpl.n	8005bb8 <_printf_float+0x194>
 8005be2:	1c4b      	adds	r3, r1, #1
 8005be4:	e7e7      	b.n	8005bb6 <_printf_float+0x192>
 8005be6:	2900      	cmp	r1, #0
 8005be8:	bfd4      	ite	le
 8005bea:	f1c1 0202 	rsble	r2, r1, #2
 8005bee:	2201      	movgt	r2, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	e7e0      	b.n	8005bb6 <_printf_float+0x192>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	055a      	lsls	r2, r3, #21
 8005bf8:	d407      	bmi.n	8005c0a <_printf_float+0x1e6>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d12b      	bne.n	8005c60 <_printf_float+0x23c>
 8005c08:	e767      	b.n	8005ada <_printf_float+0xb6>
 8005c0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c0e:	f240 80dd 	bls.w	8005dcc <_printf_float+0x3a8>
 8005c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c16:	2200      	movs	r2, #0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f7fa ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d033      	beq.n	8005c8a <_printf_float+0x266>
 8005c22:	4a37      	ldr	r2, [pc, #220]	@ (8005d00 <_printf_float+0x2dc>)
 8005c24:	2301      	movs	r3, #1
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f af54 	beq.w	8005ada <_printf_float+0xb6>
 8005c32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c36:	4543      	cmp	r3, r8
 8005c38:	db02      	blt.n	8005c40 <_printf_float+0x21c>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	07d8      	lsls	r0, r3, #31
 8005c3e:	d50f      	bpl.n	8005c60 <_printf_float+0x23c>
 8005c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c44:	4631      	mov	r1, r6
 8005c46:	4628      	mov	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	f43f af45 	beq.w	8005ada <_printf_float+0xb6>
 8005c50:	f04f 0900 	mov.w	r9, #0
 8005c54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005c58:	f104 0a1a 	add.w	sl, r4, #26
 8005c5c:	45c8      	cmp	r8, r9
 8005c5e:	dc09      	bgt.n	8005c74 <_printf_float+0x250>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	079b      	lsls	r3, r3, #30
 8005c64:	f100 8103 	bmi.w	8005e6e <_printf_float+0x44a>
 8005c68:	68e0      	ldr	r0, [r4, #12]
 8005c6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c6c:	4298      	cmp	r0, r3
 8005c6e:	bfb8      	it	lt
 8005c70:	4618      	movlt	r0, r3
 8005c72:	e734      	b.n	8005ade <_printf_float+0xba>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4652      	mov	r2, sl
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af2b 	beq.w	8005ada <_printf_float+0xb6>
 8005c84:	f109 0901 	add.w	r9, r9, #1
 8005c88:	e7e8      	b.n	8005c5c <_printf_float+0x238>
 8005c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dc39      	bgt.n	8005d04 <_printf_float+0x2e0>
 8005c90:	4a1b      	ldr	r2, [pc, #108]	@ (8005d00 <_printf_float+0x2dc>)
 8005c92:	2301      	movs	r3, #1
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af1d 	beq.w	8005ada <_printf_float+0xb6>
 8005ca0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ca4:	ea59 0303 	orrs.w	r3, r9, r3
 8005ca8:	d102      	bne.n	8005cb0 <_printf_float+0x28c>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	07d9      	lsls	r1, r3, #31
 8005cae:	d5d7      	bpl.n	8005c60 <_printf_float+0x23c>
 8005cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f af0d 	beq.w	8005ada <_printf_float+0xb6>
 8005cc0:	f04f 0a00 	mov.w	sl, #0
 8005cc4:	f104 0b1a 	add.w	fp, r4, #26
 8005cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cca:	425b      	negs	r3, r3
 8005ccc:	4553      	cmp	r3, sl
 8005cce:	dc01      	bgt.n	8005cd4 <_printf_float+0x2b0>
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	e793      	b.n	8005bfc <_printf_float+0x1d8>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	465a      	mov	r2, fp
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	f43f aefb 	beq.w	8005ada <_printf_float+0xb6>
 8005ce4:	f10a 0a01 	add.w	sl, sl, #1
 8005ce8:	e7ee      	b.n	8005cc8 <_printf_float+0x2a4>
 8005cea:	bf00      	nop
 8005cec:	7fefffff 	.word	0x7fefffff
 8005cf0:	08008638 	.word	0x08008638
 8005cf4:	0800863c 	.word	0x0800863c
 8005cf8:	08008640 	.word	0x08008640
 8005cfc:	08008644 	.word	0x08008644
 8005d00:	08008648 	.word	0x08008648
 8005d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d0a:	4553      	cmp	r3, sl
 8005d0c:	bfa8      	it	ge
 8005d0e:	4653      	movge	r3, sl
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	4699      	mov	r9, r3
 8005d14:	dc36      	bgt.n	8005d84 <_printf_float+0x360>
 8005d16:	f04f 0b00 	mov.w	fp, #0
 8005d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d1e:	f104 021a 	add.w	r2, r4, #26
 8005d22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	eba3 0309 	sub.w	r3, r3, r9
 8005d2a:	455b      	cmp	r3, fp
 8005d2c:	dc31      	bgt.n	8005d92 <_printf_float+0x36e>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d30:	459a      	cmp	sl, r3
 8005d32:	dc3a      	bgt.n	8005daa <_printf_float+0x386>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	07da      	lsls	r2, r3, #31
 8005d38:	d437      	bmi.n	8005daa <_printf_float+0x386>
 8005d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3c:	ebaa 0903 	sub.w	r9, sl, r3
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	ebaa 0303 	sub.w	r3, sl, r3
 8005d46:	4599      	cmp	r9, r3
 8005d48:	bfa8      	it	ge
 8005d4a:	4699      	movge	r9, r3
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	dc33      	bgt.n	8005dba <_printf_float+0x396>
 8005d52:	f04f 0800 	mov.w	r8, #0
 8005d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d5a:	f104 0b1a 	add.w	fp, r4, #26
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	ebaa 0303 	sub.w	r3, sl, r3
 8005d64:	eba3 0309 	sub.w	r3, r3, r9
 8005d68:	4543      	cmp	r3, r8
 8005d6a:	f77f af79 	ble.w	8005c60 <_printf_float+0x23c>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	465a      	mov	r2, fp
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f aeae 	beq.w	8005ada <_printf_float+0xb6>
 8005d7e:	f108 0801 	add.w	r8, r8, #1
 8005d82:	e7ec      	b.n	8005d5e <_printf_float+0x33a>
 8005d84:	4642      	mov	r2, r8
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d1c2      	bne.n	8005d16 <_printf_float+0x2f2>
 8005d90:	e6a3      	b.n	8005ada <_printf_float+0xb6>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	9206      	str	r2, [sp, #24]
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f ae9c 	beq.w	8005ada <_printf_float+0xb6>
 8005da2:	9a06      	ldr	r2, [sp, #24]
 8005da4:	f10b 0b01 	add.w	fp, fp, #1
 8005da8:	e7bb      	b.n	8005d22 <_printf_float+0x2fe>
 8005daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	d1c0      	bne.n	8005d3a <_printf_float+0x316>
 8005db8:	e68f      	b.n	8005ada <_printf_float+0xb6>
 8005dba:	9a06      	ldr	r2, [sp, #24]
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	4442      	add	r2, r8
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d1c3      	bne.n	8005d52 <_printf_float+0x32e>
 8005dca:	e686      	b.n	8005ada <_printf_float+0xb6>
 8005dcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005dd0:	f1ba 0f01 	cmp.w	sl, #1
 8005dd4:	dc01      	bgt.n	8005dda <_printf_float+0x3b6>
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d536      	bpl.n	8005e48 <_printf_float+0x424>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f ae78 	beq.w	8005ada <_printf_float+0xb6>
 8005dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b8      	blx	r7
 8005df4:	3001      	adds	r0, #1
 8005df6:	f43f ae70 	beq.w	8005ada <_printf_float+0xb6>
 8005dfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2300      	movs	r3, #0
 8005e02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e06:	f7fa fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e0a:	b9c0      	cbnz	r0, 8005e3e <_printf_float+0x41a>
 8005e0c:	4653      	mov	r3, sl
 8005e0e:	f108 0201 	add.w	r2, r8, #1
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d10c      	bne.n	8005e36 <_printf_float+0x412>
 8005e1c:	e65d      	b.n	8005ada <_printf_float+0xb6>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	465a      	mov	r2, fp
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f43f ae56 	beq.w	8005ada <_printf_float+0xb6>
 8005e2e:	f108 0801 	add.w	r8, r8, #1
 8005e32:	45d0      	cmp	r8, sl
 8005e34:	dbf3      	blt.n	8005e1e <_printf_float+0x3fa>
 8005e36:	464b      	mov	r3, r9
 8005e38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e3c:	e6df      	b.n	8005bfe <_printf_float+0x1da>
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	f104 0b1a 	add.w	fp, r4, #26
 8005e46:	e7f4      	b.n	8005e32 <_printf_float+0x40e>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	e7e1      	b.n	8005e12 <_printf_float+0x3ee>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	464a      	mov	r2, r9
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f ae3e 	beq.w	8005ada <_printf_float+0xb6>
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	68e3      	ldr	r3, [r4, #12]
 8005e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e66:	1a5b      	subs	r3, r3, r1
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	dcf0      	bgt.n	8005e4e <_printf_float+0x42a>
 8005e6c:	e6fc      	b.n	8005c68 <_printf_float+0x244>
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	f104 0919 	add.w	r9, r4, #25
 8005e76:	e7f4      	b.n	8005e62 <_printf_float+0x43e>

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4698      	mov	r8, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	3b00      	subs	r3, #0
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c8      	blx	r9
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf02      	ittt	eq
 8005eea:	68e5      	ldreq	r5, [r4, #12]
 8005eec:	6833      	ldreq	r3, [r6, #0]
 8005eee:	1aed      	subeq	r5, r5, r3
 8005ef0:	68a3      	ldr	r3, [r4, #8]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4641      	mov	r1, r8
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c8      	blx	r9
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	@ 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4641      	mov	r1, r8
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c8      	blx	r9
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	7e0f      	ldrb	r7, [r1, #24]
 8005f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f5c:	2f78      	cmp	r7, #120	@ 0x78
 8005f5e:	4691      	mov	r9, r2
 8005f60:	4680      	mov	r8, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	469a      	mov	sl, r3
 8005f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	@ 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d2 	beq.w	800611a <_printf_i+0x1c6>
 8005f76:	2f58      	cmp	r7, #88	@ 0x58
 8005f78:	f000 80b9 	beq.w	80060ee <_printf_i+0x19a>
 8005f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f94 <_printf_i+0x40>)
 8005f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	08006101 	.word	0x08006101
 8005fc4:	0800602b 	.word	0x0800602b
 8005fc8:	080060bb 	.word	0x080060bb
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	08006123 	.word	0x08006123
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	0800602b 	.word	0x0800602b
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060c3 	.word	0x080060c3
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6032      	str	r2, [r6, #0]
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09d      	b.n	800613c <_printf_i+0x1e8>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	1d19      	adds	r1, r3, #4
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	0606      	lsls	r6, r0, #24
 800600a:	d501      	bpl.n	8006010 <_printf_i+0xbc>
 800600c:	681d      	ldr	r5, [r3, #0]
 800600e:	e003      	b.n	8006018 <_printf_i+0xc4>
 8006010:	0645      	lsls	r5, r0, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0xb8>
 8006014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006018:	2d00      	cmp	r5, #0
 800601a:	da03      	bge.n	8006024 <_printf_i+0xd0>
 800601c:	232d      	movs	r3, #45	@ 0x2d
 800601e:	426d      	negs	r5, r5
 8006020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006024:	4859      	ldr	r0, [pc, #356]	@ (800618c <_printf_i+0x238>)
 8006026:	230a      	movs	r3, #10
 8006028:	e011      	b.n	800604e <_printf_i+0xfa>
 800602a:	6821      	ldr	r1, [r4, #0]
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	0608      	lsls	r0, r1, #24
 8006030:	f853 5b04 	ldr.w	r5, [r3], #4
 8006034:	d402      	bmi.n	800603c <_printf_i+0xe8>
 8006036:	0649      	lsls	r1, r1, #25
 8006038:	bf48      	it	mi
 800603a:	b2ad      	uxthmi	r5, r5
 800603c:	2f6f      	cmp	r7, #111	@ 0x6f
 800603e:	4853      	ldr	r0, [pc, #332]	@ (800618c <_printf_i+0x238>)
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	bf14      	ite	ne
 8006044:	230a      	movne	r3, #10
 8006046:	2308      	moveq	r3, #8
 8006048:	2100      	movs	r1, #0
 800604a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800604e:	6866      	ldr	r6, [r4, #4]
 8006050:	60a6      	str	r6, [r4, #8]
 8006052:	2e00      	cmp	r6, #0
 8006054:	bfa2      	ittt	ge
 8006056:	6821      	ldrge	r1, [r4, #0]
 8006058:	f021 0104 	bicge.w	r1, r1, #4
 800605c:	6021      	strge	r1, [r4, #0]
 800605e:	b90d      	cbnz	r5, 8006064 <_printf_i+0x110>
 8006060:	2e00      	cmp	r6, #0
 8006062:	d04b      	beq.n	80060fc <_printf_i+0x1a8>
 8006064:	4616      	mov	r6, r2
 8006066:	fbb5 f1f3 	udiv	r1, r5, r3
 800606a:	fb03 5711 	mls	r7, r3, r1, r5
 800606e:	5dc7      	ldrb	r7, [r0, r7]
 8006070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006074:	462f      	mov	r7, r5
 8006076:	42bb      	cmp	r3, r7
 8006078:	460d      	mov	r5, r1
 800607a:	d9f4      	bls.n	8006066 <_printf_i+0x112>
 800607c:	2b08      	cmp	r3, #8
 800607e:	d10b      	bne.n	8006098 <_printf_i+0x144>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	07df      	lsls	r7, r3, #31
 8006084:	d508      	bpl.n	8006098 <_printf_i+0x144>
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	6861      	ldr	r1, [r4, #4]
 800608a:	4299      	cmp	r1, r3
 800608c:	bfde      	ittt	le
 800608e:	2330      	movle	r3, #48	@ 0x30
 8006090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006094:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006098:	1b92      	subs	r2, r2, r6
 800609a:	6122      	str	r2, [r4, #16]
 800609c:	f8cd a000 	str.w	sl, [sp]
 80060a0:	464b      	mov	r3, r9
 80060a2:	aa03      	add	r2, sp, #12
 80060a4:	4621      	mov	r1, r4
 80060a6:	4640      	mov	r0, r8
 80060a8:	f7ff fee6 	bl	8005e78 <_printf_common>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d14a      	bne.n	8006146 <_printf_i+0x1f2>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060b4:	b004      	add	sp, #16
 80060b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f043 0320 	orr.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	4833      	ldr	r0, [pc, #204]	@ (8006190 <_printf_i+0x23c>)
 80060c4:	2778      	movs	r7, #120	@ 0x78
 80060c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	6831      	ldr	r1, [r6, #0]
 80060ce:	061f      	lsls	r7, r3, #24
 80060d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060d4:	d402      	bmi.n	80060dc <_printf_i+0x188>
 80060d6:	065f      	lsls	r7, r3, #25
 80060d8:	bf48      	it	mi
 80060da:	b2ad      	uxthmi	r5, r5
 80060dc:	6031      	str	r1, [r6, #0]
 80060de:	07d9      	lsls	r1, r3, #31
 80060e0:	bf44      	itt	mi
 80060e2:	f043 0320 	orrmi.w	r3, r3, #32
 80060e6:	6023      	strmi	r3, [r4, #0]
 80060e8:	b11d      	cbz	r5, 80060f2 <_printf_i+0x19e>
 80060ea:	2310      	movs	r3, #16
 80060ec:	e7ac      	b.n	8006048 <_printf_i+0xf4>
 80060ee:	4827      	ldr	r0, [pc, #156]	@ (800618c <_printf_i+0x238>)
 80060f0:	e7e9      	b.n	80060c6 <_printf_i+0x172>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	f023 0320 	bic.w	r3, r3, #32
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	e7f6      	b.n	80060ea <_printf_i+0x196>
 80060fc:	4616      	mov	r6, r2
 80060fe:	e7bd      	b.n	800607c <_printf_i+0x128>
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	6961      	ldr	r1, [r4, #20]
 8006106:	1d18      	adds	r0, r3, #4
 8006108:	6030      	str	r0, [r6, #0]
 800610a:	062e      	lsls	r6, r5, #24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	d501      	bpl.n	8006114 <_printf_i+0x1c0>
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0x1c6>
 8006114:	0668      	lsls	r0, r5, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0x1bc>
 8006118:	8019      	strh	r1, [r3, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	4616      	mov	r6, r2
 8006120:	e7bc      	b.n	800609c <_printf_i+0x148>
 8006122:	6833      	ldr	r3, [r6, #0]
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	6032      	str	r2, [r6, #0]
 8006128:	681e      	ldr	r6, [r3, #0]
 800612a:	6862      	ldr	r2, [r4, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	4630      	mov	r0, r6
 8006130:	f7fa f856 	bl	80001e0 <memchr>
 8006134:	b108      	cbz	r0, 800613a <_printf_i+0x1e6>
 8006136:	1b80      	subs	r0, r0, r6
 8006138:	6060      	str	r0, [r4, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	2300      	movs	r3, #0
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006144:	e7aa      	b.n	800609c <_printf_i+0x148>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d0ad      	beq.n	80060b0 <_printf_i+0x15c>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	d413      	bmi.n	8006182 <_printf_i+0x22e>
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	4298      	cmp	r0, r3
 8006160:	bfb8      	it	lt
 8006162:	4618      	movlt	r0, r3
 8006164:	e7a6      	b.n	80060b4 <_printf_i+0x160>
 8006166:	2301      	movs	r3, #1
 8006168:	4632      	mov	r2, r6
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	47d0      	blx	sl
 8006170:	3001      	adds	r0, #1
 8006172:	d09d      	beq.n	80060b0 <_printf_i+0x15c>
 8006174:	3501      	adds	r5, #1
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	9903      	ldr	r1, [sp, #12]
 800617a:	1a5b      	subs	r3, r3, r1
 800617c:	42ab      	cmp	r3, r5
 800617e:	dcf2      	bgt.n	8006166 <_printf_i+0x212>
 8006180:	e7eb      	b.n	800615a <_printf_i+0x206>
 8006182:	2500      	movs	r5, #0
 8006184:	f104 0619 	add.w	r6, r4, #25
 8006188:	e7f5      	b.n	8006176 <_printf_i+0x222>
 800618a:	bf00      	nop
 800618c:	0800864a 	.word	0x0800864a
 8006190:	0800865b 	.word	0x0800865b

08006194 <std>:
 8006194:	2300      	movs	r3, #0
 8006196:	b510      	push	{r4, lr}
 8006198:	4604      	mov	r4, r0
 800619a:	e9c0 3300 	strd	r3, r3, [r0]
 800619e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061a2:	6083      	str	r3, [r0, #8]
 80061a4:	8181      	strh	r1, [r0, #12]
 80061a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80061a8:	81c2      	strh	r2, [r0, #14]
 80061aa:	6183      	str	r3, [r0, #24]
 80061ac:	4619      	mov	r1, r3
 80061ae:	2208      	movs	r2, #8
 80061b0:	305c      	adds	r0, #92	@ 0x5c
 80061b2:	f000 f8eb 	bl	800638c <memset>
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <std+0x58>)
 80061b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <std+0x5c>)
 80061bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061be:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <std+0x60>)
 80061c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061c2:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <std+0x64>)
 80061c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <std+0x68>)
 80061c8:	6224      	str	r4, [r4, #32]
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d006      	beq.n	80061dc <std+0x48>
 80061ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061d2:	4294      	cmp	r4, r2
 80061d4:	d002      	beq.n	80061dc <std+0x48>
 80061d6:	33d0      	adds	r3, #208	@ 0xd0
 80061d8:	429c      	cmp	r4, r3
 80061da:	d105      	bne.n	80061e8 <std+0x54>
 80061dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80061e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e4:	f000 b908 	b.w	80063f8 <__retarget_lock_init_recursive>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	08007d11 	.word	0x08007d11
 80061f0:	08007d33 	.word	0x08007d33
 80061f4:	08007d6b 	.word	0x08007d6b
 80061f8:	08007d8f 	.word	0x08007d8f
 80061fc:	200003c0 	.word	0x200003c0

08006200 <stdio_exit_handler>:
 8006200:	4a02      	ldr	r2, [pc, #8]	@ (800620c <stdio_exit_handler+0xc>)
 8006202:	4903      	ldr	r1, [pc, #12]	@ (8006210 <stdio_exit_handler+0x10>)
 8006204:	4803      	ldr	r0, [pc, #12]	@ (8006214 <stdio_exit_handler+0x14>)
 8006206:	f000 b869 	b.w	80062dc <_fwalk_sglue>
 800620a:	bf00      	nop
 800620c:	2000000c 	.word	0x2000000c
 8006210:	080075a5 	.word	0x080075a5
 8006214:	2000001c 	.word	0x2000001c

08006218 <cleanup_stdio>:
 8006218:	6841      	ldr	r1, [r0, #4]
 800621a:	4b0c      	ldr	r3, [pc, #48]	@ (800624c <cleanup_stdio+0x34>)
 800621c:	4299      	cmp	r1, r3
 800621e:	b510      	push	{r4, lr}
 8006220:	4604      	mov	r4, r0
 8006222:	d001      	beq.n	8006228 <cleanup_stdio+0x10>
 8006224:	f001 f9be 	bl	80075a4 <_fflush_r>
 8006228:	68a1      	ldr	r1, [r4, #8]
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <cleanup_stdio+0x38>)
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <cleanup_stdio+0x1e>
 8006230:	4620      	mov	r0, r4
 8006232:	f001 f9b7 	bl	80075a4 <_fflush_r>
 8006236:	68e1      	ldr	r1, [r4, #12]
 8006238:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <cleanup_stdio+0x3c>)
 800623a:	4299      	cmp	r1, r3
 800623c:	d004      	beq.n	8006248 <cleanup_stdio+0x30>
 800623e:	4620      	mov	r0, r4
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006244:	f001 b9ae 	b.w	80075a4 <_fflush_r>
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop
 800624c:	200003c0 	.word	0x200003c0
 8006250:	20000428 	.word	0x20000428
 8006254:	20000490 	.word	0x20000490

08006258 <global_stdio_init.part.0>:
 8006258:	b510      	push	{r4, lr}
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <global_stdio_init.part.0+0x30>)
 800625c:	4c0b      	ldr	r4, [pc, #44]	@ (800628c <global_stdio_init.part.0+0x34>)
 800625e:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <global_stdio_init.part.0+0x38>)
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	4620      	mov	r0, r4
 8006264:	2200      	movs	r2, #0
 8006266:	2104      	movs	r1, #4
 8006268:	f7ff ff94 	bl	8006194 <std>
 800626c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006270:	2201      	movs	r2, #1
 8006272:	2109      	movs	r1, #9
 8006274:	f7ff ff8e 	bl	8006194 <std>
 8006278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800627c:	2202      	movs	r2, #2
 800627e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006282:	2112      	movs	r1, #18
 8006284:	f7ff bf86 	b.w	8006194 <std>
 8006288:	200004f8 	.word	0x200004f8
 800628c:	200003c0 	.word	0x200003c0
 8006290:	08006201 	.word	0x08006201

08006294 <__sfp_lock_acquire>:
 8006294:	4801      	ldr	r0, [pc, #4]	@ (800629c <__sfp_lock_acquire+0x8>)
 8006296:	f000 b8b0 	b.w	80063fa <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	200004fd 	.word	0x200004fd

080062a0 <__sfp_lock_release>:
 80062a0:	4801      	ldr	r0, [pc, #4]	@ (80062a8 <__sfp_lock_release+0x8>)
 80062a2:	f000 b8ab 	b.w	80063fc <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	200004fd 	.word	0x200004fd

080062ac <__sinit>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	4604      	mov	r4, r0
 80062b0:	f7ff fff0 	bl	8006294 <__sfp_lock_acquire>
 80062b4:	6a23      	ldr	r3, [r4, #32]
 80062b6:	b11b      	cbz	r3, 80062c0 <__sinit+0x14>
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062bc:	f7ff bff0 	b.w	80062a0 <__sfp_lock_release>
 80062c0:	4b04      	ldr	r3, [pc, #16]	@ (80062d4 <__sinit+0x28>)
 80062c2:	6223      	str	r3, [r4, #32]
 80062c4:	4b04      	ldr	r3, [pc, #16]	@ (80062d8 <__sinit+0x2c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f5      	bne.n	80062b8 <__sinit+0xc>
 80062cc:	f7ff ffc4 	bl	8006258 <global_stdio_init.part.0>
 80062d0:	e7f2      	b.n	80062b8 <__sinit+0xc>
 80062d2:	bf00      	nop
 80062d4:	08006219 	.word	0x08006219
 80062d8:	200004f8 	.word	0x200004f8

080062dc <_fwalk_sglue>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	4607      	mov	r7, r0
 80062e2:	4688      	mov	r8, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	2600      	movs	r6, #0
 80062e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ec:	f1b9 0901 	subs.w	r9, r9, #1
 80062f0:	d505      	bpl.n	80062fe <_fwalk_sglue+0x22>
 80062f2:	6824      	ldr	r4, [r4, #0]
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	d1f7      	bne.n	80062e8 <_fwalk_sglue+0xc>
 80062f8:	4630      	mov	r0, r6
 80062fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d907      	bls.n	8006314 <_fwalk_sglue+0x38>
 8006304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006308:	3301      	adds	r3, #1
 800630a:	d003      	beq.n	8006314 <_fwalk_sglue+0x38>
 800630c:	4629      	mov	r1, r5
 800630e:	4638      	mov	r0, r7
 8006310:	47c0      	blx	r8
 8006312:	4306      	orrs	r6, r0
 8006314:	3568      	adds	r5, #104	@ 0x68
 8006316:	e7e9      	b.n	80062ec <_fwalk_sglue+0x10>

08006318 <_vsniprintf_r>:
 8006318:	b530      	push	{r4, r5, lr}
 800631a:	4614      	mov	r4, r2
 800631c:	2c00      	cmp	r4, #0
 800631e:	b09b      	sub	sp, #108	@ 0x6c
 8006320:	4605      	mov	r5, r0
 8006322:	461a      	mov	r2, r3
 8006324:	da05      	bge.n	8006332 <_vsniprintf_r+0x1a>
 8006326:	238b      	movs	r3, #139	@ 0x8b
 8006328:	6003      	str	r3, [r0, #0]
 800632a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800632e:	b01b      	add	sp, #108	@ 0x6c
 8006330:	bd30      	pop	{r4, r5, pc}
 8006332:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006336:	f8ad 300c 	strh.w	r3, [sp, #12]
 800633a:	bf14      	ite	ne
 800633c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006340:	4623      	moveq	r3, r4
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	9305      	str	r3, [sp, #20]
 8006346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800634a:	9100      	str	r1, [sp, #0]
 800634c:	9104      	str	r1, [sp, #16]
 800634e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006352:	4669      	mov	r1, sp
 8006354:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006356:	f000 fefb 	bl	8007150 <_svfiprintf_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	bfbc      	itt	lt
 800635e:	238b      	movlt	r3, #139	@ 0x8b
 8006360:	602b      	strlt	r3, [r5, #0]
 8006362:	2c00      	cmp	r4, #0
 8006364:	d0e3      	beq.n	800632e <_vsniprintf_r+0x16>
 8006366:	9b00      	ldr	r3, [sp, #0]
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e7df      	b.n	800632e <_vsniprintf_r+0x16>
	...

08006370 <vsniprintf>:
 8006370:	b507      	push	{r0, r1, r2, lr}
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	460a      	mov	r2, r1
 8006378:	4601      	mov	r1, r0
 800637a:	4803      	ldr	r0, [pc, #12]	@ (8006388 <vsniprintf+0x18>)
 800637c:	6800      	ldr	r0, [r0, #0]
 800637e:	f7ff ffcb 	bl	8006318 <_vsniprintf_r>
 8006382:	b003      	add	sp, #12
 8006384:	f85d fb04 	ldr.w	pc, [sp], #4
 8006388:	20000018 	.word	0x20000018

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <_localeconv_r>:
 800639c:	4800      	ldr	r0, [pc, #0]	@ (80063a0 <_localeconv_r+0x4>)
 800639e:	4770      	bx	lr
 80063a0:	20000158 	.word	0x20000158

080063a4 <__errno>:
 80063a4:	4b01      	ldr	r3, [pc, #4]	@ (80063ac <__errno+0x8>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000018 	.word	0x20000018

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4d0d      	ldr	r5, [pc, #52]	@ (80063e8 <__libc_init_array+0x38>)
 80063b4:	4c0d      	ldr	r4, [pc, #52]	@ (80063ec <__libc_init_array+0x3c>)
 80063b6:	1b64      	subs	r4, r4, r5
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	2600      	movs	r6, #0
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	4d0b      	ldr	r5, [pc, #44]	@ (80063f0 <__libc_init_array+0x40>)
 80063c2:	4c0c      	ldr	r4, [pc, #48]	@ (80063f4 <__libc_init_array+0x44>)
 80063c4:	f002 f8ee 	bl	80085a4 <_init>
 80063c8:	1b64      	subs	r4, r4, r5
 80063ca:	10a4      	asrs	r4, r4, #2
 80063cc:	2600      	movs	r6, #0
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	080089b0 	.word	0x080089b0
 80063ec:	080089b0 	.word	0x080089b0
 80063f0:	080089b0 	.word	0x080089b0
 80063f4:	080089b4 	.word	0x080089b4

080063f8 <__retarget_lock_init_recursive>:
 80063f8:	4770      	bx	lr

080063fa <__retarget_lock_acquire_recursive>:
 80063fa:	4770      	bx	lr

080063fc <__retarget_lock_release_recursive>:
 80063fc:	4770      	bx	lr

080063fe <quorem>:
 80063fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006402:	6903      	ldr	r3, [r0, #16]
 8006404:	690c      	ldr	r4, [r1, #16]
 8006406:	42a3      	cmp	r3, r4
 8006408:	4607      	mov	r7, r0
 800640a:	db7e      	blt.n	800650a <quorem+0x10c>
 800640c:	3c01      	subs	r4, #1
 800640e:	f101 0814 	add.w	r8, r1, #20
 8006412:	00a3      	lsls	r3, r4, #2
 8006414:	f100 0514 	add.w	r5, r0, #20
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006428:	3301      	adds	r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006430:	fbb2 f6f3 	udiv	r6, r2, r3
 8006434:	d32e      	bcc.n	8006494 <quorem+0x96>
 8006436:	f04f 0a00 	mov.w	sl, #0
 800643a:	46c4      	mov	ip, r8
 800643c:	46ae      	mov	lr, r5
 800643e:	46d3      	mov	fp, sl
 8006440:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006444:	b298      	uxth	r0, r3
 8006446:	fb06 a000 	mla	r0, r6, r0, sl
 800644a:	0c02      	lsrs	r2, r0, #16
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	fb06 2303 	mla	r3, r6, r3, r2
 8006452:	f8de 2000 	ldr.w	r2, [lr]
 8006456:	b280      	uxth	r0, r0
 8006458:	b292      	uxth	r2, r2
 800645a:	1a12      	subs	r2, r2, r0
 800645c:	445a      	add	r2, fp
 800645e:	f8de 0000 	ldr.w	r0, [lr]
 8006462:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006466:	b29b      	uxth	r3, r3
 8006468:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800646c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006470:	b292      	uxth	r2, r2
 8006472:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006476:	45e1      	cmp	r9, ip
 8006478:	f84e 2b04 	str.w	r2, [lr], #4
 800647c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006480:	d2de      	bcs.n	8006440 <quorem+0x42>
 8006482:	9b00      	ldr	r3, [sp, #0]
 8006484:	58eb      	ldr	r3, [r5, r3]
 8006486:	b92b      	cbnz	r3, 8006494 <quorem+0x96>
 8006488:	9b01      	ldr	r3, [sp, #4]
 800648a:	3b04      	subs	r3, #4
 800648c:	429d      	cmp	r5, r3
 800648e:	461a      	mov	r2, r3
 8006490:	d32f      	bcc.n	80064f2 <quorem+0xf4>
 8006492:	613c      	str	r4, [r7, #16]
 8006494:	4638      	mov	r0, r7
 8006496:	f001 fb33 	bl	8007b00 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	db25      	blt.n	80064ea <quorem+0xec>
 800649e:	4629      	mov	r1, r5
 80064a0:	2000      	movs	r0, #0
 80064a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80064a6:	f8d1 c000 	ldr.w	ip, [r1]
 80064aa:	fa1f fe82 	uxth.w	lr, r2
 80064ae:	fa1f f38c 	uxth.w	r3, ip
 80064b2:	eba3 030e 	sub.w	r3, r3, lr
 80064b6:	4403      	add	r3, r0
 80064b8:	0c12      	lsrs	r2, r2, #16
 80064ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c8:	45c1      	cmp	r9, r8
 80064ca:	f841 3b04 	str.w	r3, [r1], #4
 80064ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064d2:	d2e6      	bcs.n	80064a2 <quorem+0xa4>
 80064d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064dc:	b922      	cbnz	r2, 80064e8 <quorem+0xea>
 80064de:	3b04      	subs	r3, #4
 80064e0:	429d      	cmp	r5, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	d30b      	bcc.n	80064fe <quorem+0x100>
 80064e6:	613c      	str	r4, [r7, #16]
 80064e8:	3601      	adds	r6, #1
 80064ea:	4630      	mov	r0, r6
 80064ec:	b003      	add	sp, #12
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1cb      	bne.n	8006492 <quorem+0x94>
 80064fa:	3c01      	subs	r4, #1
 80064fc:	e7c6      	b.n	800648c <quorem+0x8e>
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	3b04      	subs	r3, #4
 8006502:	2a00      	cmp	r2, #0
 8006504:	d1ef      	bne.n	80064e6 <quorem+0xe8>
 8006506:	3c01      	subs	r4, #1
 8006508:	e7ea      	b.n	80064e0 <quorem+0xe2>
 800650a:	2000      	movs	r0, #0
 800650c:	e7ee      	b.n	80064ec <quorem+0xee>
	...

08006510 <_dtoa_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	69c7      	ldr	r7, [r0, #28]
 8006516:	b099      	sub	sp, #100	@ 0x64
 8006518:	ed8d 0b02 	vstr	d0, [sp, #8]
 800651c:	ec55 4b10 	vmov	r4, r5, d0
 8006520:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006522:	9109      	str	r1, [sp, #36]	@ 0x24
 8006524:	4683      	mov	fp, r0
 8006526:	920e      	str	r2, [sp, #56]	@ 0x38
 8006528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800652a:	b97f      	cbnz	r7, 800654c <_dtoa_r+0x3c>
 800652c:	2010      	movs	r0, #16
 800652e:	f000 ff0b 	bl	8007348 <malloc>
 8006532:	4602      	mov	r2, r0
 8006534:	f8cb 001c 	str.w	r0, [fp, #28]
 8006538:	b920      	cbnz	r0, 8006544 <_dtoa_r+0x34>
 800653a:	4ba7      	ldr	r3, [pc, #668]	@ (80067d8 <_dtoa_r+0x2c8>)
 800653c:	21ef      	movs	r1, #239	@ 0xef
 800653e:	48a7      	ldr	r0, [pc, #668]	@ (80067dc <_dtoa_r+0x2cc>)
 8006540:	f001 fcd6 	bl	8007ef0 <__assert_func>
 8006544:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006548:	6007      	str	r7, [r0, #0]
 800654a:	60c7      	str	r7, [r0, #12]
 800654c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	b159      	cbz	r1, 800656c <_dtoa_r+0x5c>
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	604a      	str	r2, [r1, #4]
 8006558:	2301      	movs	r3, #1
 800655a:	4093      	lsls	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	4658      	mov	r0, fp
 8006560:	f001 f894 	bl	800768c <_Bfree>
 8006564:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	1e2b      	subs	r3, r5, #0
 800656e:	bfb9      	ittee	lt
 8006570:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006574:	9303      	strlt	r3, [sp, #12]
 8006576:	2300      	movge	r3, #0
 8006578:	6033      	strge	r3, [r6, #0]
 800657a:	9f03      	ldr	r7, [sp, #12]
 800657c:	4b98      	ldr	r3, [pc, #608]	@ (80067e0 <_dtoa_r+0x2d0>)
 800657e:	bfbc      	itt	lt
 8006580:	2201      	movlt	r2, #1
 8006582:	6032      	strlt	r2, [r6, #0]
 8006584:	43bb      	bics	r3, r7
 8006586:	d112      	bne.n	80065ae <_dtoa_r+0x9e>
 8006588:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800658a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006594:	4323      	orrs	r3, r4
 8006596:	f000 854d 	beq.w	8007034 <_dtoa_r+0xb24>
 800659a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800659c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067f4 <_dtoa_r+0x2e4>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 854f 	beq.w	8007044 <_dtoa_r+0xb34>
 80065a6:	f10a 0303 	add.w	r3, sl, #3
 80065aa:	f000 bd49 	b.w	8007040 <_dtoa_r+0xb30>
 80065ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	ec51 0b17 	vmov	r0, r1, d7
 80065b8:	2300      	movs	r3, #0
 80065ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065be:	f7fa fa8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c2:	4680      	mov	r8, r0
 80065c4:	b158      	cbz	r0, 80065de <_dtoa_r+0xce>
 80065c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065c8:	2301      	movs	r3, #1
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065ce:	b113      	cbz	r3, 80065d6 <_dtoa_r+0xc6>
 80065d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065d2:	4b84      	ldr	r3, [pc, #528]	@ (80067e4 <_dtoa_r+0x2d4>)
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067f8 <_dtoa_r+0x2e8>
 80065da:	f000 bd33 	b.w	8007044 <_dtoa_r+0xb34>
 80065de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065e2:	aa16      	add	r2, sp, #88	@ 0x58
 80065e4:	a917      	add	r1, sp, #92	@ 0x5c
 80065e6:	4658      	mov	r0, fp
 80065e8:	f001 fb3a 	bl	8007c60 <__d2b>
 80065ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065f0:	4681      	mov	r9, r0
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	d077      	beq.n	80066e6 <_dtoa_r+0x1d6>
 80065f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006604:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006608:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800660c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006610:	4619      	mov	r1, r3
 8006612:	2200      	movs	r2, #0
 8006614:	4b74      	ldr	r3, [pc, #464]	@ (80067e8 <_dtoa_r+0x2d8>)
 8006616:	f7f9 fe3f 	bl	8000298 <__aeabi_dsub>
 800661a:	a369      	add	r3, pc, #420	@ (adr r3, 80067c0 <_dtoa_r+0x2b0>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fff2 	bl	8000608 <__aeabi_dmul>
 8006624:	a368      	add	r3, pc, #416	@ (adr r3, 80067c8 <_dtoa_r+0x2b8>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fe37 	bl	800029c <__adddf3>
 800662e:	4604      	mov	r4, r0
 8006630:	4630      	mov	r0, r6
 8006632:	460d      	mov	r5, r1
 8006634:	f7f9 ff7e 	bl	8000534 <__aeabi_i2d>
 8006638:	a365      	add	r3, pc, #404	@ (adr r3, 80067d0 <_dtoa_r+0x2c0>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ffe3 	bl	8000608 <__aeabi_dmul>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7f9 fe27 	bl	800029c <__adddf3>
 800664e:	4604      	mov	r4, r0
 8006650:	460d      	mov	r5, r1
 8006652:	f7fa fa89 	bl	8000b68 <__aeabi_d2iz>
 8006656:	2200      	movs	r2, #0
 8006658:	4607      	mov	r7, r0
 800665a:	2300      	movs	r3, #0
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7fa fa44 	bl	8000aec <__aeabi_dcmplt>
 8006664:	b140      	cbz	r0, 8006678 <_dtoa_r+0x168>
 8006666:	4638      	mov	r0, r7
 8006668:	f7f9 ff64 	bl	8000534 <__aeabi_i2d>
 800666c:	4622      	mov	r2, r4
 800666e:	462b      	mov	r3, r5
 8006670:	f7fa fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8006674:	b900      	cbnz	r0, 8006678 <_dtoa_r+0x168>
 8006676:	3f01      	subs	r7, #1
 8006678:	2f16      	cmp	r7, #22
 800667a:	d851      	bhi.n	8006720 <_dtoa_r+0x210>
 800667c:	4b5b      	ldr	r3, [pc, #364]	@ (80067ec <_dtoa_r+0x2dc>)
 800667e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800668a:	f7fa fa2f 	bl	8000aec <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	d048      	beq.n	8006724 <_dtoa_r+0x214>
 8006692:	3f01      	subs	r7, #1
 8006694:	2300      	movs	r3, #0
 8006696:	9312      	str	r3, [sp, #72]	@ 0x48
 8006698:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800669a:	1b9b      	subs	r3, r3, r6
 800669c:	1e5a      	subs	r2, r3, #1
 800669e:	bf44      	itt	mi
 80066a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80066a4:	2300      	movmi	r3, #0
 80066a6:	9208      	str	r2, [sp, #32]
 80066a8:	bf54      	ite	pl
 80066aa:	f04f 0800 	movpl.w	r8, #0
 80066ae:	9308      	strmi	r3, [sp, #32]
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	db39      	blt.n	8006728 <_dtoa_r+0x218>
 80066b4:	9b08      	ldr	r3, [sp, #32]
 80066b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066b8:	443b      	add	r3, r7
 80066ba:	9308      	str	r3, [sp, #32]
 80066bc:	2300      	movs	r3, #0
 80066be:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d864      	bhi.n	8006790 <_dtoa_r+0x280>
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	bfc4      	itt	gt
 80066ca:	3b04      	subgt	r3, #4
 80066cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d0:	f1a3 0302 	sub.w	r3, r3, #2
 80066d4:	bfcc      	ite	gt
 80066d6:	2400      	movgt	r4, #0
 80066d8:	2401      	movle	r4, #1
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d863      	bhi.n	80067a6 <_dtoa_r+0x296>
 80066de:	e8df f003 	tbb	[pc, r3]
 80066e2:	372a      	.short	0x372a
 80066e4:	5535      	.short	0x5535
 80066e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066ea:	441e      	add	r6, r3
 80066ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	bfc1      	itttt	gt
 80066f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066f8:	409f      	lslgt	r7, r3
 80066fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006702:	bfd6      	itet	le
 8006704:	f1c3 0320 	rsble	r3, r3, #32
 8006708:	ea47 0003 	orrgt.w	r0, r7, r3
 800670c:	fa04 f003 	lslle.w	r0, r4, r3
 8006710:	f7f9 ff00 	bl	8000514 <__aeabi_ui2d>
 8006714:	2201      	movs	r2, #1
 8006716:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800671a:	3e01      	subs	r6, #1
 800671c:	9214      	str	r2, [sp, #80]	@ 0x50
 800671e:	e777      	b.n	8006610 <_dtoa_r+0x100>
 8006720:	2301      	movs	r3, #1
 8006722:	e7b8      	b.n	8006696 <_dtoa_r+0x186>
 8006724:	9012      	str	r0, [sp, #72]	@ 0x48
 8006726:	e7b7      	b.n	8006698 <_dtoa_r+0x188>
 8006728:	427b      	negs	r3, r7
 800672a:	930a      	str	r3, [sp, #40]	@ 0x28
 800672c:	2300      	movs	r3, #0
 800672e:	eba8 0807 	sub.w	r8, r8, r7
 8006732:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006734:	e7c4      	b.n	80066c0 <_dtoa_r+0x1b0>
 8006736:	2300      	movs	r3, #0
 8006738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800673a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	dc35      	bgt.n	80067ac <_dtoa_r+0x29c>
 8006740:	2301      	movs	r3, #1
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	9307      	str	r3, [sp, #28]
 8006746:	461a      	mov	r2, r3
 8006748:	920e      	str	r2, [sp, #56]	@ 0x38
 800674a:	e00b      	b.n	8006764 <_dtoa_r+0x254>
 800674c:	2301      	movs	r3, #1
 800674e:	e7f3      	b.n	8006738 <_dtoa_r+0x228>
 8006750:	2300      	movs	r3, #0
 8006752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	bfb8      	it	lt
 8006762:	2301      	movlt	r3, #1
 8006764:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006768:	2100      	movs	r1, #0
 800676a:	2204      	movs	r2, #4
 800676c:	f102 0514 	add.w	r5, r2, #20
 8006770:	429d      	cmp	r5, r3
 8006772:	d91f      	bls.n	80067b4 <_dtoa_r+0x2a4>
 8006774:	6041      	str	r1, [r0, #4]
 8006776:	4658      	mov	r0, fp
 8006778:	f000 ff48 	bl	800760c <_Balloc>
 800677c:	4682      	mov	sl, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	d13c      	bne.n	80067fc <_dtoa_r+0x2ec>
 8006782:	4b1b      	ldr	r3, [pc, #108]	@ (80067f0 <_dtoa_r+0x2e0>)
 8006784:	4602      	mov	r2, r0
 8006786:	f240 11af 	movw	r1, #431	@ 0x1af
 800678a:	e6d8      	b.n	800653e <_dtoa_r+0x2e>
 800678c:	2301      	movs	r3, #1
 800678e:	e7e0      	b.n	8006752 <_dtoa_r+0x242>
 8006790:	2401      	movs	r4, #1
 8006792:	2300      	movs	r3, #0
 8006794:	9309      	str	r3, [sp, #36]	@ 0x24
 8006796:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2312      	movs	r3, #18
 80067a4:	e7d0      	b.n	8006748 <_dtoa_r+0x238>
 80067a6:	2301      	movs	r3, #1
 80067a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067aa:	e7f5      	b.n	8006798 <_dtoa_r+0x288>
 80067ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	9307      	str	r3, [sp, #28]
 80067b2:	e7d7      	b.n	8006764 <_dtoa_r+0x254>
 80067b4:	3101      	adds	r1, #1
 80067b6:	0052      	lsls	r2, r2, #1
 80067b8:	e7d8      	b.n	800676c <_dtoa_r+0x25c>
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w
 80067c0:	636f4361 	.word	0x636f4361
 80067c4:	3fd287a7 	.word	0x3fd287a7
 80067c8:	8b60c8b3 	.word	0x8b60c8b3
 80067cc:	3fc68a28 	.word	0x3fc68a28
 80067d0:	509f79fb 	.word	0x509f79fb
 80067d4:	3fd34413 	.word	0x3fd34413
 80067d8:	08008679 	.word	0x08008679
 80067dc:	08008690 	.word	0x08008690
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08008649 	.word	0x08008649
 80067e8:	3ff80000 	.word	0x3ff80000
 80067ec:	08008798 	.word	0x08008798
 80067f0:	080086e8 	.word	0x080086e8
 80067f4:	08008675 	.word	0x08008675
 80067f8:	08008648 	.word	0x08008648
 80067fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006800:	6018      	str	r0, [r3, #0]
 8006802:	9b07      	ldr	r3, [sp, #28]
 8006804:	2b0e      	cmp	r3, #14
 8006806:	f200 80a4 	bhi.w	8006952 <_dtoa_r+0x442>
 800680a:	2c00      	cmp	r4, #0
 800680c:	f000 80a1 	beq.w	8006952 <_dtoa_r+0x442>
 8006810:	2f00      	cmp	r7, #0
 8006812:	dd33      	ble.n	800687c <_dtoa_r+0x36c>
 8006814:	4bad      	ldr	r3, [pc, #692]	@ (8006acc <_dtoa_r+0x5bc>)
 8006816:	f007 020f 	and.w	r2, r7, #15
 800681a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800681e:	ed93 7b00 	vldr	d7, [r3]
 8006822:	05f8      	lsls	r0, r7, #23
 8006824:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006828:	ea4f 1427 	mov.w	r4, r7, asr #4
 800682c:	d516      	bpl.n	800685c <_dtoa_r+0x34c>
 800682e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ad0 <_dtoa_r+0x5c0>)
 8006830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006834:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006838:	f7fa f810 	bl	800085c <__aeabi_ddiv>
 800683c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006840:	f004 040f 	and.w	r4, r4, #15
 8006844:	2603      	movs	r6, #3
 8006846:	4da2      	ldr	r5, [pc, #648]	@ (8006ad0 <_dtoa_r+0x5c0>)
 8006848:	b954      	cbnz	r4, 8006860 <_dtoa_r+0x350>
 800684a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006852:	f7fa f803 	bl	800085c <__aeabi_ddiv>
 8006856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685a:	e028      	b.n	80068ae <_dtoa_r+0x39e>
 800685c:	2602      	movs	r6, #2
 800685e:	e7f2      	b.n	8006846 <_dtoa_r+0x336>
 8006860:	07e1      	lsls	r1, r4, #31
 8006862:	d508      	bpl.n	8006876 <_dtoa_r+0x366>
 8006864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006868:	e9d5 2300 	ldrd	r2, r3, [r5]
 800686c:	f7f9 fecc 	bl	8000608 <__aeabi_dmul>
 8006870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006874:	3601      	adds	r6, #1
 8006876:	1064      	asrs	r4, r4, #1
 8006878:	3508      	adds	r5, #8
 800687a:	e7e5      	b.n	8006848 <_dtoa_r+0x338>
 800687c:	f000 80d2 	beq.w	8006a24 <_dtoa_r+0x514>
 8006880:	427c      	negs	r4, r7
 8006882:	4b92      	ldr	r3, [pc, #584]	@ (8006acc <_dtoa_r+0x5bc>)
 8006884:	4d92      	ldr	r5, [pc, #584]	@ (8006ad0 <_dtoa_r+0x5c0>)
 8006886:	f004 020f 	and.w	r2, r4, #15
 800688a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006896:	f7f9 feb7 	bl	8000608 <__aeabi_dmul>
 800689a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689e:	1124      	asrs	r4, r4, #4
 80068a0:	2300      	movs	r3, #0
 80068a2:	2602      	movs	r6, #2
 80068a4:	2c00      	cmp	r4, #0
 80068a6:	f040 80b2 	bne.w	8006a0e <_dtoa_r+0x4fe>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1d3      	bne.n	8006856 <_dtoa_r+0x346>
 80068ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80b7 	beq.w	8006a28 <_dtoa_r+0x518>
 80068ba:	4b86      	ldr	r3, [pc, #536]	@ (8006ad4 <_dtoa_r+0x5c4>)
 80068bc:	2200      	movs	r2, #0
 80068be:	4620      	mov	r0, r4
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7fa f913 	bl	8000aec <__aeabi_dcmplt>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f000 80ae 	beq.w	8006a28 <_dtoa_r+0x518>
 80068cc:	9b07      	ldr	r3, [sp, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80aa 	beq.w	8006a28 <_dtoa_r+0x518>
 80068d4:	9b00      	ldr	r3, [sp, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dd37      	ble.n	800694a <_dtoa_r+0x43a>
 80068da:	1e7b      	subs	r3, r7, #1
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	4620      	mov	r0, r4
 80068e0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad8 <_dtoa_r+0x5c8>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	4629      	mov	r1, r5
 80068e6:	f7f9 fe8f 	bl	8000608 <__aeabi_dmul>
 80068ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ee:	9c00      	ldr	r4, [sp, #0]
 80068f0:	3601      	adds	r6, #1
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7f9 fe1e 	bl	8000534 <__aeabi_i2d>
 80068f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068fc:	f7f9 fe84 	bl	8000608 <__aeabi_dmul>
 8006900:	4b76      	ldr	r3, [pc, #472]	@ (8006adc <_dtoa_r+0x5cc>)
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fcca 	bl	800029c <__adddf3>
 8006908:	4605      	mov	r5, r0
 800690a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800690e:	2c00      	cmp	r4, #0
 8006910:	f040 808d 	bne.w	8006a2e <_dtoa_r+0x51e>
 8006914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006918:	4b71      	ldr	r3, [pc, #452]	@ (8006ae0 <_dtoa_r+0x5d0>)
 800691a:	2200      	movs	r2, #0
 800691c:	f7f9 fcbc 	bl	8000298 <__aeabi_dsub>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006928:	462a      	mov	r2, r5
 800692a:	4633      	mov	r3, r6
 800692c:	f7fa f8fc 	bl	8000b28 <__aeabi_dcmpgt>
 8006930:	2800      	cmp	r0, #0
 8006932:	f040 828b 	bne.w	8006e4c <_dtoa_r+0x93c>
 8006936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693a:	462a      	mov	r2, r5
 800693c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006940:	f7fa f8d4 	bl	8000aec <__aeabi_dcmplt>
 8006944:	2800      	cmp	r0, #0
 8006946:	f040 8128 	bne.w	8006b9a <_dtoa_r+0x68a>
 800694a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800694e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006954:	2b00      	cmp	r3, #0
 8006956:	f2c0 815a 	blt.w	8006c0e <_dtoa_r+0x6fe>
 800695a:	2f0e      	cmp	r7, #14
 800695c:	f300 8157 	bgt.w	8006c0e <_dtoa_r+0x6fe>
 8006960:	4b5a      	ldr	r3, [pc, #360]	@ (8006acc <_dtoa_r+0x5bc>)
 8006962:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006966:	ed93 7b00 	vldr	d7, [r3]
 800696a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	ed8d 7b00 	vstr	d7, [sp]
 8006972:	da03      	bge.n	800697c <_dtoa_r+0x46c>
 8006974:	9b07      	ldr	r3, [sp, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f340 8101 	ble.w	8006b7e <_dtoa_r+0x66e>
 800697c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006980:	4656      	mov	r6, sl
 8006982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7f9 ff67 	bl	800085c <__aeabi_ddiv>
 800698e:	f7fa f8eb 	bl	8000b68 <__aeabi_d2iz>
 8006992:	4680      	mov	r8, r0
 8006994:	f7f9 fdce 	bl	8000534 <__aeabi_i2d>
 8006998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699c:	f7f9 fe34 	bl	8000608 <__aeabi_dmul>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069ac:	f7f9 fc74 	bl	8000298 <__aeabi_dsub>
 80069b0:	f806 4b01 	strb.w	r4, [r6], #1
 80069b4:	9d07      	ldr	r5, [sp, #28]
 80069b6:	eba6 040a 	sub.w	r4, r6, sl
 80069ba:	42a5      	cmp	r5, r4
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	f040 8117 	bne.w	8006bf2 <_dtoa_r+0x6e2>
 80069c4:	f7f9 fc6a 	bl	800029c <__adddf3>
 80069c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	f7fa f8aa 	bl	8000b28 <__aeabi_dcmpgt>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f040 80f9 	bne.w	8006bcc <_dtoa_r+0x6bc>
 80069da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7fa f879 	bl	8000ad8 <__aeabi_dcmpeq>
 80069e6:	b118      	cbz	r0, 80069f0 <_dtoa_r+0x4e0>
 80069e8:	f018 0f01 	tst.w	r8, #1
 80069ec:	f040 80ee 	bne.w	8006bcc <_dtoa_r+0x6bc>
 80069f0:	4649      	mov	r1, r9
 80069f2:	4658      	mov	r0, fp
 80069f4:	f000 fe4a 	bl	800768c <_Bfree>
 80069f8:	2300      	movs	r3, #0
 80069fa:	7033      	strb	r3, [r6, #0]
 80069fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069fe:	3701      	adds	r7, #1
 8006a00:	601f      	str	r7, [r3, #0]
 8006a02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 831d 	beq.w	8007044 <_dtoa_r+0xb34>
 8006a0a:	601e      	str	r6, [r3, #0]
 8006a0c:	e31a      	b.n	8007044 <_dtoa_r+0xb34>
 8006a0e:	07e2      	lsls	r2, r4, #31
 8006a10:	d505      	bpl.n	8006a1e <_dtoa_r+0x50e>
 8006a12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	3601      	adds	r6, #1
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	1064      	asrs	r4, r4, #1
 8006a20:	3508      	adds	r5, #8
 8006a22:	e73f      	b.n	80068a4 <_dtoa_r+0x394>
 8006a24:	2602      	movs	r6, #2
 8006a26:	e742      	b.n	80068ae <_dtoa_r+0x39e>
 8006a28:	9c07      	ldr	r4, [sp, #28]
 8006a2a:	9704      	str	r7, [sp, #16]
 8006a2c:	e761      	b.n	80068f2 <_dtoa_r+0x3e2>
 8006a2e:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <_dtoa_r+0x5bc>)
 8006a30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a3a:	4454      	add	r4, sl
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	d053      	beq.n	8006ae8 <_dtoa_r+0x5d8>
 8006a40:	4928      	ldr	r1, [pc, #160]	@ (8006ae4 <_dtoa_r+0x5d4>)
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7f9 ff0a 	bl	800085c <__aeabi_ddiv>
 8006a48:	4633      	mov	r3, r6
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	f7f9 fc24 	bl	8000298 <__aeabi_dsub>
 8006a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a54:	4656      	mov	r6, sl
 8006a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a5a:	f7fa f885 	bl	8000b68 <__aeabi_d2iz>
 8006a5e:	4605      	mov	r5, r0
 8006a60:	f7f9 fd68 	bl	8000534 <__aeabi_i2d>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6c:	f7f9 fc14 	bl	8000298 <__aeabi_dsub>
 8006a70:	3530      	adds	r5, #48	@ 0x30
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a7a:	f806 5b01 	strb.w	r5, [r6], #1
 8006a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a82:	f7fa f833 	bl	8000aec <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d171      	bne.n	8006b6e <_dtoa_r+0x65e>
 8006a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a8e:	4911      	ldr	r1, [pc, #68]	@ (8006ad4 <_dtoa_r+0x5c4>)
 8006a90:	2000      	movs	r0, #0
 8006a92:	f7f9 fc01 	bl	8000298 <__aeabi_dsub>
 8006a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a9a:	f7fa f827 	bl	8000aec <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8095 	bne.w	8006bce <_dtoa_r+0x6be>
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	f43f af50 	beq.w	800694a <_dtoa_r+0x43a>
 8006aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006aae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <_dtoa_r+0x5c8>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f7f9 fda9 	bl	8000608 <__aeabi_dmul>
 8006ab6:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <_dtoa_r+0x5c8>)
 8006ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006abc:	2200      	movs	r2, #0
 8006abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac2:	f7f9 fda1 	bl	8000608 <__aeabi_dmul>
 8006ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aca:	e7c4      	b.n	8006a56 <_dtoa_r+0x546>
 8006acc:	08008798 	.word	0x08008798
 8006ad0:	08008770 	.word	0x08008770
 8006ad4:	3ff00000 	.word	0x3ff00000
 8006ad8:	40240000 	.word	0x40240000
 8006adc:	401c0000 	.word	0x401c0000
 8006ae0:	40140000 	.word	0x40140000
 8006ae4:	3fe00000 	.word	0x3fe00000
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	f7f9 fd8c 	bl	8000608 <__aeabi_dmul>
 8006af0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006af4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006af6:	4656      	mov	r6, sl
 8006af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afc:	f7fa f834 	bl	8000b68 <__aeabi_d2iz>
 8006b00:	4605      	mov	r5, r0
 8006b02:	f7f9 fd17 	bl	8000534 <__aeabi_i2d>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0e:	f7f9 fbc3 	bl	8000298 <__aeabi_dsub>
 8006b12:	3530      	adds	r5, #48	@ 0x30
 8006b14:	f806 5b01 	strb.w	r5, [r6], #1
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	42a6      	cmp	r6, r4
 8006b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	d124      	bne.n	8006b72 <_dtoa_r+0x662>
 8006b28:	4bac      	ldr	r3, [pc, #688]	@ (8006ddc <_dtoa_r+0x8cc>)
 8006b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b2e:	f7f9 fbb5 	bl	800029c <__adddf3>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3a:	f7f9 fff5 	bl	8000b28 <__aeabi_dcmpgt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d145      	bne.n	8006bce <_dtoa_r+0x6be>
 8006b42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b46:	49a5      	ldr	r1, [pc, #660]	@ (8006ddc <_dtoa_r+0x8cc>)
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7f9 fba5 	bl	8000298 <__aeabi_dsub>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b56:	f7f9 ffc9 	bl	8000aec <__aeabi_dcmplt>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	f43f aef5 	beq.w	800694a <_dtoa_r+0x43a>
 8006b60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b62:	1e73      	subs	r3, r6, #1
 8006b64:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b6a:	2b30      	cmp	r3, #48	@ 0x30
 8006b6c:	d0f8      	beq.n	8006b60 <_dtoa_r+0x650>
 8006b6e:	9f04      	ldr	r7, [sp, #16]
 8006b70:	e73e      	b.n	80069f0 <_dtoa_r+0x4e0>
 8006b72:	4b9b      	ldr	r3, [pc, #620]	@ (8006de0 <_dtoa_r+0x8d0>)
 8006b74:	f7f9 fd48 	bl	8000608 <__aeabi_dmul>
 8006b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b7c:	e7bc      	b.n	8006af8 <_dtoa_r+0x5e8>
 8006b7e:	d10c      	bne.n	8006b9a <_dtoa_r+0x68a>
 8006b80:	4b98      	ldr	r3, [pc, #608]	@ (8006de4 <_dtoa_r+0x8d4>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b88:	f7f9 fd3e 	bl	8000608 <__aeabi_dmul>
 8006b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b90:	f7f9 ffc0 	bl	8000b14 <__aeabi_dcmpge>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f000 8157 	beq.w	8006e48 <_dtoa_r+0x938>
 8006b9a:	2400      	movs	r4, #0
 8006b9c:	4625      	mov	r5, r4
 8006b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	4656      	mov	r6, sl
 8006ba6:	2700      	movs	r7, #0
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4658      	mov	r0, fp
 8006bac:	f000 fd6e 	bl	800768c <_Bfree>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	d0dc      	beq.n	8006b6e <_dtoa_r+0x65e>
 8006bb4:	b12f      	cbz	r7, 8006bc2 <_dtoa_r+0x6b2>
 8006bb6:	42af      	cmp	r7, r5
 8006bb8:	d003      	beq.n	8006bc2 <_dtoa_r+0x6b2>
 8006bba:	4639      	mov	r1, r7
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	f000 fd65 	bl	800768c <_Bfree>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	f000 fd61 	bl	800768c <_Bfree>
 8006bca:	e7d0      	b.n	8006b6e <_dtoa_r+0x65e>
 8006bcc:	9704      	str	r7, [sp, #16]
 8006bce:	4633      	mov	r3, r6
 8006bd0:	461e      	mov	r6, r3
 8006bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd6:	2a39      	cmp	r2, #57	@ 0x39
 8006bd8:	d107      	bne.n	8006bea <_dtoa_r+0x6da>
 8006bda:	459a      	cmp	sl, r3
 8006bdc:	d1f8      	bne.n	8006bd0 <_dtoa_r+0x6c0>
 8006bde:	9a04      	ldr	r2, [sp, #16]
 8006be0:	3201      	adds	r2, #1
 8006be2:	9204      	str	r2, [sp, #16]
 8006be4:	2230      	movs	r2, #48	@ 0x30
 8006be6:	f88a 2000 	strb.w	r2, [sl]
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	3201      	adds	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e7bd      	b.n	8006b6e <_dtoa_r+0x65e>
 8006bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8006de0 <_dtoa_r+0x8d0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	460d      	mov	r5, r1
 8006c02:	f7f9 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f aebb 	beq.w	8006982 <_dtoa_r+0x472>
 8006c0c:	e6f0      	b.n	80069f0 <_dtoa_r+0x4e0>
 8006c0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c10:	2a00      	cmp	r2, #0
 8006c12:	f000 80db 	beq.w	8006dcc <_dtoa_r+0x8bc>
 8006c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c18:	2a01      	cmp	r2, #1
 8006c1a:	f300 80bf 	bgt.w	8006d9c <_dtoa_r+0x88c>
 8006c1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	f000 80b7 	beq.w	8006d94 <_dtoa_r+0x884>
 8006c26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c2c:	4646      	mov	r6, r8
 8006c2e:	9a08      	ldr	r2, [sp, #32]
 8006c30:	2101      	movs	r1, #1
 8006c32:	441a      	add	r2, r3
 8006c34:	4658      	mov	r0, fp
 8006c36:	4498      	add	r8, r3
 8006c38:	9208      	str	r2, [sp, #32]
 8006c3a:	f000 fddb 	bl	80077f4 <__i2b>
 8006c3e:	4605      	mov	r5, r0
 8006c40:	b15e      	cbz	r6, 8006c5a <_dtoa_r+0x74a>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dd08      	ble.n	8006c5a <_dtoa_r+0x74a>
 8006c48:	42b3      	cmp	r3, r6
 8006c4a:	9a08      	ldr	r2, [sp, #32]
 8006c4c:	bfa8      	it	ge
 8006c4e:	4633      	movge	r3, r6
 8006c50:	eba8 0803 	sub.w	r8, r8, r3
 8006c54:	1af6      	subs	r6, r6, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	9308      	str	r3, [sp, #32]
 8006c5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5c:	b1f3      	cbz	r3, 8006c9c <_dtoa_r+0x78c>
 8006c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80b7 	beq.w	8006dd4 <_dtoa_r+0x8c4>
 8006c66:	b18c      	cbz	r4, 8006c8c <_dtoa_r+0x77c>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	f000 fe81 	bl	8007974 <__pow5mult>
 8006c72:	464a      	mov	r2, r9
 8006c74:	4601      	mov	r1, r0
 8006c76:	4605      	mov	r5, r0
 8006c78:	4658      	mov	r0, fp
 8006c7a:	f000 fdd1 	bl	8007820 <__multiply>
 8006c7e:	4649      	mov	r1, r9
 8006c80:	9004      	str	r0, [sp, #16]
 8006c82:	4658      	mov	r0, fp
 8006c84:	f000 fd02 	bl	800768c <_Bfree>
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	4699      	mov	r9, r3
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8e:	1b1a      	subs	r2, r3, r4
 8006c90:	d004      	beq.n	8006c9c <_dtoa_r+0x78c>
 8006c92:	4649      	mov	r1, r9
 8006c94:	4658      	mov	r0, fp
 8006c96:	f000 fe6d 	bl	8007974 <__pow5mult>
 8006c9a:	4681      	mov	r9, r0
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	f000 fda8 	bl	80077f4 <__i2b>
 8006ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 81cf 	beq.w	800704c <_dtoa_r+0xb3c>
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f000 fe5e 	bl	8007974 <__pow5mult>
 8006cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	f300 8095 	bgt.w	8006dec <_dtoa_r+0x8dc>
 8006cc2:	9b02      	ldr	r3, [sp, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f040 8087 	bne.w	8006dd8 <_dtoa_r+0x8c8>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 8089 	bne.w	8006de8 <_dtoa_r+0x8d8>
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	0d1b      	lsrs	r3, r3, #20
 8006cde:	051b      	lsls	r3, r3, #20
 8006ce0:	b12b      	cbz	r3, 8006cee <_dtoa_r+0x7de>
 8006ce2:	9b08      	ldr	r3, [sp, #32]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	f108 0801 	add.w	r8, r8, #1
 8006cec:	2301      	movs	r3, #1
 8006cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 81b0 	beq.w	8007058 <_dtoa_r+0xb48>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cfe:	6918      	ldr	r0, [r3, #16]
 8006d00:	f000 fd2c 	bl	800775c <__hi0bits>
 8006d04:	f1c0 0020 	rsb	r0, r0, #32
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	4418      	add	r0, r3
 8006d0c:	f010 001f 	ands.w	r0, r0, #31
 8006d10:	d077      	beq.n	8006e02 <_dtoa_r+0x8f2>
 8006d12:	f1c0 0320 	rsb	r3, r0, #32
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	dd6b      	ble.n	8006df2 <_dtoa_r+0x8e2>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	f1c0 001c 	rsb	r0, r0, #28
 8006d20:	4403      	add	r3, r0
 8006d22:	4480      	add	r8, r0
 8006d24:	4406      	add	r6, r0
 8006d26:	9308      	str	r3, [sp, #32]
 8006d28:	f1b8 0f00 	cmp.w	r8, #0
 8006d2c:	dd05      	ble.n	8006d3a <_dtoa_r+0x82a>
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4642      	mov	r2, r8
 8006d32:	4658      	mov	r0, fp
 8006d34:	f000 fe78 	bl	8007a28 <__lshift>
 8006d38:	4681      	mov	r9, r0
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd05      	ble.n	8006d4c <_dtoa_r+0x83c>
 8006d40:	4621      	mov	r1, r4
 8006d42:	461a      	mov	r2, r3
 8006d44:	4658      	mov	r0, fp
 8006d46:	f000 fe6f 	bl	8007a28 <__lshift>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d059      	beq.n	8006e06 <_dtoa_r+0x8f6>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4648      	mov	r0, r9
 8006d56:	f000 fed3 	bl	8007b00 <__mcmp>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	da53      	bge.n	8006e06 <_dtoa_r+0x8f6>
 8006d5e:	1e7b      	subs	r3, r7, #1
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	4649      	mov	r1, r9
 8006d64:	2300      	movs	r3, #0
 8006d66:	220a      	movs	r2, #10
 8006d68:	4658      	mov	r0, fp
 8006d6a:	f000 fcb1 	bl	80076d0 <__multadd>
 8006d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d70:	4681      	mov	r9, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8172 	beq.w	800705c <_dtoa_r+0xb4c>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	220a      	movs	r2, #10
 8006d7e:	4658      	mov	r0, fp
 8006d80:	f000 fca6 	bl	80076d0 <__multadd>
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	4605      	mov	r5, r0
 8006d8a:	dc67      	bgt.n	8006e5c <_dtoa_r+0x94c>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	dc41      	bgt.n	8006e16 <_dtoa_r+0x906>
 8006d92:	e063      	b.n	8006e5c <_dtoa_r+0x94c>
 8006d94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d9a:	e746      	b.n	8006c2a <_dtoa_r+0x71a>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	1e5c      	subs	r4, r3, #1
 8006da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	bfbf      	itttt	lt
 8006da6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006da8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006daa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006dac:	1ae3      	sublt	r3, r4, r3
 8006dae:	bfb4      	ite	lt
 8006db0:	18d2      	addlt	r2, r2, r3
 8006db2:	1b1c      	subge	r4, r3, r4
 8006db4:	9b07      	ldr	r3, [sp, #28]
 8006db6:	bfbc      	itt	lt
 8006db8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006dba:	2400      	movlt	r4, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfb5      	itete	lt
 8006dc0:	eba8 0603 	sublt.w	r6, r8, r3
 8006dc4:	9b07      	ldrge	r3, [sp, #28]
 8006dc6:	2300      	movlt	r3, #0
 8006dc8:	4646      	movge	r6, r8
 8006dca:	e730      	b.n	8006c2e <_dtoa_r+0x71e>
 8006dcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006dd0:	4646      	mov	r6, r8
 8006dd2:	e735      	b.n	8006c40 <_dtoa_r+0x730>
 8006dd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dd6:	e75c      	b.n	8006c92 <_dtoa_r+0x782>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e788      	b.n	8006cee <_dtoa_r+0x7de>
 8006ddc:	3fe00000 	.word	0x3fe00000
 8006de0:	40240000 	.word	0x40240000
 8006de4:	40140000 	.word	0x40140000
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	e780      	b.n	8006cee <_dtoa_r+0x7de>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df0:	e782      	b.n	8006cf8 <_dtoa_r+0x7e8>
 8006df2:	d099      	beq.n	8006d28 <_dtoa_r+0x818>
 8006df4:	9a08      	ldr	r2, [sp, #32]
 8006df6:	331c      	adds	r3, #28
 8006df8:	441a      	add	r2, r3
 8006dfa:	4498      	add	r8, r3
 8006dfc:	441e      	add	r6, r3
 8006dfe:	9208      	str	r2, [sp, #32]
 8006e00:	e792      	b.n	8006d28 <_dtoa_r+0x818>
 8006e02:	4603      	mov	r3, r0
 8006e04:	e7f6      	b.n	8006df4 <_dtoa_r+0x8e4>
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	9704      	str	r7, [sp, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dc20      	bgt.n	8006e50 <_dtoa_r+0x940>
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	dd1e      	ble.n	8006e54 <_dtoa_r+0x944>
 8006e16:	9b00      	ldr	r3, [sp, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f47f aec0 	bne.w	8006b9e <_dtoa_r+0x68e>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	2205      	movs	r2, #5
 8006e22:	4658      	mov	r0, fp
 8006e24:	f000 fc54 	bl	80076d0 <__multadd>
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 fe67 	bl	8007b00 <__mcmp>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f77f aeb3 	ble.w	8006b9e <_dtoa_r+0x68e>
 8006e38:	4656      	mov	r6, sl
 8006e3a:	2331      	movs	r3, #49	@ 0x31
 8006e3c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e40:	9b04      	ldr	r3, [sp, #16]
 8006e42:	3301      	adds	r3, #1
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	e6ae      	b.n	8006ba6 <_dtoa_r+0x696>
 8006e48:	9c07      	ldr	r4, [sp, #28]
 8006e4a:	9704      	str	r7, [sp, #16]
 8006e4c:	4625      	mov	r5, r4
 8006e4e:	e7f3      	b.n	8006e38 <_dtoa_r+0x928>
 8006e50:	9b07      	ldr	r3, [sp, #28]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8104 	beq.w	8007064 <_dtoa_r+0xb54>
 8006e5c:	2e00      	cmp	r6, #0
 8006e5e:	dd05      	ble.n	8006e6c <_dtoa_r+0x95c>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4632      	mov	r2, r6
 8006e64:	4658      	mov	r0, fp
 8006e66:	f000 fddf 	bl	8007a28 <__lshift>
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d05a      	beq.n	8006f28 <_dtoa_r+0xa18>
 8006e72:	6869      	ldr	r1, [r5, #4]
 8006e74:	4658      	mov	r0, fp
 8006e76:	f000 fbc9 	bl	800760c <_Balloc>
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	b928      	cbnz	r0, 8006e8a <_dtoa_r+0x97a>
 8006e7e:	4b84      	ldr	r3, [pc, #528]	@ (8007090 <_dtoa_r+0xb80>)
 8006e80:	4602      	mov	r2, r0
 8006e82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e86:	f7ff bb5a 	b.w	800653e <_dtoa_r+0x2e>
 8006e8a:	692a      	ldr	r2, [r5, #16]
 8006e8c:	3202      	adds	r2, #2
 8006e8e:	0092      	lsls	r2, r2, #2
 8006e90:	f105 010c 	add.w	r1, r5, #12
 8006e94:	300c      	adds	r0, #12
 8006e96:	f001 f81d 	bl	8007ed4 <memcpy>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	f000 fdc2 	bl	8007a28 <__lshift>
 8006ea4:	f10a 0301 	add.w	r3, sl, #1
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	9b00      	ldr	r3, [sp, #0]
 8006eac:	4453      	add	r3, sl
 8006eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	462f      	mov	r7, r5
 8006eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eba:	4605      	mov	r5, r0
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4648      	mov	r0, r9
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	f7ff fa9a 	bl	80063fe <quorem>
 8006eca:	4639      	mov	r1, r7
 8006ecc:	9002      	str	r0, [sp, #8]
 8006ece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	f000 fe14 	bl	8007b00 <__mcmp>
 8006ed8:	462a      	mov	r2, r5
 8006eda:	9008      	str	r0, [sp, #32]
 8006edc:	4621      	mov	r1, r4
 8006ede:	4658      	mov	r0, fp
 8006ee0:	f000 fe2a 	bl	8007b38 <__mdiff>
 8006ee4:	68c2      	ldr	r2, [r0, #12]
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	bb02      	cbnz	r2, 8006f2c <_dtoa_r+0xa1c>
 8006eea:	4601      	mov	r1, r0
 8006eec:	4648      	mov	r0, r9
 8006eee:	f000 fe07 	bl	8007b00 <__mcmp>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006efa:	f000 fbc7 	bl	800768c <_Bfree>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f02:	9e07      	ldr	r6, [sp, #28]
 8006f04:	ea43 0102 	orr.w	r1, r3, r2
 8006f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f0a:	4319      	orrs	r1, r3
 8006f0c:	d110      	bne.n	8006f30 <_dtoa_r+0xa20>
 8006f0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f12:	d029      	beq.n	8006f68 <_dtoa_r+0xa58>
 8006f14:	9b08      	ldr	r3, [sp, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dd02      	ble.n	8006f20 <_dtoa_r+0xa10>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f20:	9b00      	ldr	r3, [sp, #0]
 8006f22:	f883 8000 	strb.w	r8, [r3]
 8006f26:	e63f      	b.n	8006ba8 <_dtoa_r+0x698>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e7bb      	b.n	8006ea4 <_dtoa_r+0x994>
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	e7e1      	b.n	8006ef4 <_dtoa_r+0x9e4>
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db04      	blt.n	8006f40 <_dtoa_r+0xa30>
 8006f36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	d120      	bne.n	8006f82 <_dtoa_r+0xa72>
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	dded      	ble.n	8006f20 <_dtoa_r+0xa10>
 8006f44:	4649      	mov	r1, r9
 8006f46:	2201      	movs	r2, #1
 8006f48:	4658      	mov	r0, fp
 8006f4a:	f000 fd6d 	bl	8007a28 <__lshift>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4681      	mov	r9, r0
 8006f52:	f000 fdd5 	bl	8007b00 <__mcmp>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	dc03      	bgt.n	8006f62 <_dtoa_r+0xa52>
 8006f5a:	d1e1      	bne.n	8006f20 <_dtoa_r+0xa10>
 8006f5c:	f018 0f01 	tst.w	r8, #1
 8006f60:	d0de      	beq.n	8006f20 <_dtoa_r+0xa10>
 8006f62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f66:	d1d8      	bne.n	8006f1a <_dtoa_r+0xa0a>
 8006f68:	9a00      	ldr	r2, [sp, #0]
 8006f6a:	2339      	movs	r3, #57	@ 0x39
 8006f6c:	7013      	strb	r3, [r2, #0]
 8006f6e:	4633      	mov	r3, r6
 8006f70:	461e      	mov	r6, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f78:	2a39      	cmp	r2, #57	@ 0x39
 8006f7a:	d052      	beq.n	8007022 <_dtoa_r+0xb12>
 8006f7c:	3201      	adds	r2, #1
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e612      	b.n	8006ba8 <_dtoa_r+0x698>
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	dd07      	ble.n	8006f96 <_dtoa_r+0xa86>
 8006f86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f8a:	d0ed      	beq.n	8006f68 <_dtoa_r+0xa58>
 8006f8c:	9a00      	ldr	r2, [sp, #0]
 8006f8e:	f108 0301 	add.w	r3, r8, #1
 8006f92:	7013      	strb	r3, [r2, #0]
 8006f94:	e608      	b.n	8006ba8 <_dtoa_r+0x698>
 8006f96:	9b07      	ldr	r3, [sp, #28]
 8006f98:	9a07      	ldr	r2, [sp, #28]
 8006f9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d028      	beq.n	8006ff6 <_dtoa_r+0xae6>
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	220a      	movs	r2, #10
 8006faa:	4658      	mov	r0, fp
 8006fac:	f000 fb90 	bl	80076d0 <__multadd>
 8006fb0:	42af      	cmp	r7, r5
 8006fb2:	4681      	mov	r9, r0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	f04f 020a 	mov.w	r2, #10
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	d107      	bne.n	8006fd2 <_dtoa_r+0xac2>
 8006fc2:	f000 fb85 	bl	80076d0 <__multadd>
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	4605      	mov	r5, r0
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	e774      	b.n	8006ebc <_dtoa_r+0x9ac>
 8006fd2:	f000 fb7d 	bl	80076d0 <__multadd>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4607      	mov	r7, r0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	220a      	movs	r2, #10
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f000 fb76 	bl	80076d0 <__multadd>
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	e7f0      	b.n	8006fca <_dtoa_r+0xaba>
 8006fe8:	9b00      	ldr	r3, [sp, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfcc      	ite	gt
 8006fee:	461e      	movgt	r6, r3
 8006ff0:	2601      	movle	r6, #1
 8006ff2:	4456      	add	r6, sl
 8006ff4:	2700      	movs	r7, #0
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	4658      	mov	r0, fp
 8006ffc:	f000 fd14 	bl	8007a28 <__lshift>
 8007000:	4621      	mov	r1, r4
 8007002:	4681      	mov	r9, r0
 8007004:	f000 fd7c 	bl	8007b00 <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	dcb0      	bgt.n	8006f6e <_dtoa_r+0xa5e>
 800700c:	d102      	bne.n	8007014 <_dtoa_r+0xb04>
 800700e:	f018 0f01 	tst.w	r8, #1
 8007012:	d1ac      	bne.n	8006f6e <_dtoa_r+0xa5e>
 8007014:	4633      	mov	r3, r6
 8007016:	461e      	mov	r6, r3
 8007018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800701c:	2a30      	cmp	r2, #48	@ 0x30
 800701e:	d0fa      	beq.n	8007016 <_dtoa_r+0xb06>
 8007020:	e5c2      	b.n	8006ba8 <_dtoa_r+0x698>
 8007022:	459a      	cmp	sl, r3
 8007024:	d1a4      	bne.n	8006f70 <_dtoa_r+0xa60>
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	3301      	adds	r3, #1
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	2331      	movs	r3, #49	@ 0x31
 800702e:	f88a 3000 	strb.w	r3, [sl]
 8007032:	e5b9      	b.n	8006ba8 <_dtoa_r+0x698>
 8007034:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007036:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007094 <_dtoa_r+0xb84>
 800703a:	b11b      	cbz	r3, 8007044 <_dtoa_r+0xb34>
 800703c:	f10a 0308 	add.w	r3, sl, #8
 8007040:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4650      	mov	r0, sl
 8007046:	b019      	add	sp, #100	@ 0x64
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	2b01      	cmp	r3, #1
 8007050:	f77f ae37 	ble.w	8006cc2 <_dtoa_r+0x7b2>
 8007054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007056:	930a      	str	r3, [sp, #40]	@ 0x28
 8007058:	2001      	movs	r0, #1
 800705a:	e655      	b.n	8006d08 <_dtoa_r+0x7f8>
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f77f aed6 	ble.w	8006e10 <_dtoa_r+0x900>
 8007064:	4656      	mov	r6, sl
 8007066:	4621      	mov	r1, r4
 8007068:	4648      	mov	r0, r9
 800706a:	f7ff f9c8 	bl	80063fe <quorem>
 800706e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007072:	f806 8b01 	strb.w	r8, [r6], #1
 8007076:	9b00      	ldr	r3, [sp, #0]
 8007078:	eba6 020a 	sub.w	r2, r6, sl
 800707c:	4293      	cmp	r3, r2
 800707e:	ddb3      	ble.n	8006fe8 <_dtoa_r+0xad8>
 8007080:	4649      	mov	r1, r9
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4658      	mov	r0, fp
 8007088:	f000 fb22 	bl	80076d0 <__multadd>
 800708c:	4681      	mov	r9, r0
 800708e:	e7ea      	b.n	8007066 <_dtoa_r+0xb56>
 8007090:	080086e8 	.word	0x080086e8
 8007094:	0800866c 	.word	0x0800866c

08007098 <__ssputs_r>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	688e      	ldr	r6, [r1, #8]
 800709e:	461f      	mov	r7, r3
 80070a0:	42be      	cmp	r6, r7
 80070a2:	680b      	ldr	r3, [r1, #0]
 80070a4:	4682      	mov	sl, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	4690      	mov	r8, r2
 80070aa:	d82d      	bhi.n	8007108 <__ssputs_r+0x70>
 80070ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070b4:	d026      	beq.n	8007104 <__ssputs_r+0x6c>
 80070b6:	6965      	ldr	r5, [r4, #20]
 80070b8:	6909      	ldr	r1, [r1, #16]
 80070ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070be:	eba3 0901 	sub.w	r9, r3, r1
 80070c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c6:	1c7b      	adds	r3, r7, #1
 80070c8:	444b      	add	r3, r9
 80070ca:	106d      	asrs	r5, r5, #1
 80070cc:	429d      	cmp	r5, r3
 80070ce:	bf38      	it	cc
 80070d0:	461d      	movcc	r5, r3
 80070d2:	0553      	lsls	r3, r2, #21
 80070d4:	d527      	bpl.n	8007126 <__ssputs_r+0x8e>
 80070d6:	4629      	mov	r1, r5
 80070d8:	f000 f960 	bl	800739c <_malloc_r>
 80070dc:	4606      	mov	r6, r0
 80070de:	b360      	cbz	r0, 800713a <__ssputs_r+0xa2>
 80070e0:	6921      	ldr	r1, [r4, #16]
 80070e2:	464a      	mov	r2, r9
 80070e4:	f000 fef6 	bl	8007ed4 <memcpy>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	6126      	str	r6, [r4, #16]
 80070f6:	6165      	str	r5, [r4, #20]
 80070f8:	444e      	add	r6, r9
 80070fa:	eba5 0509 	sub.w	r5, r5, r9
 80070fe:	6026      	str	r6, [r4, #0]
 8007100:	60a5      	str	r5, [r4, #8]
 8007102:	463e      	mov	r6, r7
 8007104:	42be      	cmp	r6, r7
 8007106:	d900      	bls.n	800710a <__ssputs_r+0x72>
 8007108:	463e      	mov	r6, r7
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	4632      	mov	r2, r6
 800710e:	4641      	mov	r1, r8
 8007110:	f000 fe6f 	bl	8007df2 <memmove>
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	1b9b      	subs	r3, r3, r6
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4433      	add	r3, r6
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	2000      	movs	r0, #0
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007126:	462a      	mov	r2, r5
 8007128:	f000 fe35 	bl	8007d96 <_realloc_r>
 800712c:	4606      	mov	r6, r0
 800712e:	2800      	cmp	r0, #0
 8007130:	d1e0      	bne.n	80070f4 <__ssputs_r+0x5c>
 8007132:	6921      	ldr	r1, [r4, #16]
 8007134:	4650      	mov	r0, sl
 8007136:	f000 ff0d 	bl	8007f54 <_free_r>
 800713a:	230c      	movs	r3, #12
 800713c:	f8ca 3000 	str.w	r3, [sl]
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007146:	81a3      	strh	r3, [r4, #12]
 8007148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800714c:	e7e9      	b.n	8007122 <__ssputs_r+0x8a>
	...

08007150 <_svfiprintf_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4698      	mov	r8, r3
 8007156:	898b      	ldrh	r3, [r1, #12]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	b09d      	sub	sp, #116	@ 0x74
 800715c:	4607      	mov	r7, r0
 800715e:	460d      	mov	r5, r1
 8007160:	4614      	mov	r4, r2
 8007162:	d510      	bpl.n	8007186 <_svfiprintf_r+0x36>
 8007164:	690b      	ldr	r3, [r1, #16]
 8007166:	b973      	cbnz	r3, 8007186 <_svfiprintf_r+0x36>
 8007168:	2140      	movs	r1, #64	@ 0x40
 800716a:	f000 f917 	bl	800739c <_malloc_r>
 800716e:	6028      	str	r0, [r5, #0]
 8007170:	6128      	str	r0, [r5, #16]
 8007172:	b930      	cbnz	r0, 8007182 <_svfiprintf_r+0x32>
 8007174:	230c      	movs	r3, #12
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800717c:	b01d      	add	sp, #116	@ 0x74
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	2340      	movs	r3, #64	@ 0x40
 8007184:	616b      	str	r3, [r5, #20]
 8007186:	2300      	movs	r3, #0
 8007188:	9309      	str	r3, [sp, #36]	@ 0x24
 800718a:	2320      	movs	r3, #32
 800718c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007190:	f8cd 800c 	str.w	r8, [sp, #12]
 8007194:	2330      	movs	r3, #48	@ 0x30
 8007196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007334 <_svfiprintf_r+0x1e4>
 800719a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800719e:	f04f 0901 	mov.w	r9, #1
 80071a2:	4623      	mov	r3, r4
 80071a4:	469a      	mov	sl, r3
 80071a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071aa:	b10a      	cbz	r2, 80071b0 <_svfiprintf_r+0x60>
 80071ac:	2a25      	cmp	r2, #37	@ 0x25
 80071ae:	d1f9      	bne.n	80071a4 <_svfiprintf_r+0x54>
 80071b0:	ebba 0b04 	subs.w	fp, sl, r4
 80071b4:	d00b      	beq.n	80071ce <_svfiprintf_r+0x7e>
 80071b6:	465b      	mov	r3, fp
 80071b8:	4622      	mov	r2, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff ff6b 	bl	8007098 <__ssputs_r>
 80071c2:	3001      	adds	r0, #1
 80071c4:	f000 80a7 	beq.w	8007316 <_svfiprintf_r+0x1c6>
 80071c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ca:	445a      	add	r2, fp
 80071cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ce:	f89a 3000 	ldrb.w	r3, [sl]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 809f 	beq.w	8007316 <_svfiprintf_r+0x1c6>
 80071d8:	2300      	movs	r3, #0
 80071da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e2:	f10a 0a01 	add.w	sl, sl, #1
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	9307      	str	r3, [sp, #28]
 80071ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80071f0:	4654      	mov	r4, sl
 80071f2:	2205      	movs	r2, #5
 80071f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f8:	484e      	ldr	r0, [pc, #312]	@ (8007334 <_svfiprintf_r+0x1e4>)
 80071fa:	f7f8 fff1 	bl	80001e0 <memchr>
 80071fe:	9a04      	ldr	r2, [sp, #16]
 8007200:	b9d8      	cbnz	r0, 800723a <_svfiprintf_r+0xea>
 8007202:	06d0      	lsls	r0, r2, #27
 8007204:	bf44      	itt	mi
 8007206:	2320      	movmi	r3, #32
 8007208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720c:	0711      	lsls	r1, r2, #28
 800720e:	bf44      	itt	mi
 8007210:	232b      	movmi	r3, #43	@ 0x2b
 8007212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007216:	f89a 3000 	ldrb.w	r3, [sl]
 800721a:	2b2a      	cmp	r3, #42	@ 0x2a
 800721c:	d015      	beq.n	800724a <_svfiprintf_r+0xfa>
 800721e:	9a07      	ldr	r2, [sp, #28]
 8007220:	4654      	mov	r4, sl
 8007222:	2000      	movs	r0, #0
 8007224:	f04f 0c0a 	mov.w	ip, #10
 8007228:	4621      	mov	r1, r4
 800722a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722e:	3b30      	subs	r3, #48	@ 0x30
 8007230:	2b09      	cmp	r3, #9
 8007232:	d94b      	bls.n	80072cc <_svfiprintf_r+0x17c>
 8007234:	b1b0      	cbz	r0, 8007264 <_svfiprintf_r+0x114>
 8007236:	9207      	str	r2, [sp, #28]
 8007238:	e014      	b.n	8007264 <_svfiprintf_r+0x114>
 800723a:	eba0 0308 	sub.w	r3, r0, r8
 800723e:	fa09 f303 	lsl.w	r3, r9, r3
 8007242:	4313      	orrs	r3, r2
 8007244:	9304      	str	r3, [sp, #16]
 8007246:	46a2      	mov	sl, r4
 8007248:	e7d2      	b.n	80071f0 <_svfiprintf_r+0xa0>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	1d19      	adds	r1, r3, #4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	9103      	str	r1, [sp, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfbb      	ittet	lt
 8007256:	425b      	neglt	r3, r3
 8007258:	f042 0202 	orrlt.w	r2, r2, #2
 800725c:	9307      	strge	r3, [sp, #28]
 800725e:	9307      	strlt	r3, [sp, #28]
 8007260:	bfb8      	it	lt
 8007262:	9204      	strlt	r2, [sp, #16]
 8007264:	7823      	ldrb	r3, [r4, #0]
 8007266:	2b2e      	cmp	r3, #46	@ 0x2e
 8007268:	d10a      	bne.n	8007280 <_svfiprintf_r+0x130>
 800726a:	7863      	ldrb	r3, [r4, #1]
 800726c:	2b2a      	cmp	r3, #42	@ 0x2a
 800726e:	d132      	bne.n	80072d6 <_svfiprintf_r+0x186>
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	9203      	str	r2, [sp, #12]
 8007278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800727c:	3402      	adds	r4, #2
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007344 <_svfiprintf_r+0x1f4>
 8007284:	7821      	ldrb	r1, [r4, #0]
 8007286:	2203      	movs	r2, #3
 8007288:	4650      	mov	r0, sl
 800728a:	f7f8 ffa9 	bl	80001e0 <memchr>
 800728e:	b138      	cbz	r0, 80072a0 <_svfiprintf_r+0x150>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	eba0 000a 	sub.w	r0, r0, sl
 8007296:	2240      	movs	r2, #64	@ 0x40
 8007298:	4082      	lsls	r2, r0
 800729a:	4313      	orrs	r3, r2
 800729c:	3401      	adds	r4, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	4824      	ldr	r0, [pc, #144]	@ (8007338 <_svfiprintf_r+0x1e8>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072aa:	2206      	movs	r2, #6
 80072ac:	f7f8 ff98 	bl	80001e0 <memchr>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d036      	beq.n	8007322 <_svfiprintf_r+0x1d2>
 80072b4:	4b21      	ldr	r3, [pc, #132]	@ (800733c <_svfiprintf_r+0x1ec>)
 80072b6:	bb1b      	cbnz	r3, 8007300 <_svfiprintf_r+0x1b0>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	3307      	adds	r3, #7
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	3308      	adds	r3, #8
 80072c2:	9303      	str	r3, [sp, #12]
 80072c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c6:	4433      	add	r3, r6
 80072c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ca:	e76a      	b.n	80071a2 <_svfiprintf_r+0x52>
 80072cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d0:	460c      	mov	r4, r1
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7a8      	b.n	8007228 <_svfiprintf_r+0xd8>
 80072d6:	2300      	movs	r3, #0
 80072d8:	3401      	adds	r4, #1
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4620      	mov	r0, r4
 80072e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e8:	3a30      	subs	r2, #48	@ 0x30
 80072ea:	2a09      	cmp	r2, #9
 80072ec:	d903      	bls.n	80072f6 <_svfiprintf_r+0x1a6>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c6      	beq.n	8007280 <_svfiprintf_r+0x130>
 80072f2:	9105      	str	r1, [sp, #20]
 80072f4:	e7c4      	b.n	8007280 <_svfiprintf_r+0x130>
 80072f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fa:	4604      	mov	r4, r0
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7f0      	b.n	80072e2 <_svfiprintf_r+0x192>
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	462a      	mov	r2, r5
 8007306:	4b0e      	ldr	r3, [pc, #56]	@ (8007340 <_svfiprintf_r+0x1f0>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	4638      	mov	r0, r7
 800730c:	f7fe fb8a 	bl	8005a24 <_printf_float>
 8007310:	1c42      	adds	r2, r0, #1
 8007312:	4606      	mov	r6, r0
 8007314:	d1d6      	bne.n	80072c4 <_svfiprintf_r+0x174>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	065b      	lsls	r3, r3, #25
 800731a:	f53f af2d 	bmi.w	8007178 <_svfiprintf_r+0x28>
 800731e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007320:	e72c      	b.n	800717c <_svfiprintf_r+0x2c>
 8007322:	ab03      	add	r3, sp, #12
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	462a      	mov	r2, r5
 8007328:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <_svfiprintf_r+0x1f0>)
 800732a:	a904      	add	r1, sp, #16
 800732c:	4638      	mov	r0, r7
 800732e:	f7fe fe11 	bl	8005f54 <_printf_i>
 8007332:	e7ed      	b.n	8007310 <_svfiprintf_r+0x1c0>
 8007334:	080086f9 	.word	0x080086f9
 8007338:	08008703 	.word	0x08008703
 800733c:	08005a25 	.word	0x08005a25
 8007340:	08007099 	.word	0x08007099
 8007344:	080086ff 	.word	0x080086ff

08007348 <malloc>:
 8007348:	4b02      	ldr	r3, [pc, #8]	@ (8007354 <malloc+0xc>)
 800734a:	4601      	mov	r1, r0
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	f000 b825 	b.w	800739c <_malloc_r>
 8007352:	bf00      	nop
 8007354:	20000018 	.word	0x20000018

08007358 <sbrk_aligned>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4e0f      	ldr	r6, [pc, #60]	@ (8007398 <sbrk_aligned+0x40>)
 800735c:	460c      	mov	r4, r1
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	4605      	mov	r5, r0
 8007362:	b911      	cbnz	r1, 800736a <sbrk_aligned+0x12>
 8007364:	f000 fd94 	bl	8007e90 <_sbrk_r>
 8007368:	6030      	str	r0, [r6, #0]
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 fd8f 	bl	8007e90 <_sbrk_r>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d103      	bne.n	800737e <sbrk_aligned+0x26>
 8007376:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800737a:	4620      	mov	r0, r4
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	1cc4      	adds	r4, r0, #3
 8007380:	f024 0403 	bic.w	r4, r4, #3
 8007384:	42a0      	cmp	r0, r4
 8007386:	d0f8      	beq.n	800737a <sbrk_aligned+0x22>
 8007388:	1a21      	subs	r1, r4, r0
 800738a:	4628      	mov	r0, r5
 800738c:	f000 fd80 	bl	8007e90 <_sbrk_r>
 8007390:	3001      	adds	r0, #1
 8007392:	d1f2      	bne.n	800737a <sbrk_aligned+0x22>
 8007394:	e7ef      	b.n	8007376 <sbrk_aligned+0x1e>
 8007396:	bf00      	nop
 8007398:	20000500 	.word	0x20000500

0800739c <_malloc_r>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	1ccd      	adds	r5, r1, #3
 80073a2:	f025 0503 	bic.w	r5, r5, #3
 80073a6:	3508      	adds	r5, #8
 80073a8:	2d0c      	cmp	r5, #12
 80073aa:	bf38      	it	cc
 80073ac:	250c      	movcc	r5, #12
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	4606      	mov	r6, r0
 80073b2:	db01      	blt.n	80073b8 <_malloc_r+0x1c>
 80073b4:	42a9      	cmp	r1, r5
 80073b6:	d904      	bls.n	80073c2 <_malloc_r+0x26>
 80073b8:	230c      	movs	r3, #12
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	2000      	movs	r0, #0
 80073be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007498 <_malloc_r+0xfc>
 80073c6:	f000 f915 	bl	80075f4 <__malloc_lock>
 80073ca:	f8d8 3000 	ldr.w	r3, [r8]
 80073ce:	461c      	mov	r4, r3
 80073d0:	bb44      	cbnz	r4, 8007424 <_malloc_r+0x88>
 80073d2:	4629      	mov	r1, r5
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff ffbf 	bl	8007358 <sbrk_aligned>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	4604      	mov	r4, r0
 80073de:	d158      	bne.n	8007492 <_malloc_r+0xf6>
 80073e0:	f8d8 4000 	ldr.w	r4, [r8]
 80073e4:	4627      	mov	r7, r4
 80073e6:	2f00      	cmp	r7, #0
 80073e8:	d143      	bne.n	8007472 <_malloc_r+0xd6>
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	d04b      	beq.n	8007486 <_malloc_r+0xea>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	4639      	mov	r1, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	eb04 0903 	add.w	r9, r4, r3
 80073f8:	f000 fd4a 	bl	8007e90 <_sbrk_r>
 80073fc:	4581      	cmp	r9, r0
 80073fe:	d142      	bne.n	8007486 <_malloc_r+0xea>
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	1a6d      	subs	r5, r5, r1
 8007404:	4629      	mov	r1, r5
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffa6 	bl	8007358 <sbrk_aligned>
 800740c:	3001      	adds	r0, #1
 800740e:	d03a      	beq.n	8007486 <_malloc_r+0xea>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	442b      	add	r3, r5
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	f8d8 3000 	ldr.w	r3, [r8]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	bb62      	cbnz	r2, 8007478 <_malloc_r+0xdc>
 800741e:	f8c8 7000 	str.w	r7, [r8]
 8007422:	e00f      	b.n	8007444 <_malloc_r+0xa8>
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	1b52      	subs	r2, r2, r5
 8007428:	d420      	bmi.n	800746c <_malloc_r+0xd0>
 800742a:	2a0b      	cmp	r2, #11
 800742c:	d917      	bls.n	800745e <_malloc_r+0xc2>
 800742e:	1961      	adds	r1, r4, r5
 8007430:	42a3      	cmp	r3, r4
 8007432:	6025      	str	r5, [r4, #0]
 8007434:	bf18      	it	ne
 8007436:	6059      	strne	r1, [r3, #4]
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	bf08      	it	eq
 800743c:	f8c8 1000 	streq.w	r1, [r8]
 8007440:	5162      	str	r2, [r4, r5]
 8007442:	604b      	str	r3, [r1, #4]
 8007444:	4630      	mov	r0, r6
 8007446:	f000 f8db 	bl	8007600 <__malloc_unlock>
 800744a:	f104 000b 	add.w	r0, r4, #11
 800744e:	1d23      	adds	r3, r4, #4
 8007450:	f020 0007 	bic.w	r0, r0, #7
 8007454:	1ac2      	subs	r2, r0, r3
 8007456:	bf1c      	itt	ne
 8007458:	1a1b      	subne	r3, r3, r0
 800745a:	50a3      	strne	r3, [r4, r2]
 800745c:	e7af      	b.n	80073be <_malloc_r+0x22>
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	bf0c      	ite	eq
 8007464:	f8c8 2000 	streq.w	r2, [r8]
 8007468:	605a      	strne	r2, [r3, #4]
 800746a:	e7eb      	b.n	8007444 <_malloc_r+0xa8>
 800746c:	4623      	mov	r3, r4
 800746e:	6864      	ldr	r4, [r4, #4]
 8007470:	e7ae      	b.n	80073d0 <_malloc_r+0x34>
 8007472:	463c      	mov	r4, r7
 8007474:	687f      	ldr	r7, [r7, #4]
 8007476:	e7b6      	b.n	80073e6 <_malloc_r+0x4a>
 8007478:	461a      	mov	r2, r3
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	42a3      	cmp	r3, r4
 800747e:	d1fb      	bne.n	8007478 <_malloc_r+0xdc>
 8007480:	2300      	movs	r3, #0
 8007482:	6053      	str	r3, [r2, #4]
 8007484:	e7de      	b.n	8007444 <_malloc_r+0xa8>
 8007486:	230c      	movs	r3, #12
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	4630      	mov	r0, r6
 800748c:	f000 f8b8 	bl	8007600 <__malloc_unlock>
 8007490:	e794      	b.n	80073bc <_malloc_r+0x20>
 8007492:	6005      	str	r5, [r0, #0]
 8007494:	e7d6      	b.n	8007444 <_malloc_r+0xa8>
 8007496:	bf00      	nop
 8007498:	20000504 	.word	0x20000504

0800749c <__sflush_r>:
 800749c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	0716      	lsls	r6, r2, #28
 80074a6:	4605      	mov	r5, r0
 80074a8:	460c      	mov	r4, r1
 80074aa:	d454      	bmi.n	8007556 <__sflush_r+0xba>
 80074ac:	684b      	ldr	r3, [r1, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dc02      	bgt.n	80074b8 <__sflush_r+0x1c>
 80074b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd48      	ble.n	800754a <__sflush_r+0xae>
 80074b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d045      	beq.n	800754a <__sflush_r+0xae>
 80074be:	2300      	movs	r3, #0
 80074c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074c4:	682f      	ldr	r7, [r5, #0]
 80074c6:	6a21      	ldr	r1, [r4, #32]
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	d030      	beq.n	800752e <__sflush_r+0x92>
 80074cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	0759      	lsls	r1, r3, #29
 80074d2:	d505      	bpl.n	80074e0 <__sflush_r+0x44>
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074da:	b10b      	cbz	r3, 80074e0 <__sflush_r+0x44>
 80074dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	d106      	bne.n	80074fe <__sflush_r+0x62>
 80074f0:	6829      	ldr	r1, [r5, #0]
 80074f2:	291d      	cmp	r1, #29
 80074f4:	d82b      	bhi.n	800754e <__sflush_r+0xb2>
 80074f6:	4a2a      	ldr	r2, [pc, #168]	@ (80075a0 <__sflush_r+0x104>)
 80074f8:	410a      	asrs	r2, r1
 80074fa:	07d6      	lsls	r6, r2, #31
 80074fc:	d427      	bmi.n	800754e <__sflush_r+0xb2>
 80074fe:	2200      	movs	r2, #0
 8007500:	6062      	str	r2, [r4, #4]
 8007502:	04d9      	lsls	r1, r3, #19
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	d504      	bpl.n	8007514 <__sflush_r+0x78>
 800750a:	1c42      	adds	r2, r0, #1
 800750c:	d101      	bne.n	8007512 <__sflush_r+0x76>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b903      	cbnz	r3, 8007514 <__sflush_r+0x78>
 8007512:	6560      	str	r0, [r4, #84]	@ 0x54
 8007514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007516:	602f      	str	r7, [r5, #0]
 8007518:	b1b9      	cbz	r1, 800754a <__sflush_r+0xae>
 800751a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800751e:	4299      	cmp	r1, r3
 8007520:	d002      	beq.n	8007528 <__sflush_r+0x8c>
 8007522:	4628      	mov	r0, r5
 8007524:	f000 fd16 	bl	8007f54 <_free_r>
 8007528:	2300      	movs	r3, #0
 800752a:	6363      	str	r3, [r4, #52]	@ 0x34
 800752c:	e00d      	b.n	800754a <__sflush_r+0xae>
 800752e:	2301      	movs	r3, #1
 8007530:	4628      	mov	r0, r5
 8007532:	47b0      	blx	r6
 8007534:	4602      	mov	r2, r0
 8007536:	1c50      	adds	r0, r2, #1
 8007538:	d1c9      	bne.n	80074ce <__sflush_r+0x32>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0c6      	beq.n	80074ce <__sflush_r+0x32>
 8007540:	2b1d      	cmp	r3, #29
 8007542:	d001      	beq.n	8007548 <__sflush_r+0xac>
 8007544:	2b16      	cmp	r3, #22
 8007546:	d11e      	bne.n	8007586 <__sflush_r+0xea>
 8007548:	602f      	str	r7, [r5, #0]
 800754a:	2000      	movs	r0, #0
 800754c:	e022      	b.n	8007594 <__sflush_r+0xf8>
 800754e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007552:	b21b      	sxth	r3, r3
 8007554:	e01b      	b.n	800758e <__sflush_r+0xf2>
 8007556:	690f      	ldr	r7, [r1, #16]
 8007558:	2f00      	cmp	r7, #0
 800755a:	d0f6      	beq.n	800754a <__sflush_r+0xae>
 800755c:	0793      	lsls	r3, r2, #30
 800755e:	680e      	ldr	r6, [r1, #0]
 8007560:	bf08      	it	eq
 8007562:	694b      	ldreq	r3, [r1, #20]
 8007564:	600f      	str	r7, [r1, #0]
 8007566:	bf18      	it	ne
 8007568:	2300      	movne	r3, #0
 800756a:	eba6 0807 	sub.w	r8, r6, r7
 800756e:	608b      	str	r3, [r1, #8]
 8007570:	f1b8 0f00 	cmp.w	r8, #0
 8007574:	dde9      	ble.n	800754a <__sflush_r+0xae>
 8007576:	6a21      	ldr	r1, [r4, #32]
 8007578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800757a:	4643      	mov	r3, r8
 800757c:	463a      	mov	r2, r7
 800757e:	4628      	mov	r0, r5
 8007580:	47b0      	blx	r6
 8007582:	2800      	cmp	r0, #0
 8007584:	dc08      	bgt.n	8007598 <__sflush_r+0xfc>
 8007586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	4407      	add	r7, r0
 800759a:	eba8 0800 	sub.w	r8, r8, r0
 800759e:	e7e7      	b.n	8007570 <__sflush_r+0xd4>
 80075a0:	dfbffffe 	.word	0xdfbffffe

080075a4 <_fflush_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b913      	cbnz	r3, 80075b4 <_fflush_r+0x10>
 80075ae:	2500      	movs	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	b118      	cbz	r0, 80075be <_fflush_r+0x1a>
 80075b6:	6a03      	ldr	r3, [r0, #32]
 80075b8:	b90b      	cbnz	r3, 80075be <_fflush_r+0x1a>
 80075ba:	f7fe fe77 	bl	80062ac <__sinit>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f3      	beq.n	80075ae <_fflush_r+0xa>
 80075c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	d404      	bmi.n	80075d6 <_fflush_r+0x32>
 80075cc:	0599      	lsls	r1, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <_fflush_r+0x32>
 80075d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d2:	f7fe ff12 	bl	80063fa <__retarget_lock_acquire_recursive>
 80075d6:	4628      	mov	r0, r5
 80075d8:	4621      	mov	r1, r4
 80075da:	f7ff ff5f 	bl	800749c <__sflush_r>
 80075de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e0:	07da      	lsls	r2, r3, #31
 80075e2:	4605      	mov	r5, r0
 80075e4:	d4e4      	bmi.n	80075b0 <_fflush_r+0xc>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d4e1      	bmi.n	80075b0 <_fflush_r+0xc>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f7fe ff05 	bl	80063fc <__retarget_lock_release_recursive>
 80075f2:	e7dd      	b.n	80075b0 <_fflush_r+0xc>

080075f4 <__malloc_lock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	@ (80075fc <__malloc_lock+0x8>)
 80075f6:	f7fe bf00 	b.w	80063fa <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	200004fc 	.word	0x200004fc

08007600 <__malloc_unlock>:
 8007600:	4801      	ldr	r0, [pc, #4]	@ (8007608 <__malloc_unlock+0x8>)
 8007602:	f7fe befb 	b.w	80063fc <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	200004fc 	.word	0x200004fc

0800760c <_Balloc>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	69c6      	ldr	r6, [r0, #28]
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	b976      	cbnz	r6, 8007634 <_Balloc+0x28>
 8007616:	2010      	movs	r0, #16
 8007618:	f7ff fe96 	bl	8007348 <malloc>
 800761c:	4602      	mov	r2, r0
 800761e:	61e0      	str	r0, [r4, #28]
 8007620:	b920      	cbnz	r0, 800762c <_Balloc+0x20>
 8007622:	4b18      	ldr	r3, [pc, #96]	@ (8007684 <_Balloc+0x78>)
 8007624:	4818      	ldr	r0, [pc, #96]	@ (8007688 <_Balloc+0x7c>)
 8007626:	216b      	movs	r1, #107	@ 0x6b
 8007628:	f000 fc62 	bl	8007ef0 <__assert_func>
 800762c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007630:	6006      	str	r6, [r0, #0]
 8007632:	60c6      	str	r6, [r0, #12]
 8007634:	69e6      	ldr	r6, [r4, #28]
 8007636:	68f3      	ldr	r3, [r6, #12]
 8007638:	b183      	cbz	r3, 800765c <_Balloc+0x50>
 800763a:	69e3      	ldr	r3, [r4, #28]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007642:	b9b8      	cbnz	r0, 8007674 <_Balloc+0x68>
 8007644:	2101      	movs	r1, #1
 8007646:	fa01 f605 	lsl.w	r6, r1, r5
 800764a:	1d72      	adds	r2, r6, #5
 800764c:	0092      	lsls	r2, r2, #2
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fc6c 	bl	8007f2c <_calloc_r>
 8007654:	b160      	cbz	r0, 8007670 <_Balloc+0x64>
 8007656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800765a:	e00e      	b.n	800767a <_Balloc+0x6e>
 800765c:	2221      	movs	r2, #33	@ 0x21
 800765e:	2104      	movs	r1, #4
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fc63 	bl	8007f2c <_calloc_r>
 8007666:	69e3      	ldr	r3, [r4, #28]
 8007668:	60f0      	str	r0, [r6, #12]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e4      	bne.n	800763a <_Balloc+0x2e>
 8007670:	2000      	movs	r0, #0
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	6802      	ldr	r2, [r0, #0]
 8007676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800767a:	2300      	movs	r3, #0
 800767c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007680:	e7f7      	b.n	8007672 <_Balloc+0x66>
 8007682:	bf00      	nop
 8007684:	08008679 	.word	0x08008679
 8007688:	0800870a 	.word	0x0800870a

0800768c <_Bfree>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	69c6      	ldr	r6, [r0, #28]
 8007690:	4605      	mov	r5, r0
 8007692:	460c      	mov	r4, r1
 8007694:	b976      	cbnz	r6, 80076b4 <_Bfree+0x28>
 8007696:	2010      	movs	r0, #16
 8007698:	f7ff fe56 	bl	8007348 <malloc>
 800769c:	4602      	mov	r2, r0
 800769e:	61e8      	str	r0, [r5, #28]
 80076a0:	b920      	cbnz	r0, 80076ac <_Bfree+0x20>
 80076a2:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <_Bfree+0x3c>)
 80076a4:	4809      	ldr	r0, [pc, #36]	@ (80076cc <_Bfree+0x40>)
 80076a6:	218f      	movs	r1, #143	@ 0x8f
 80076a8:	f000 fc22 	bl	8007ef0 <__assert_func>
 80076ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076b0:	6006      	str	r6, [r0, #0]
 80076b2:	60c6      	str	r6, [r0, #12]
 80076b4:	b13c      	cbz	r4, 80076c6 <_Bfree+0x3a>
 80076b6:	69eb      	ldr	r3, [r5, #28]
 80076b8:	6862      	ldr	r2, [r4, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076c0:	6021      	str	r1, [r4, #0]
 80076c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	08008679 	.word	0x08008679
 80076cc:	0800870a 	.word	0x0800870a

080076d0 <__multadd>:
 80076d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	690d      	ldr	r5, [r1, #16]
 80076d6:	4607      	mov	r7, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	461e      	mov	r6, r3
 80076dc:	f101 0c14 	add.w	ip, r1, #20
 80076e0:	2000      	movs	r0, #0
 80076e2:	f8dc 3000 	ldr.w	r3, [ip]
 80076e6:	b299      	uxth	r1, r3
 80076e8:	fb02 6101 	mla	r1, r2, r1, r6
 80076ec:	0c1e      	lsrs	r6, r3, #16
 80076ee:	0c0b      	lsrs	r3, r1, #16
 80076f0:	fb02 3306 	mla	r3, r2, r6, r3
 80076f4:	b289      	uxth	r1, r1
 80076f6:	3001      	adds	r0, #1
 80076f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076fc:	4285      	cmp	r5, r0
 80076fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007706:	dcec      	bgt.n	80076e2 <__multadd+0x12>
 8007708:	b30e      	cbz	r6, 800774e <__multadd+0x7e>
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	42ab      	cmp	r3, r5
 800770e:	dc19      	bgt.n	8007744 <__multadd+0x74>
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	4638      	mov	r0, r7
 8007714:	3101      	adds	r1, #1
 8007716:	f7ff ff79 	bl	800760c <_Balloc>
 800771a:	4680      	mov	r8, r0
 800771c:	b928      	cbnz	r0, 800772a <__multadd+0x5a>
 800771e:	4602      	mov	r2, r0
 8007720:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <__multadd+0x84>)
 8007722:	480d      	ldr	r0, [pc, #52]	@ (8007758 <__multadd+0x88>)
 8007724:	21ba      	movs	r1, #186	@ 0xba
 8007726:	f000 fbe3 	bl	8007ef0 <__assert_func>
 800772a:	6922      	ldr	r2, [r4, #16]
 800772c:	3202      	adds	r2, #2
 800772e:	f104 010c 	add.w	r1, r4, #12
 8007732:	0092      	lsls	r2, r2, #2
 8007734:	300c      	adds	r0, #12
 8007736:	f000 fbcd 	bl	8007ed4 <memcpy>
 800773a:	4621      	mov	r1, r4
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ffa5 	bl	800768c <_Bfree>
 8007742:	4644      	mov	r4, r8
 8007744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007748:	3501      	adds	r5, #1
 800774a:	615e      	str	r6, [r3, #20]
 800774c:	6125      	str	r5, [r4, #16]
 800774e:	4620      	mov	r0, r4
 8007750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007754:	080086e8 	.word	0x080086e8
 8007758:	0800870a 	.word	0x0800870a

0800775c <__hi0bits>:
 800775c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007760:	4603      	mov	r3, r0
 8007762:	bf36      	itet	cc
 8007764:	0403      	lslcc	r3, r0, #16
 8007766:	2000      	movcs	r0, #0
 8007768:	2010      	movcc	r0, #16
 800776a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800776e:	bf3c      	itt	cc
 8007770:	021b      	lslcc	r3, r3, #8
 8007772:	3008      	addcc	r0, #8
 8007774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007778:	bf3c      	itt	cc
 800777a:	011b      	lslcc	r3, r3, #4
 800777c:	3004      	addcc	r0, #4
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007782:	bf3c      	itt	cc
 8007784:	009b      	lslcc	r3, r3, #2
 8007786:	3002      	addcc	r0, #2
 8007788:	2b00      	cmp	r3, #0
 800778a:	db05      	blt.n	8007798 <__hi0bits+0x3c>
 800778c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007790:	f100 0001 	add.w	r0, r0, #1
 8007794:	bf08      	it	eq
 8007796:	2020      	moveq	r0, #32
 8007798:	4770      	bx	lr

0800779a <__lo0bits>:
 800779a:	6803      	ldr	r3, [r0, #0]
 800779c:	4602      	mov	r2, r0
 800779e:	f013 0007 	ands.w	r0, r3, #7
 80077a2:	d00b      	beq.n	80077bc <__lo0bits+0x22>
 80077a4:	07d9      	lsls	r1, r3, #31
 80077a6:	d421      	bmi.n	80077ec <__lo0bits+0x52>
 80077a8:	0798      	lsls	r0, r3, #30
 80077aa:	bf49      	itett	mi
 80077ac:	085b      	lsrmi	r3, r3, #1
 80077ae:	089b      	lsrpl	r3, r3, #2
 80077b0:	2001      	movmi	r0, #1
 80077b2:	6013      	strmi	r3, [r2, #0]
 80077b4:	bf5c      	itt	pl
 80077b6:	6013      	strpl	r3, [r2, #0]
 80077b8:	2002      	movpl	r0, #2
 80077ba:	4770      	bx	lr
 80077bc:	b299      	uxth	r1, r3
 80077be:	b909      	cbnz	r1, 80077c4 <__lo0bits+0x2a>
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	2010      	movs	r0, #16
 80077c4:	b2d9      	uxtb	r1, r3
 80077c6:	b909      	cbnz	r1, 80077cc <__lo0bits+0x32>
 80077c8:	3008      	adds	r0, #8
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	0719      	lsls	r1, r3, #28
 80077ce:	bf04      	itt	eq
 80077d0:	091b      	lsreq	r3, r3, #4
 80077d2:	3004      	addeq	r0, #4
 80077d4:	0799      	lsls	r1, r3, #30
 80077d6:	bf04      	itt	eq
 80077d8:	089b      	lsreq	r3, r3, #2
 80077da:	3002      	addeq	r0, #2
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	d403      	bmi.n	80077e8 <__lo0bits+0x4e>
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	f100 0001 	add.w	r0, r0, #1
 80077e6:	d003      	beq.n	80077f0 <__lo0bits+0x56>
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	4770      	bx	lr
 80077ec:	2000      	movs	r0, #0
 80077ee:	4770      	bx	lr
 80077f0:	2020      	movs	r0, #32
 80077f2:	4770      	bx	lr

080077f4 <__i2b>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	460c      	mov	r4, r1
 80077f8:	2101      	movs	r1, #1
 80077fa:	f7ff ff07 	bl	800760c <_Balloc>
 80077fe:	4602      	mov	r2, r0
 8007800:	b928      	cbnz	r0, 800780e <__i2b+0x1a>
 8007802:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <__i2b+0x24>)
 8007804:	4805      	ldr	r0, [pc, #20]	@ (800781c <__i2b+0x28>)
 8007806:	f240 1145 	movw	r1, #325	@ 0x145
 800780a:	f000 fb71 	bl	8007ef0 <__assert_func>
 800780e:	2301      	movs	r3, #1
 8007810:	6144      	str	r4, [r0, #20]
 8007812:	6103      	str	r3, [r0, #16]
 8007814:	bd10      	pop	{r4, pc}
 8007816:	bf00      	nop
 8007818:	080086e8 	.word	0x080086e8
 800781c:	0800870a 	.word	0x0800870a

08007820 <__multiply>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	4614      	mov	r4, r2
 8007826:	690a      	ldr	r2, [r1, #16]
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	429a      	cmp	r2, r3
 800782c:	bfa8      	it	ge
 800782e:	4623      	movge	r3, r4
 8007830:	460f      	mov	r7, r1
 8007832:	bfa4      	itt	ge
 8007834:	460c      	movge	r4, r1
 8007836:	461f      	movge	r7, r3
 8007838:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800783c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007840:	68a3      	ldr	r3, [r4, #8]
 8007842:	6861      	ldr	r1, [r4, #4]
 8007844:	eb0a 0609 	add.w	r6, sl, r9
 8007848:	42b3      	cmp	r3, r6
 800784a:	b085      	sub	sp, #20
 800784c:	bfb8      	it	lt
 800784e:	3101      	addlt	r1, #1
 8007850:	f7ff fedc 	bl	800760c <_Balloc>
 8007854:	b930      	cbnz	r0, 8007864 <__multiply+0x44>
 8007856:	4602      	mov	r2, r0
 8007858:	4b44      	ldr	r3, [pc, #272]	@ (800796c <__multiply+0x14c>)
 800785a:	4845      	ldr	r0, [pc, #276]	@ (8007970 <__multiply+0x150>)
 800785c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007860:	f000 fb46 	bl	8007ef0 <__assert_func>
 8007864:	f100 0514 	add.w	r5, r0, #20
 8007868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800786c:	462b      	mov	r3, r5
 800786e:	2200      	movs	r2, #0
 8007870:	4543      	cmp	r3, r8
 8007872:	d321      	bcc.n	80078b8 <__multiply+0x98>
 8007874:	f107 0114 	add.w	r1, r7, #20
 8007878:	f104 0214 	add.w	r2, r4, #20
 800787c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007880:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007884:	9302      	str	r3, [sp, #8]
 8007886:	1b13      	subs	r3, r2, r4
 8007888:	3b15      	subs	r3, #21
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	3304      	adds	r3, #4
 8007890:	f104 0715 	add.w	r7, r4, #21
 8007894:	42ba      	cmp	r2, r7
 8007896:	bf38      	it	cc
 8007898:	2304      	movcc	r3, #4
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	428b      	cmp	r3, r1
 80078a2:	d80c      	bhi.n	80078be <__multiply+0x9e>
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	dd03      	ble.n	80078b0 <__multiply+0x90>
 80078a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d05b      	beq.n	8007968 <__multiply+0x148>
 80078b0:	6106      	str	r6, [r0, #16]
 80078b2:	b005      	add	sp, #20
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	f843 2b04 	str.w	r2, [r3], #4
 80078bc:	e7d8      	b.n	8007870 <__multiply+0x50>
 80078be:	f8b1 a000 	ldrh.w	sl, [r1]
 80078c2:	f1ba 0f00 	cmp.w	sl, #0
 80078c6:	d024      	beq.n	8007912 <__multiply+0xf2>
 80078c8:	f104 0e14 	add.w	lr, r4, #20
 80078cc:	46a9      	mov	r9, r5
 80078ce:	f04f 0c00 	mov.w	ip, #0
 80078d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078d6:	f8d9 3000 	ldr.w	r3, [r9]
 80078da:	fa1f fb87 	uxth.w	fp, r7
 80078de:	b29b      	uxth	r3, r3
 80078e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80078e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80078e8:	f8d9 7000 	ldr.w	r7, [r9]
 80078ec:	4463      	add	r3, ip
 80078ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80078f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007900:	4572      	cmp	r2, lr
 8007902:	f849 3b04 	str.w	r3, [r9], #4
 8007906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800790a:	d8e2      	bhi.n	80078d2 <__multiply+0xb2>
 800790c:	9b01      	ldr	r3, [sp, #4]
 800790e:	f845 c003 	str.w	ip, [r5, r3]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007918:	3104      	adds	r1, #4
 800791a:	f1b9 0f00 	cmp.w	r9, #0
 800791e:	d021      	beq.n	8007964 <__multiply+0x144>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	f104 0c14 	add.w	ip, r4, #20
 8007926:	46ae      	mov	lr, r5
 8007928:	f04f 0a00 	mov.w	sl, #0
 800792c:	f8bc b000 	ldrh.w	fp, [ip]
 8007930:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007934:	fb09 770b 	mla	r7, r9, fp, r7
 8007938:	4457      	add	r7, sl
 800793a:	b29b      	uxth	r3, r3
 800793c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007940:	f84e 3b04 	str.w	r3, [lr], #4
 8007944:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800794c:	f8be 3000 	ldrh.w	r3, [lr]
 8007950:	fb09 330a 	mla	r3, r9, sl, r3
 8007954:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007958:	4562      	cmp	r2, ip
 800795a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800795e:	d8e5      	bhi.n	800792c <__multiply+0x10c>
 8007960:	9f01      	ldr	r7, [sp, #4]
 8007962:	51eb      	str	r3, [r5, r7]
 8007964:	3504      	adds	r5, #4
 8007966:	e799      	b.n	800789c <__multiply+0x7c>
 8007968:	3e01      	subs	r6, #1
 800796a:	e79b      	b.n	80078a4 <__multiply+0x84>
 800796c:	080086e8 	.word	0x080086e8
 8007970:	0800870a 	.word	0x0800870a

08007974 <__pow5mult>:
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	4615      	mov	r5, r2
 800797a:	f012 0203 	ands.w	r2, r2, #3
 800797e:	4607      	mov	r7, r0
 8007980:	460e      	mov	r6, r1
 8007982:	d007      	beq.n	8007994 <__pow5mult+0x20>
 8007984:	4c25      	ldr	r4, [pc, #148]	@ (8007a1c <__pow5mult+0xa8>)
 8007986:	3a01      	subs	r2, #1
 8007988:	2300      	movs	r3, #0
 800798a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800798e:	f7ff fe9f 	bl	80076d0 <__multadd>
 8007992:	4606      	mov	r6, r0
 8007994:	10ad      	asrs	r5, r5, #2
 8007996:	d03d      	beq.n	8007a14 <__pow5mult+0xa0>
 8007998:	69fc      	ldr	r4, [r7, #28]
 800799a:	b97c      	cbnz	r4, 80079bc <__pow5mult+0x48>
 800799c:	2010      	movs	r0, #16
 800799e:	f7ff fcd3 	bl	8007348 <malloc>
 80079a2:	4602      	mov	r2, r0
 80079a4:	61f8      	str	r0, [r7, #28]
 80079a6:	b928      	cbnz	r0, 80079b4 <__pow5mult+0x40>
 80079a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <__pow5mult+0xac>)
 80079aa:	481e      	ldr	r0, [pc, #120]	@ (8007a24 <__pow5mult+0xb0>)
 80079ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079b0:	f000 fa9e 	bl	8007ef0 <__assert_func>
 80079b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079b8:	6004      	str	r4, [r0, #0]
 80079ba:	60c4      	str	r4, [r0, #12]
 80079bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079c4:	b94c      	cbnz	r4, 80079da <__pow5mult+0x66>
 80079c6:	f240 2171 	movw	r1, #625	@ 0x271
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff ff12 	bl	80077f4 <__i2b>
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80079d6:	4604      	mov	r4, r0
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	f04f 0900 	mov.w	r9, #0
 80079de:	07eb      	lsls	r3, r5, #31
 80079e0:	d50a      	bpl.n	80079f8 <__pow5mult+0x84>
 80079e2:	4631      	mov	r1, r6
 80079e4:	4622      	mov	r2, r4
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7ff ff1a 	bl	8007820 <__multiply>
 80079ec:	4631      	mov	r1, r6
 80079ee:	4680      	mov	r8, r0
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff fe4b 	bl	800768c <_Bfree>
 80079f6:	4646      	mov	r6, r8
 80079f8:	106d      	asrs	r5, r5, #1
 80079fa:	d00b      	beq.n	8007a14 <__pow5mult+0xa0>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	b938      	cbnz	r0, 8007a10 <__pow5mult+0x9c>
 8007a00:	4622      	mov	r2, r4
 8007a02:	4621      	mov	r1, r4
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ff0b 	bl	8007820 <__multiply>
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f8c0 9000 	str.w	r9, [r0]
 8007a10:	4604      	mov	r4, r0
 8007a12:	e7e4      	b.n	80079de <__pow5mult+0x6a>
 8007a14:	4630      	mov	r0, r6
 8007a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08008764 	.word	0x08008764
 8007a20:	08008679 	.word	0x08008679
 8007a24:	0800870a 	.word	0x0800870a

08007a28 <__lshift>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	6849      	ldr	r1, [r1, #4]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a36:	68a3      	ldr	r3, [r4, #8]
 8007a38:	4607      	mov	r7, r0
 8007a3a:	4691      	mov	r9, r2
 8007a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a40:	f108 0601 	add.w	r6, r8, #1
 8007a44:	42b3      	cmp	r3, r6
 8007a46:	db0b      	blt.n	8007a60 <__lshift+0x38>
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7ff fddf 	bl	800760c <_Balloc>
 8007a4e:	4605      	mov	r5, r0
 8007a50:	b948      	cbnz	r0, 8007a66 <__lshift+0x3e>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4b28      	ldr	r3, [pc, #160]	@ (8007af8 <__lshift+0xd0>)
 8007a56:	4829      	ldr	r0, [pc, #164]	@ (8007afc <__lshift+0xd4>)
 8007a58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a5c:	f000 fa48 	bl	8007ef0 <__assert_func>
 8007a60:	3101      	adds	r1, #1
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	e7ee      	b.n	8007a44 <__lshift+0x1c>
 8007a66:	2300      	movs	r3, #0
 8007a68:	f100 0114 	add.w	r1, r0, #20
 8007a6c:	f100 0210 	add.w	r2, r0, #16
 8007a70:	4618      	mov	r0, r3
 8007a72:	4553      	cmp	r3, sl
 8007a74:	db33      	blt.n	8007ade <__lshift+0xb6>
 8007a76:	6920      	ldr	r0, [r4, #16]
 8007a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a7c:	f104 0314 	add.w	r3, r4, #20
 8007a80:	f019 091f 	ands.w	r9, r9, #31
 8007a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a8c:	d02b      	beq.n	8007ae6 <__lshift+0xbe>
 8007a8e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a92:	468a      	mov	sl, r1
 8007a94:	2200      	movs	r2, #0
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	fa00 f009 	lsl.w	r0, r0, r9
 8007a9c:	4310      	orrs	r0, r2
 8007a9e:	f84a 0b04 	str.w	r0, [sl], #4
 8007aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa6:	459c      	cmp	ip, r3
 8007aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007aac:	d8f3      	bhi.n	8007a96 <__lshift+0x6e>
 8007aae:	ebac 0304 	sub.w	r3, ip, r4
 8007ab2:	3b15      	subs	r3, #21
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	3304      	adds	r3, #4
 8007aba:	f104 0015 	add.w	r0, r4, #21
 8007abe:	4584      	cmp	ip, r0
 8007ac0:	bf38      	it	cc
 8007ac2:	2304      	movcc	r3, #4
 8007ac4:	50ca      	str	r2, [r1, r3]
 8007ac6:	b10a      	cbz	r2, 8007acc <__lshift+0xa4>
 8007ac8:	f108 0602 	add.w	r6, r8, #2
 8007acc:	3e01      	subs	r6, #1
 8007ace:	4638      	mov	r0, r7
 8007ad0:	612e      	str	r6, [r5, #16]
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	f7ff fdda 	bl	800768c <_Bfree>
 8007ad8:	4628      	mov	r0, r5
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	e7c5      	b.n	8007a72 <__lshift+0x4a>
 8007ae6:	3904      	subs	r1, #4
 8007ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8007af0:	459c      	cmp	ip, r3
 8007af2:	d8f9      	bhi.n	8007ae8 <__lshift+0xc0>
 8007af4:	e7ea      	b.n	8007acc <__lshift+0xa4>
 8007af6:	bf00      	nop
 8007af8:	080086e8 	.word	0x080086e8
 8007afc:	0800870a 	.word	0x0800870a

08007b00 <__mcmp>:
 8007b00:	690a      	ldr	r2, [r1, #16]
 8007b02:	4603      	mov	r3, r0
 8007b04:	6900      	ldr	r0, [r0, #16]
 8007b06:	1a80      	subs	r0, r0, r2
 8007b08:	b530      	push	{r4, r5, lr}
 8007b0a:	d10e      	bne.n	8007b2a <__mcmp+0x2a>
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	3114      	adds	r1, #20
 8007b10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b20:	4295      	cmp	r5, r2
 8007b22:	d003      	beq.n	8007b2c <__mcmp+0x2c>
 8007b24:	d205      	bcs.n	8007b32 <__mcmp+0x32>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b2a:	bd30      	pop	{r4, r5, pc}
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	d3f3      	bcc.n	8007b18 <__mcmp+0x18>
 8007b30:	e7fb      	b.n	8007b2a <__mcmp+0x2a>
 8007b32:	2001      	movs	r0, #1
 8007b34:	e7f9      	b.n	8007b2a <__mcmp+0x2a>
	...

08007b38 <__mdiff>:
 8007b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	4606      	mov	r6, r0
 8007b40:	4611      	mov	r1, r2
 8007b42:	4648      	mov	r0, r9
 8007b44:	4614      	mov	r4, r2
 8007b46:	f7ff ffdb 	bl	8007b00 <__mcmp>
 8007b4a:	1e05      	subs	r5, r0, #0
 8007b4c:	d112      	bne.n	8007b74 <__mdiff+0x3c>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff fd5b 	bl	800760c <_Balloc>
 8007b56:	4602      	mov	r2, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <__mdiff+0x2e>
 8007b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8007c58 <__mdiff+0x120>)
 8007b5c:	f240 2137 	movw	r1, #567	@ 0x237
 8007b60:	483e      	ldr	r0, [pc, #248]	@ (8007c5c <__mdiff+0x124>)
 8007b62:	f000 f9c5 	bl	8007ef0 <__assert_func>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	b003      	add	sp, #12
 8007b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b74:	bfbc      	itt	lt
 8007b76:	464b      	movlt	r3, r9
 8007b78:	46a1      	movlt	r9, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b80:	bfba      	itte	lt
 8007b82:	461c      	movlt	r4, r3
 8007b84:	2501      	movlt	r5, #1
 8007b86:	2500      	movge	r5, #0
 8007b88:	f7ff fd40 	bl	800760c <_Balloc>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	b918      	cbnz	r0, 8007b98 <__mdiff+0x60>
 8007b90:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <__mdiff+0x120>)
 8007b92:	f240 2145 	movw	r1, #581	@ 0x245
 8007b96:	e7e3      	b.n	8007b60 <__mdiff+0x28>
 8007b98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b9c:	6926      	ldr	r6, [r4, #16]
 8007b9e:	60c5      	str	r5, [r0, #12]
 8007ba0:	f109 0310 	add.w	r3, r9, #16
 8007ba4:	f109 0514 	add.w	r5, r9, #20
 8007ba8:	f104 0e14 	add.w	lr, r4, #20
 8007bac:	f100 0b14 	add.w	fp, r0, #20
 8007bb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	46d9      	mov	r9, fp
 8007bbc:	f04f 0c00 	mov.w	ip, #0
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007bc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	fa1f f38a 	uxth.w	r3, sl
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	b283      	uxth	r3, r0
 8007bd4:	1acb      	subs	r3, r1, r3
 8007bd6:	0c00      	lsrs	r0, r0, #16
 8007bd8:	4463      	add	r3, ip
 8007bda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007bde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007be8:	4576      	cmp	r6, lr
 8007bea:	f849 3b04 	str.w	r3, [r9], #4
 8007bee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bf2:	d8e5      	bhi.n	8007bc0 <__mdiff+0x88>
 8007bf4:	1b33      	subs	r3, r6, r4
 8007bf6:	3b15      	subs	r3, #21
 8007bf8:	f023 0303 	bic.w	r3, r3, #3
 8007bfc:	3415      	adds	r4, #21
 8007bfe:	3304      	adds	r3, #4
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	bf38      	it	cc
 8007c04:	2304      	movcc	r3, #4
 8007c06:	441d      	add	r5, r3
 8007c08:	445b      	add	r3, fp
 8007c0a:	461e      	mov	r6, r3
 8007c0c:	462c      	mov	r4, r5
 8007c0e:	4544      	cmp	r4, r8
 8007c10:	d30e      	bcc.n	8007c30 <__mdiff+0xf8>
 8007c12:	f108 0103 	add.w	r1, r8, #3
 8007c16:	1b49      	subs	r1, r1, r5
 8007c18:	f021 0103 	bic.w	r1, r1, #3
 8007c1c:	3d03      	subs	r5, #3
 8007c1e:	45a8      	cmp	r8, r5
 8007c20:	bf38      	it	cc
 8007c22:	2100      	movcc	r1, #0
 8007c24:	440b      	add	r3, r1
 8007c26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c2a:	b191      	cbz	r1, 8007c52 <__mdiff+0x11a>
 8007c2c:	6117      	str	r7, [r2, #16]
 8007c2e:	e79d      	b.n	8007b6c <__mdiff+0x34>
 8007c30:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c34:	46e6      	mov	lr, ip
 8007c36:	0c08      	lsrs	r0, r1, #16
 8007c38:	fa1c fc81 	uxtah	ip, ip, r1
 8007c3c:	4471      	add	r1, lr
 8007c3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c42:	b289      	uxth	r1, r1
 8007c44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c48:	f846 1b04 	str.w	r1, [r6], #4
 8007c4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c50:	e7dd      	b.n	8007c0e <__mdiff+0xd6>
 8007c52:	3f01      	subs	r7, #1
 8007c54:	e7e7      	b.n	8007c26 <__mdiff+0xee>
 8007c56:	bf00      	nop
 8007c58:	080086e8 	.word	0x080086e8
 8007c5c:	0800870a 	.word	0x0800870a

08007c60 <__d2b>:
 8007c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c64:	460f      	mov	r7, r1
 8007c66:	2101      	movs	r1, #1
 8007c68:	ec59 8b10 	vmov	r8, r9, d0
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	f7ff fccd 	bl	800760c <_Balloc>
 8007c72:	4604      	mov	r4, r0
 8007c74:	b930      	cbnz	r0, 8007c84 <__d2b+0x24>
 8007c76:	4602      	mov	r2, r0
 8007c78:	4b23      	ldr	r3, [pc, #140]	@ (8007d08 <__d2b+0xa8>)
 8007c7a:	4824      	ldr	r0, [pc, #144]	@ (8007d0c <__d2b+0xac>)
 8007c7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c80:	f000 f936 	bl	8007ef0 <__assert_func>
 8007c84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c8c:	b10d      	cbz	r5, 8007c92 <__d2b+0x32>
 8007c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f1b8 0300 	subs.w	r3, r8, #0
 8007c98:	d023      	beq.n	8007ce2 <__d2b+0x82>
 8007c9a:	4668      	mov	r0, sp
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	f7ff fd7c 	bl	800779a <__lo0bits>
 8007ca2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ca6:	b1d0      	cbz	r0, 8007cde <__d2b+0x7e>
 8007ca8:	f1c0 0320 	rsb	r3, r0, #32
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	40c2      	lsrs	r2, r0
 8007cb4:	6163      	str	r3, [r4, #20]
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	61a3      	str	r3, [r4, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2201      	moveq	r2, #1
 8007cc2:	2202      	movne	r2, #2
 8007cc4:	6122      	str	r2, [r4, #16]
 8007cc6:	b1a5      	cbz	r5, 8007cf2 <__d2b+0x92>
 8007cc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ccc:	4405      	add	r5, r0
 8007cce:	603d      	str	r5, [r7, #0]
 8007cd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007cd4:	6030      	str	r0, [r6, #0]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	b003      	add	sp, #12
 8007cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cde:	6161      	str	r1, [r4, #20]
 8007ce0:	e7ea      	b.n	8007cb8 <__d2b+0x58>
 8007ce2:	a801      	add	r0, sp, #4
 8007ce4:	f7ff fd59 	bl	800779a <__lo0bits>
 8007ce8:	9b01      	ldr	r3, [sp, #4]
 8007cea:	6163      	str	r3, [r4, #20]
 8007cec:	3020      	adds	r0, #32
 8007cee:	2201      	movs	r2, #1
 8007cf0:	e7e8      	b.n	8007cc4 <__d2b+0x64>
 8007cf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007cfa:	6038      	str	r0, [r7, #0]
 8007cfc:	6918      	ldr	r0, [r3, #16]
 8007cfe:	f7ff fd2d 	bl	800775c <__hi0bits>
 8007d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d06:	e7e5      	b.n	8007cd4 <__d2b+0x74>
 8007d08:	080086e8 	.word	0x080086e8
 8007d0c:	0800870a 	.word	0x0800870a

08007d10 <__sread>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	f000 f8a8 	bl	8007e6c <_read_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	bfab      	itete	ge
 8007d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d22:	89a3      	ldrhlt	r3, [r4, #12]
 8007d24:	181b      	addge	r3, r3, r0
 8007d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d2a:	bfac      	ite	ge
 8007d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d2e:	81a3      	strhlt	r3, [r4, #12]
 8007d30:	bd10      	pop	{r4, pc}

08007d32 <__swrite>:
 8007d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	461f      	mov	r7, r3
 8007d38:	898b      	ldrh	r3, [r1, #12]
 8007d3a:	05db      	lsls	r3, r3, #23
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4616      	mov	r6, r2
 8007d42:	d505      	bpl.n	8007d50 <__swrite+0x1e>
 8007d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d48:	2302      	movs	r3, #2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f000 f87c 	bl	8007e48 <_lseek_r>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d66:	f000 b8a3 	b.w	8007eb0 <_write_r>

08007d6a <__sseek>:
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 f869 	bl	8007e48 <_lseek_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	bf15      	itete	ne
 8007d7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d86:	81a3      	strheq	r3, [r4, #12]
 8007d88:	bf18      	it	ne
 8007d8a:	81a3      	strhne	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__sclose>:
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	f000 b849 	b.w	8007e28 <_close_r>

08007d96 <_realloc_r>:
 8007d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	4615      	mov	r5, r2
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b921      	cbnz	r1, 8007dac <_realloc_r+0x16>
 8007da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	4611      	mov	r1, r2
 8007da8:	f7ff baf8 	b.w	800739c <_malloc_r>
 8007dac:	b92a      	cbnz	r2, 8007dba <_realloc_r+0x24>
 8007dae:	f000 f8d1 	bl	8007f54 <_free_r>
 8007db2:	2400      	movs	r4, #0
 8007db4:	4620      	mov	r0, r4
 8007db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dba:	f000 f927 	bl	800800c <_malloc_usable_size_r>
 8007dbe:	4285      	cmp	r5, r0
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	d802      	bhi.n	8007dca <_realloc_r+0x34>
 8007dc4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007dc8:	d8f4      	bhi.n	8007db4 <_realloc_r+0x1e>
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4640      	mov	r0, r8
 8007dce:	f7ff fae5 	bl	800739c <_malloc_r>
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d0ec      	beq.n	8007db2 <_realloc_r+0x1c>
 8007dd8:	42b5      	cmp	r5, r6
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	bf28      	it	cs
 8007de0:	4632      	movcs	r2, r6
 8007de2:	f000 f877 	bl	8007ed4 <memcpy>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4640      	mov	r0, r8
 8007dea:	f000 f8b3 	bl	8007f54 <_free_r>
 8007dee:	463c      	mov	r4, r7
 8007df0:	e7e0      	b.n	8007db4 <_realloc_r+0x1e>

08007df2 <memmove>:
 8007df2:	4288      	cmp	r0, r1
 8007df4:	b510      	push	{r4, lr}
 8007df6:	eb01 0402 	add.w	r4, r1, r2
 8007dfa:	d902      	bls.n	8007e02 <memmove+0x10>
 8007dfc:	4284      	cmp	r4, r0
 8007dfe:	4623      	mov	r3, r4
 8007e00:	d807      	bhi.n	8007e12 <memmove+0x20>
 8007e02:	1e43      	subs	r3, r0, #1
 8007e04:	42a1      	cmp	r1, r4
 8007e06:	d008      	beq.n	8007e1a <memmove+0x28>
 8007e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e10:	e7f8      	b.n	8007e04 <memmove+0x12>
 8007e12:	4402      	add	r2, r0
 8007e14:	4601      	mov	r1, r0
 8007e16:	428a      	cmp	r2, r1
 8007e18:	d100      	bne.n	8007e1c <memmove+0x2a>
 8007e1a:	bd10      	pop	{r4, pc}
 8007e1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e24:	e7f7      	b.n	8007e16 <memmove+0x24>
	...

08007e28 <_close_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	@ (8007e44 <_close_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7f9 fcc4 	bl	80017c0 <_close>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_close_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_close_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000508 	.word	0x20000508

08007e48 <_lseek_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	@ (8007e68 <_lseek_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7f9 fcd9 	bl	800180e <_lseek>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_lseek_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_lseek_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000508 	.word	0x20000508

08007e6c <_read_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	@ (8007e8c <_read_r+0x20>)
 8007e70:	4604      	mov	r4, r0
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7f9 fc67 	bl	800174e <_read>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_read_r+0x1e>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_read_r+0x1e>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20000508 	.word	0x20000508

08007e90 <_sbrk_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d06      	ldr	r5, [pc, #24]	@ (8007eac <_sbrk_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	f7f9 fcc4 	bl	8001828 <_sbrk>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_sbrk_r+0x1a>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_sbrk_r+0x1a>
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	20000508 	.word	0x20000508

08007eb0 <_write_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	@ (8007ed0 <_write_r+0x20>)
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4611      	mov	r1, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f7f9 fc62 	bl	8001788 <_write>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_write_r+0x1e>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_write_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	20000508 	.word	0x20000508

08007ed4 <memcpy>:
 8007ed4:	440a      	add	r2, r1
 8007ed6:	4291      	cmp	r1, r2
 8007ed8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007edc:	d100      	bne.n	8007ee0 <memcpy+0xc>
 8007ede:	4770      	bx	lr
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eea:	4291      	cmp	r1, r2
 8007eec:	d1f9      	bne.n	8007ee2 <memcpy+0xe>
 8007eee:	bd10      	pop	{r4, pc}

08007ef0 <__assert_func>:
 8007ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <__assert_func+0x2c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4605      	mov	r5, r0
 8007efc:	68d8      	ldr	r0, [r3, #12]
 8007efe:	b954      	cbnz	r4, 8007f16 <__assert_func+0x26>
 8007f00:	4b07      	ldr	r3, [pc, #28]	@ (8007f20 <__assert_func+0x30>)
 8007f02:	461c      	mov	r4, r3
 8007f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f08:	9100      	str	r1, [sp, #0]
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	4905      	ldr	r1, [pc, #20]	@ (8007f24 <__assert_func+0x34>)
 8007f0e:	f000 f885 	bl	800801c <fiprintf>
 8007f12:	f000 f8a2 	bl	800805a <abort>
 8007f16:	4b04      	ldr	r3, [pc, #16]	@ (8007f28 <__assert_func+0x38>)
 8007f18:	e7f4      	b.n	8007f04 <__assert_func+0x14>
 8007f1a:	bf00      	nop
 8007f1c:	20000018 	.word	0x20000018
 8007f20:	080089a6 	.word	0x080089a6
 8007f24:	08008978 	.word	0x08008978
 8007f28:	0800896b 	.word	0x0800896b

08007f2c <_calloc_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	fba1 5402 	umull	r5, r4, r1, r2
 8007f32:	b93c      	cbnz	r4, 8007f44 <_calloc_r+0x18>
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7ff fa31 	bl	800739c <_malloc_r>
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	b928      	cbnz	r0, 8007f4a <_calloc_r+0x1e>
 8007f3e:	2600      	movs	r6, #0
 8007f40:	4630      	mov	r0, r6
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	220c      	movs	r2, #12
 8007f46:	6002      	str	r2, [r0, #0]
 8007f48:	e7f9      	b.n	8007f3e <_calloc_r+0x12>
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f7fe fa1d 	bl	800638c <memset>
 8007f52:	e7f5      	b.n	8007f40 <_calloc_r+0x14>

08007f54 <_free_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4605      	mov	r5, r0
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d041      	beq.n	8007fe0 <_free_r+0x8c>
 8007f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f60:	1f0c      	subs	r4, r1, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfb8      	it	lt
 8007f66:	18e4      	addlt	r4, r4, r3
 8007f68:	f7ff fb44 	bl	80075f4 <__malloc_lock>
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe4 <_free_r+0x90>)
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	b933      	cbnz	r3, 8007f80 <_free_r+0x2c>
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	6014      	str	r4, [r2, #0]
 8007f76:	4628      	mov	r0, r5
 8007f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7c:	f7ff bb40 	b.w	8007600 <__malloc_unlock>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d908      	bls.n	8007f96 <_free_r+0x42>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	1821      	adds	r1, r4, r0
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf01      	itttt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	1809      	addeq	r1, r1, r0
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	e7ed      	b.n	8007f72 <_free_r+0x1e>
 8007f96:	461a      	mov	r2, r3
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	b10b      	cbz	r3, 8007fa0 <_free_r+0x4c>
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d9fa      	bls.n	8007f96 <_free_r+0x42>
 8007fa0:	6811      	ldr	r1, [r2, #0]
 8007fa2:	1850      	adds	r0, r2, r1
 8007fa4:	42a0      	cmp	r0, r4
 8007fa6:	d10b      	bne.n	8007fc0 <_free_r+0x6c>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	4401      	add	r1, r0
 8007fac:	1850      	adds	r0, r2, r1
 8007fae:	4283      	cmp	r3, r0
 8007fb0:	6011      	str	r1, [r2, #0]
 8007fb2:	d1e0      	bne.n	8007f76 <_free_r+0x22>
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	6053      	str	r3, [r2, #4]
 8007fba:	4408      	add	r0, r1
 8007fbc:	6010      	str	r0, [r2, #0]
 8007fbe:	e7da      	b.n	8007f76 <_free_r+0x22>
 8007fc0:	d902      	bls.n	8007fc8 <_free_r+0x74>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	e7d6      	b.n	8007f76 <_free_r+0x22>
 8007fc8:	6820      	ldr	r0, [r4, #0]
 8007fca:	1821      	adds	r1, r4, r0
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf04      	itt	eq
 8007fd0:	6819      	ldreq	r1, [r3, #0]
 8007fd2:	685b      	ldreq	r3, [r3, #4]
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	bf04      	itt	eq
 8007fd8:	1809      	addeq	r1, r1, r0
 8007fda:	6021      	streq	r1, [r4, #0]
 8007fdc:	6054      	str	r4, [r2, #4]
 8007fde:	e7ca      	b.n	8007f76 <_free_r+0x22>
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000504 	.word	0x20000504

08007fe8 <__ascii_mbtowc>:
 8007fe8:	b082      	sub	sp, #8
 8007fea:	b901      	cbnz	r1, 8007fee <__ascii_mbtowc+0x6>
 8007fec:	a901      	add	r1, sp, #4
 8007fee:	b142      	cbz	r2, 8008002 <__ascii_mbtowc+0x1a>
 8007ff0:	b14b      	cbz	r3, 8008006 <__ascii_mbtowc+0x1e>
 8007ff2:	7813      	ldrb	r3, [r2, #0]
 8007ff4:	600b      	str	r3, [r1, #0]
 8007ff6:	7812      	ldrb	r2, [r2, #0]
 8007ff8:	1e10      	subs	r0, r2, #0
 8007ffa:	bf18      	it	ne
 8007ffc:	2001      	movne	r0, #1
 8007ffe:	b002      	add	sp, #8
 8008000:	4770      	bx	lr
 8008002:	4610      	mov	r0, r2
 8008004:	e7fb      	b.n	8007ffe <__ascii_mbtowc+0x16>
 8008006:	f06f 0001 	mvn.w	r0, #1
 800800a:	e7f8      	b.n	8007ffe <__ascii_mbtowc+0x16>

0800800c <_malloc_usable_size_r>:
 800800c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008010:	1f18      	subs	r0, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfbc      	itt	lt
 8008016:	580b      	ldrlt	r3, [r1, r0]
 8008018:	18c0      	addlt	r0, r0, r3
 800801a:	4770      	bx	lr

0800801c <fiprintf>:
 800801c:	b40e      	push	{r1, r2, r3}
 800801e:	b503      	push	{r0, r1, lr}
 8008020:	4601      	mov	r1, r0
 8008022:	ab03      	add	r3, sp, #12
 8008024:	4805      	ldr	r0, [pc, #20]	@ (800803c <fiprintf+0x20>)
 8008026:	f853 2b04 	ldr.w	r2, [r3], #4
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	f000 f845 	bl	80080bc <_vfiprintf_r>
 8008032:	b002      	add	sp, #8
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	20000018 	.word	0x20000018

08008040 <__ascii_wctomb>:
 8008040:	4603      	mov	r3, r0
 8008042:	4608      	mov	r0, r1
 8008044:	b141      	cbz	r1, 8008058 <__ascii_wctomb+0x18>
 8008046:	2aff      	cmp	r2, #255	@ 0xff
 8008048:	d904      	bls.n	8008054 <__ascii_wctomb+0x14>
 800804a:	228a      	movs	r2, #138	@ 0x8a
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008052:	4770      	bx	lr
 8008054:	700a      	strb	r2, [r1, #0]
 8008056:	2001      	movs	r0, #1
 8008058:	4770      	bx	lr

0800805a <abort>:
 800805a:	b508      	push	{r3, lr}
 800805c:	2006      	movs	r0, #6
 800805e:	f000 fa85 	bl	800856c <raise>
 8008062:	2001      	movs	r0, #1
 8008064:	f7f9 fb68 	bl	8001738 <_exit>

08008068 <__sfputc_r>:
 8008068:	6893      	ldr	r3, [r2, #8]
 800806a:	3b01      	subs	r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	b410      	push	{r4}
 8008070:	6093      	str	r3, [r2, #8]
 8008072:	da08      	bge.n	8008086 <__sfputc_r+0x1e>
 8008074:	6994      	ldr	r4, [r2, #24]
 8008076:	42a3      	cmp	r3, r4
 8008078:	db01      	blt.n	800807e <__sfputc_r+0x16>
 800807a:	290a      	cmp	r1, #10
 800807c:	d103      	bne.n	8008086 <__sfputc_r+0x1e>
 800807e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008082:	f000 b933 	b.w	80082ec <__swbuf_r>
 8008086:	6813      	ldr	r3, [r2, #0]
 8008088:	1c58      	adds	r0, r3, #1
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	7019      	strb	r1, [r3, #0]
 800808e:	4608      	mov	r0, r1
 8008090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008094:	4770      	bx	lr

08008096 <__sfputs_r>:
 8008096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008098:	4606      	mov	r6, r0
 800809a:	460f      	mov	r7, r1
 800809c:	4614      	mov	r4, r2
 800809e:	18d5      	adds	r5, r2, r3
 80080a0:	42ac      	cmp	r4, r5
 80080a2:	d101      	bne.n	80080a8 <__sfputs_r+0x12>
 80080a4:	2000      	movs	r0, #0
 80080a6:	e007      	b.n	80080b8 <__sfputs_r+0x22>
 80080a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ac:	463a      	mov	r2, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff ffda 	bl	8008068 <__sfputc_r>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d1f3      	bne.n	80080a0 <__sfputs_r+0xa>
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080bc <_vfiprintf_r>:
 80080bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c0:	460d      	mov	r5, r1
 80080c2:	b09d      	sub	sp, #116	@ 0x74
 80080c4:	4614      	mov	r4, r2
 80080c6:	4698      	mov	r8, r3
 80080c8:	4606      	mov	r6, r0
 80080ca:	b118      	cbz	r0, 80080d4 <_vfiprintf_r+0x18>
 80080cc:	6a03      	ldr	r3, [r0, #32]
 80080ce:	b90b      	cbnz	r3, 80080d4 <_vfiprintf_r+0x18>
 80080d0:	f7fe f8ec 	bl	80062ac <__sinit>
 80080d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	d405      	bmi.n	80080e6 <_vfiprintf_r+0x2a>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	059a      	lsls	r2, r3, #22
 80080de:	d402      	bmi.n	80080e6 <_vfiprintf_r+0x2a>
 80080e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080e2:	f7fe f98a 	bl	80063fa <__retarget_lock_acquire_recursive>
 80080e6:	89ab      	ldrh	r3, [r5, #12]
 80080e8:	071b      	lsls	r3, r3, #28
 80080ea:	d501      	bpl.n	80080f0 <_vfiprintf_r+0x34>
 80080ec:	692b      	ldr	r3, [r5, #16]
 80080ee:	b99b      	cbnz	r3, 8008118 <_vfiprintf_r+0x5c>
 80080f0:	4629      	mov	r1, r5
 80080f2:	4630      	mov	r0, r6
 80080f4:	f000 f938 	bl	8008368 <__swsetup_r>
 80080f8:	b170      	cbz	r0, 8008118 <_vfiprintf_r+0x5c>
 80080fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080fc:	07dc      	lsls	r4, r3, #31
 80080fe:	d504      	bpl.n	800810a <_vfiprintf_r+0x4e>
 8008100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008104:	b01d      	add	sp, #116	@ 0x74
 8008106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	0598      	lsls	r0, r3, #22
 800810e:	d4f7      	bmi.n	8008100 <_vfiprintf_r+0x44>
 8008110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008112:	f7fe f973 	bl	80063fc <__retarget_lock_release_recursive>
 8008116:	e7f3      	b.n	8008100 <_vfiprintf_r+0x44>
 8008118:	2300      	movs	r3, #0
 800811a:	9309      	str	r3, [sp, #36]	@ 0x24
 800811c:	2320      	movs	r3, #32
 800811e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008122:	f8cd 800c 	str.w	r8, [sp, #12]
 8008126:	2330      	movs	r3, #48	@ 0x30
 8008128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082d8 <_vfiprintf_r+0x21c>
 800812c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008130:	f04f 0901 	mov.w	r9, #1
 8008134:	4623      	mov	r3, r4
 8008136:	469a      	mov	sl, r3
 8008138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813c:	b10a      	cbz	r2, 8008142 <_vfiprintf_r+0x86>
 800813e:	2a25      	cmp	r2, #37	@ 0x25
 8008140:	d1f9      	bne.n	8008136 <_vfiprintf_r+0x7a>
 8008142:	ebba 0b04 	subs.w	fp, sl, r4
 8008146:	d00b      	beq.n	8008160 <_vfiprintf_r+0xa4>
 8008148:	465b      	mov	r3, fp
 800814a:	4622      	mov	r2, r4
 800814c:	4629      	mov	r1, r5
 800814e:	4630      	mov	r0, r6
 8008150:	f7ff ffa1 	bl	8008096 <__sfputs_r>
 8008154:	3001      	adds	r0, #1
 8008156:	f000 80a7 	beq.w	80082a8 <_vfiprintf_r+0x1ec>
 800815a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800815c:	445a      	add	r2, fp
 800815e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008160:	f89a 3000 	ldrb.w	r3, [sl]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 809f 	beq.w	80082a8 <_vfiprintf_r+0x1ec>
 800816a:	2300      	movs	r3, #0
 800816c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008174:	f10a 0a01 	add.w	sl, sl, #1
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008180:	931a      	str	r3, [sp, #104]	@ 0x68
 8008182:	4654      	mov	r4, sl
 8008184:	2205      	movs	r2, #5
 8008186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818a:	4853      	ldr	r0, [pc, #332]	@ (80082d8 <_vfiprintf_r+0x21c>)
 800818c:	f7f8 f828 	bl	80001e0 <memchr>
 8008190:	9a04      	ldr	r2, [sp, #16]
 8008192:	b9d8      	cbnz	r0, 80081cc <_vfiprintf_r+0x110>
 8008194:	06d1      	lsls	r1, r2, #27
 8008196:	bf44      	itt	mi
 8008198:	2320      	movmi	r3, #32
 800819a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800819e:	0713      	lsls	r3, r2, #28
 80081a0:	bf44      	itt	mi
 80081a2:	232b      	movmi	r3, #43	@ 0x2b
 80081a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a8:	f89a 3000 	ldrb.w	r3, [sl]
 80081ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ae:	d015      	beq.n	80081dc <_vfiprintf_r+0x120>
 80081b0:	9a07      	ldr	r2, [sp, #28]
 80081b2:	4654      	mov	r4, sl
 80081b4:	2000      	movs	r0, #0
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4621      	mov	r1, r4
 80081bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c0:	3b30      	subs	r3, #48	@ 0x30
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	d94b      	bls.n	800825e <_vfiprintf_r+0x1a2>
 80081c6:	b1b0      	cbz	r0, 80081f6 <_vfiprintf_r+0x13a>
 80081c8:	9207      	str	r2, [sp, #28]
 80081ca:	e014      	b.n	80081f6 <_vfiprintf_r+0x13a>
 80081cc:	eba0 0308 	sub.w	r3, r0, r8
 80081d0:	fa09 f303 	lsl.w	r3, r9, r3
 80081d4:	4313      	orrs	r3, r2
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	46a2      	mov	sl, r4
 80081da:	e7d2      	b.n	8008182 <_vfiprintf_r+0xc6>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	1d19      	adds	r1, r3, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	9103      	str	r1, [sp, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfbb      	ittet	lt
 80081e8:	425b      	neglt	r3, r3
 80081ea:	f042 0202 	orrlt.w	r2, r2, #2
 80081ee:	9307      	strge	r3, [sp, #28]
 80081f0:	9307      	strlt	r3, [sp, #28]
 80081f2:	bfb8      	it	lt
 80081f4:	9204      	strlt	r2, [sp, #16]
 80081f6:	7823      	ldrb	r3, [r4, #0]
 80081f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081fa:	d10a      	bne.n	8008212 <_vfiprintf_r+0x156>
 80081fc:	7863      	ldrb	r3, [r4, #1]
 80081fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008200:	d132      	bne.n	8008268 <_vfiprintf_r+0x1ac>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	1d1a      	adds	r2, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9203      	str	r2, [sp, #12]
 800820a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800820e:	3402      	adds	r4, #2
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082e8 <_vfiprintf_r+0x22c>
 8008216:	7821      	ldrb	r1, [r4, #0]
 8008218:	2203      	movs	r2, #3
 800821a:	4650      	mov	r0, sl
 800821c:	f7f7 ffe0 	bl	80001e0 <memchr>
 8008220:	b138      	cbz	r0, 8008232 <_vfiprintf_r+0x176>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	eba0 000a 	sub.w	r0, r0, sl
 8008228:	2240      	movs	r2, #64	@ 0x40
 800822a:	4082      	lsls	r2, r0
 800822c:	4313      	orrs	r3, r2
 800822e:	3401      	adds	r4, #1
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008236:	4829      	ldr	r0, [pc, #164]	@ (80082dc <_vfiprintf_r+0x220>)
 8008238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800823c:	2206      	movs	r2, #6
 800823e:	f7f7 ffcf 	bl	80001e0 <memchr>
 8008242:	2800      	cmp	r0, #0
 8008244:	d03f      	beq.n	80082c6 <_vfiprintf_r+0x20a>
 8008246:	4b26      	ldr	r3, [pc, #152]	@ (80082e0 <_vfiprintf_r+0x224>)
 8008248:	bb1b      	cbnz	r3, 8008292 <_vfiprintf_r+0x1d6>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	3307      	adds	r3, #7
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	3308      	adds	r3, #8
 8008254:	9303      	str	r3, [sp, #12]
 8008256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008258:	443b      	add	r3, r7
 800825a:	9309      	str	r3, [sp, #36]	@ 0x24
 800825c:	e76a      	b.n	8008134 <_vfiprintf_r+0x78>
 800825e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008262:	460c      	mov	r4, r1
 8008264:	2001      	movs	r0, #1
 8008266:	e7a8      	b.n	80081ba <_vfiprintf_r+0xfe>
 8008268:	2300      	movs	r3, #0
 800826a:	3401      	adds	r4, #1
 800826c:	9305      	str	r3, [sp, #20]
 800826e:	4619      	mov	r1, r3
 8008270:	f04f 0c0a 	mov.w	ip, #10
 8008274:	4620      	mov	r0, r4
 8008276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827a:	3a30      	subs	r2, #48	@ 0x30
 800827c:	2a09      	cmp	r2, #9
 800827e:	d903      	bls.n	8008288 <_vfiprintf_r+0x1cc>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0c6      	beq.n	8008212 <_vfiprintf_r+0x156>
 8008284:	9105      	str	r1, [sp, #20]
 8008286:	e7c4      	b.n	8008212 <_vfiprintf_r+0x156>
 8008288:	fb0c 2101 	mla	r1, ip, r1, r2
 800828c:	4604      	mov	r4, r0
 800828e:	2301      	movs	r3, #1
 8008290:	e7f0      	b.n	8008274 <_vfiprintf_r+0x1b8>
 8008292:	ab03      	add	r3, sp, #12
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	462a      	mov	r2, r5
 8008298:	4b12      	ldr	r3, [pc, #72]	@ (80082e4 <_vfiprintf_r+0x228>)
 800829a:	a904      	add	r1, sp, #16
 800829c:	4630      	mov	r0, r6
 800829e:	f7fd fbc1 	bl	8005a24 <_printf_float>
 80082a2:	4607      	mov	r7, r0
 80082a4:	1c78      	adds	r0, r7, #1
 80082a6:	d1d6      	bne.n	8008256 <_vfiprintf_r+0x19a>
 80082a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_vfiprintf_r+0x1fe>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_vfiprintf_r+0x1fe>
 80082b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082b6:	f7fe f8a1 	bl	80063fc <__retarget_lock_release_recursive>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	065b      	lsls	r3, r3, #25
 80082be:	f53f af1f 	bmi.w	8008100 <_vfiprintf_r+0x44>
 80082c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c4:	e71e      	b.n	8008104 <_vfiprintf_r+0x48>
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	462a      	mov	r2, r5
 80082cc:	4b05      	ldr	r3, [pc, #20]	@ (80082e4 <_vfiprintf_r+0x228>)
 80082ce:	a904      	add	r1, sp, #16
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7fd fe3f 	bl	8005f54 <_printf_i>
 80082d6:	e7e4      	b.n	80082a2 <_vfiprintf_r+0x1e6>
 80082d8:	080086f9 	.word	0x080086f9
 80082dc:	08008703 	.word	0x08008703
 80082e0:	08005a25 	.word	0x08005a25
 80082e4:	08008097 	.word	0x08008097
 80082e8:	080086ff 	.word	0x080086ff

080082ec <__swbuf_r>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	460e      	mov	r6, r1
 80082f0:	4614      	mov	r4, r2
 80082f2:	4605      	mov	r5, r0
 80082f4:	b118      	cbz	r0, 80082fe <__swbuf_r+0x12>
 80082f6:	6a03      	ldr	r3, [r0, #32]
 80082f8:	b90b      	cbnz	r3, 80082fe <__swbuf_r+0x12>
 80082fa:	f7fd ffd7 	bl	80062ac <__sinit>
 80082fe:	69a3      	ldr	r3, [r4, #24]
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	071a      	lsls	r2, r3, #28
 8008306:	d501      	bpl.n	800830c <__swbuf_r+0x20>
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	b943      	cbnz	r3, 800831e <__swbuf_r+0x32>
 800830c:	4621      	mov	r1, r4
 800830e:	4628      	mov	r0, r5
 8008310:	f000 f82a 	bl	8008368 <__swsetup_r>
 8008314:	b118      	cbz	r0, 800831e <__swbuf_r+0x32>
 8008316:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800831a:	4638      	mov	r0, r7
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	1a98      	subs	r0, r3, r2
 8008324:	6963      	ldr	r3, [r4, #20]
 8008326:	b2f6      	uxtb	r6, r6
 8008328:	4283      	cmp	r3, r0
 800832a:	4637      	mov	r7, r6
 800832c:	dc05      	bgt.n	800833a <__swbuf_r+0x4e>
 800832e:	4621      	mov	r1, r4
 8008330:	4628      	mov	r0, r5
 8008332:	f7ff f937 	bl	80075a4 <_fflush_r>
 8008336:	2800      	cmp	r0, #0
 8008338:	d1ed      	bne.n	8008316 <__swbuf_r+0x2a>
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	3b01      	subs	r3, #1
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	6022      	str	r2, [r4, #0]
 8008346:	701e      	strb	r6, [r3, #0]
 8008348:	6962      	ldr	r2, [r4, #20]
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	429a      	cmp	r2, r3
 800834e:	d004      	beq.n	800835a <__swbuf_r+0x6e>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d5e1      	bpl.n	800831a <__swbuf_r+0x2e>
 8008356:	2e0a      	cmp	r6, #10
 8008358:	d1df      	bne.n	800831a <__swbuf_r+0x2e>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f7ff f921 	bl	80075a4 <_fflush_r>
 8008362:	2800      	cmp	r0, #0
 8008364:	d0d9      	beq.n	800831a <__swbuf_r+0x2e>
 8008366:	e7d6      	b.n	8008316 <__swbuf_r+0x2a>

08008368 <__swsetup_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4b29      	ldr	r3, [pc, #164]	@ (8008410 <__swsetup_r+0xa8>)
 800836c:	4605      	mov	r5, r0
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	460c      	mov	r4, r1
 8008372:	b118      	cbz	r0, 800837c <__swsetup_r+0x14>
 8008374:	6a03      	ldr	r3, [r0, #32]
 8008376:	b90b      	cbnz	r3, 800837c <__swsetup_r+0x14>
 8008378:	f7fd ff98 	bl	80062ac <__sinit>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	0719      	lsls	r1, r3, #28
 8008382:	d422      	bmi.n	80083ca <__swsetup_r+0x62>
 8008384:	06da      	lsls	r2, r3, #27
 8008386:	d407      	bmi.n	8008398 <__swsetup_r+0x30>
 8008388:	2209      	movs	r2, #9
 800838a:	602a      	str	r2, [r5, #0]
 800838c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008396:	e033      	b.n	8008400 <__swsetup_r+0x98>
 8008398:	0758      	lsls	r0, r3, #29
 800839a:	d512      	bpl.n	80083c2 <__swsetup_r+0x5a>
 800839c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800839e:	b141      	cbz	r1, 80083b2 <__swsetup_r+0x4a>
 80083a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a4:	4299      	cmp	r1, r3
 80083a6:	d002      	beq.n	80083ae <__swsetup_r+0x46>
 80083a8:	4628      	mov	r0, r5
 80083aa:	f7ff fdd3 	bl	8007f54 <_free_r>
 80083ae:	2300      	movs	r3, #0
 80083b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	2300      	movs	r3, #0
 80083bc:	6063      	str	r3, [r4, #4]
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f043 0308 	orr.w	r3, r3, #8
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	6923      	ldr	r3, [r4, #16]
 80083cc:	b94b      	cbnz	r3, 80083e2 <__swsetup_r+0x7a>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d8:	d003      	beq.n	80083e2 <__swsetup_r+0x7a>
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 f83f 	bl	8008460 <__smakebuf_r>
 80083e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e6:	f013 0201 	ands.w	r2, r3, #1
 80083ea:	d00a      	beq.n	8008402 <__swsetup_r+0x9a>
 80083ec:	2200      	movs	r2, #0
 80083ee:	60a2      	str	r2, [r4, #8]
 80083f0:	6962      	ldr	r2, [r4, #20]
 80083f2:	4252      	negs	r2, r2
 80083f4:	61a2      	str	r2, [r4, #24]
 80083f6:	6922      	ldr	r2, [r4, #16]
 80083f8:	b942      	cbnz	r2, 800840c <__swsetup_r+0xa4>
 80083fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083fe:	d1c5      	bne.n	800838c <__swsetup_r+0x24>
 8008400:	bd38      	pop	{r3, r4, r5, pc}
 8008402:	0799      	lsls	r1, r3, #30
 8008404:	bf58      	it	pl
 8008406:	6962      	ldrpl	r2, [r4, #20]
 8008408:	60a2      	str	r2, [r4, #8]
 800840a:	e7f4      	b.n	80083f6 <__swsetup_r+0x8e>
 800840c:	2000      	movs	r0, #0
 800840e:	e7f7      	b.n	8008400 <__swsetup_r+0x98>
 8008410:	20000018 	.word	0x20000018

08008414 <__swhatbuf_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	460c      	mov	r4, r1
 8008418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841c:	2900      	cmp	r1, #0
 800841e:	b096      	sub	sp, #88	@ 0x58
 8008420:	4615      	mov	r5, r2
 8008422:	461e      	mov	r6, r3
 8008424:	da0d      	bge.n	8008442 <__swhatbuf_r+0x2e>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	bf14      	ite	ne
 8008432:	2340      	movne	r3, #64	@ 0x40
 8008434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008438:	2000      	movs	r0, #0
 800843a:	6031      	str	r1, [r6, #0]
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	b016      	add	sp, #88	@ 0x58
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	466a      	mov	r2, sp
 8008444:	f000 f848 	bl	80084d8 <_fstat_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	dbec      	blt.n	8008426 <__swhatbuf_r+0x12>
 800844c:	9901      	ldr	r1, [sp, #4]
 800844e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008456:	4259      	negs	r1, r3
 8008458:	4159      	adcs	r1, r3
 800845a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800845e:	e7eb      	b.n	8008438 <__swhatbuf_r+0x24>

08008460 <__smakebuf_r>:
 8008460:	898b      	ldrh	r3, [r1, #12]
 8008462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008464:	079d      	lsls	r5, r3, #30
 8008466:	4606      	mov	r6, r0
 8008468:	460c      	mov	r4, r1
 800846a:	d507      	bpl.n	800847c <__smakebuf_r+0x1c>
 800846c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	2301      	movs	r3, #1
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	b003      	add	sp, #12
 800847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847c:	ab01      	add	r3, sp, #4
 800847e:	466a      	mov	r2, sp
 8008480:	f7ff ffc8 	bl	8008414 <__swhatbuf_r>
 8008484:	9f00      	ldr	r7, [sp, #0]
 8008486:	4605      	mov	r5, r0
 8008488:	4639      	mov	r1, r7
 800848a:	4630      	mov	r0, r6
 800848c:	f7fe ff86 	bl	800739c <_malloc_r>
 8008490:	b948      	cbnz	r0, 80084a6 <__smakebuf_r+0x46>
 8008492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008496:	059a      	lsls	r2, r3, #22
 8008498:	d4ee      	bmi.n	8008478 <__smakebuf_r+0x18>
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	e7e2      	b.n	800846c <__smakebuf_r+0xc>
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	6020      	str	r0, [r4, #0]
 80084aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b6:	b15b      	cbz	r3, 80084d0 <__smakebuf_r+0x70>
 80084b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 f81d 	bl	80084fc <_isatty_r>
 80084c2:	b128      	cbz	r0, 80084d0 <__smakebuf_r+0x70>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	431d      	orrs	r5, r3
 80084d4:	81a5      	strh	r5, [r4, #12]
 80084d6:	e7cf      	b.n	8008478 <__smakebuf_r+0x18>

080084d8 <_fstat_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	@ (80084f8 <_fstat_r+0x20>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f7f9 f977 	bl	80017d8 <_fstat>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d102      	bne.n	80084f4 <_fstat_r+0x1c>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	b103      	cbz	r3, 80084f4 <_fstat_r+0x1c>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	20000508 	.word	0x20000508

080084fc <_isatty_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d06      	ldr	r5, [pc, #24]	@ (8008518 <_isatty_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	f7f9 f976 	bl	80017f8 <_isatty>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_isatty_r+0x1a>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_isatty_r+0x1a>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20000508 	.word	0x20000508

0800851c <_raise_r>:
 800851c:	291f      	cmp	r1, #31
 800851e:	b538      	push	{r3, r4, r5, lr}
 8008520:	4605      	mov	r5, r0
 8008522:	460c      	mov	r4, r1
 8008524:	d904      	bls.n	8008530 <_raise_r+0x14>
 8008526:	2316      	movs	r3, #22
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008532:	b112      	cbz	r2, 800853a <_raise_r+0x1e>
 8008534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008538:	b94b      	cbnz	r3, 800854e <_raise_r+0x32>
 800853a:	4628      	mov	r0, r5
 800853c:	f000 f830 	bl	80085a0 <_getpid_r>
 8008540:	4622      	mov	r2, r4
 8008542:	4601      	mov	r1, r0
 8008544:	4628      	mov	r0, r5
 8008546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800854a:	f000 b817 	b.w	800857c <_kill_r>
 800854e:	2b01      	cmp	r3, #1
 8008550:	d00a      	beq.n	8008568 <_raise_r+0x4c>
 8008552:	1c59      	adds	r1, r3, #1
 8008554:	d103      	bne.n	800855e <_raise_r+0x42>
 8008556:	2316      	movs	r3, #22
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	2001      	movs	r0, #1
 800855c:	e7e7      	b.n	800852e <_raise_r+0x12>
 800855e:	2100      	movs	r1, #0
 8008560:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008564:	4620      	mov	r0, r4
 8008566:	4798      	blx	r3
 8008568:	2000      	movs	r0, #0
 800856a:	e7e0      	b.n	800852e <_raise_r+0x12>

0800856c <raise>:
 800856c:	4b02      	ldr	r3, [pc, #8]	@ (8008578 <raise+0xc>)
 800856e:	4601      	mov	r1, r0
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f7ff bfd3 	b.w	800851c <_raise_r>
 8008576:	bf00      	nop
 8008578:	20000018 	.word	0x20000018

0800857c <_kill_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	@ (800859c <_kill_r+0x20>)
 8008580:	2300      	movs	r3, #0
 8008582:	4604      	mov	r4, r0
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	f7f9 f8c5 	bl	8001718 <_kill>
 800858e:	1c43      	adds	r3, r0, #1
 8008590:	d102      	bne.n	8008598 <_kill_r+0x1c>
 8008592:	682b      	ldr	r3, [r5, #0]
 8008594:	b103      	cbz	r3, 8008598 <_kill_r+0x1c>
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	bd38      	pop	{r3, r4, r5, pc}
 800859a:	bf00      	nop
 800859c:	20000508 	.word	0x20000508

080085a0 <_getpid_r>:
 80085a0:	f7f9 b8b2 	b.w	8001708 <_getpid>

080085a4 <_init>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr

080085b0 <_fini>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr
