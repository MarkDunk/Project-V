
Proj-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000764c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080077f0  080077f0  000087f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be8  08007be8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007be8  08007be8  00008be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf0  08007bf0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007bf8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000264  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa9a  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b7  00000000  00000000  00018c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0001b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a79  00000000  00000000  0001bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002250d  00000000  00000000  0001ca59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123be  00000000  00000000  0003ef66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5e9  00000000  00000000  00051324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d90d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000488c  00000000  00000000  0011d950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001221dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077d4 	.word	0x080077d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080077d4 	.word	0x080077d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Encoder_Init>:

/**
 * @brief Initialize encoders for left (PA0) and right (PA1) wheels.
 * @return None
 */
void Encoder_Init(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    // Enable clock for GPIO port A
    ENABLE_GPIO_CLOCK(A);
 8000cec:	4b5e      	ldr	r3, [pc, #376]	@ (8000e68 <Encoder_Init+0x180>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8000e68 <Encoder_Init+0x180>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf6:	6153      	str	r3, [r2, #20]
    
    // Configure PA0 and PA1 as alternate function mode for encoders
    GPIO_MODER_SET(A, 0, GPIO_MODE_AF);
 8000cf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	6013      	str	r3, [r2, #0]
    GPIO_MODER_SET(A, 1, GPIO_MODE_AF);
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 030c 	bic.w	r3, r3, #12
 8000d16:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6013      	str	r3, [r2, #0]
    GPIO_PUPDR_SET(A, 0, GPIO_PUPD_NO);
 8000d20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	60d3      	str	r3, [r2, #12]
    GPIO_PUPDR_SET(A, 1, GPIO_PUPD_NO);
 8000d30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d3a:	f023 030c 	bic.w	r3, r3, #12
 8000d3e:	60d3      	str	r3, [r2, #12]
    GPIO_AFR_SET(A, 0, 1); // PA0 set to TIM2 CH1
 8000d40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	f023 030f 	bic.w	r3, r3, #15
 8000d4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6213      	str	r3, [r2, #32]
    GPIO_AFR_SET(A, 1, 1); // PA1 set to TIM2 CH2
 8000d54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d5e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6213      	str	r3, [r2, #32]
    
    // Enable clock for TIM2
    SET_BITS(RCC->APB1ENR, RCC_APB1ENR_TIM2EN);
 8000d68:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <Encoder_Init+0x180>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <Encoder_Init+0x180>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	61d3      	str	r3, [r2, #28]
    SET_BITS(TIM2->PSC, 71UL); // Prescaler set to count in 1us intervals
 8000d74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 8000d82:	6293      	str	r3, [r2, #40]	@ 0x28
    CLEAR_BITS(TIM2->CR1, TIM_CR1_DIR); // Set timer to upcounting mode
 8000d84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8e:	f023 0310 	bic.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
    
    // Configure TIM2 CH1 for left wheel input capture
    SET_BITS(TIM2->CCMR1, TIM_CCMR1_CC1S_0); // Set CH1 to input capture mode
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6193      	str	r3, [r2, #24]
    SET_BITS(TIM2->CCER, TIM_CCER_CC1E); // Enable input capture for CH1
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCER, TIM_CCER_CC1P | TIM_CCER_CC1NP); // Detect rising edges
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dbe:	f023 030a 	bic.w	r3, r3, #10
 8000dc2:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCR1, TIM_CCR1_CCR1); // Clear any old data in CCR1
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dce:	0c1b      	lsrs	r3, r3, #16
 8000dd0:	041b      	lsls	r3, r3, #16
 8000dd2:	6353      	str	r3, [r2, #52]	@ 0x34
    
    // Configure TIM2 CH2 for right wheel input capture
    SET_BITS(TIM2->CCMR1, TIM_CCMR1_CC2S_0); // Set CH2 to input capture mode
 8000dd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6193      	str	r3, [r2, #24]
    SET_BITS(TIM2->CCER, TIM_CCER_CC2E); // Enable input capture for CH2
 8000de4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCER, TIM_CCER_CC2P | TIM_CCER_CC2NP); // Detect rising edges
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000e02:	6213      	str	r3, [r2, #32]
    CLEAR_BITS(TIM2->CCR2, TIM_CCR2_CCR2); // Clear any old data in CCR2
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e0e:	0c1b      	lsrs	r3, r3, #16
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	6393      	str	r3, [r2, #56]	@ 0x38
    
    // Enable interrupts for CH1 and CH2, and set priority in NVIC
    SET_BITS(TIM2->DIER, TIM_DIER_CC1IE); // Enable CH1 interrupt
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	60d3      	str	r3, [r2, #12]
    SET_BITS(TIM2->DIER, TIM_DIER_CC2IE); // Enable CH2 interrupt
 8000e24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn); // Enable TIM2 IRQ in NVIC
 8000e34:	201c      	movs	r0, #28
 8000e36:	f7ff ff0f 	bl	8000c58 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, ENCODER_PRIORITY); // Set IRQ priority
 8000e3a:	2109      	movs	r1, #9
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriority>
    
    // Start TIM2 and initialize input captures
    SET_BITS(TIM2->EGR, TIM_EGR_UG); // Trigger update event
 8000e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6153      	str	r3, [r2, #20]
    SET_BITS(TIM2->CR1, TIM_CR1_CEN); // Start TIM2
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief TIM2 interrupt handler for left and right wheel encoders.
 * @return None
 */
//void TIM2_IRQHandler(void) {
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    // Handle left wheel encoder interrupt

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7f1b      	ldrb	r3, [r3, #28]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_TIM_IC_CaptureCallback+0x22>
	leftEncoder[1] = leftEncoder[0];
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000e82:	6053      	str	r3, [r2, #4]
	leftEncoder[0] = TIM2->CCR1;
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000e8c:	6013      	str	r3, [r2, #0]
//        leftEncoder[1] = leftEncoder[0]; // Update previous timestamp
//        leftEncoder[0] = TIM2->CCR1; // Capture current timestamp
//    }
    
    // Handle right wheel encoder interrupt
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7f1b      	ldrb	r3, [r3, #28]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d108      	bne.n	8000ea8 <HAL_TIM_IC_CaptureCallback+0x3c>
        rightEncoder[1] = rightEncoder[0]; // Update previous timestamp
 8000e96:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000e9c:	6053      	str	r3, [r2, #4]
        rightEncoder[0] = TIM2->CCR2; // Capture current timestamp
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ea6:	6013      	str	r3, [r2, #0]
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000200 	.word	0x20000200
 8000eb8:	20000208 	.word	0x20000208

08000ebc <Calculate_Encoder_TimePeriod>:

/**
 * @brief Calculate the time period for each encoder in microseconds per vane.
 * @return None
 */
uint32_t* Calculate_Encoder_TimePeriod(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    // Calculate left encoder period and update global variable
    Global_LeftEncoderPeriod = leftEncoder[0] - leftEncoder[1];
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <Calculate_Encoder_TimePeriod+0x58>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <Calculate_Encoder_TimePeriod+0x58>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <Calculate_Encoder_TimePeriod+0x5c>)
 8000ecc:	6013      	str	r3, [r2, #0]
    leftEncoder[1] = leftEncoder[0] = 0; // Reset timestamps
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <Calculate_Encoder_TimePeriod+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <Calculate_Encoder_TimePeriod+0x58>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <Calculate_Encoder_TimePeriod+0x58>)
 8000eda:	6053      	str	r3, [r2, #4]
    
    // Calculate right encoder period and update global variable
    Global_RightEncoderPeriod = rightEncoder[0] - rightEncoder[1];
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <Calculate_Encoder_TimePeriod+0x60>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <Calculate_Encoder_TimePeriod+0x60>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <Calculate_Encoder_TimePeriod+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]
    rightEncoder[1] = rightEncoder[0] = 0; // Reset timestamps
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <Calculate_Encoder_TimePeriod+0x60>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <Calculate_Encoder_TimePeriod+0x60>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a09      	ldr	r2, [pc, #36]	@ (8000f1c <Calculate_Encoder_TimePeriod+0x60>)
 8000ef6:	6053      	str	r3, [r2, #4]

    pair[0] = Global_LeftEncoderPeriod;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <Calculate_Encoder_TimePeriod+0x5c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <Calculate_Encoder_TimePeriod+0x68>)
 8000efe:	6013      	str	r3, [r2, #0]
    pair[1] = Global_RightEncoderPeriod;
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <Calculate_Encoder_TimePeriod+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <Calculate_Encoder_TimePeriod+0x68>)
 8000f06:	6053      	str	r3, [r2, #4]

    return (pair);
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <Calculate_Encoder_TimePeriod+0x68>)



}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000200 	.word	0x20000200
 8000f18:	200001f0 	.word	0x200001f0
 8000f1c:	20000208 	.word	0x20000208
 8000f20:	200001f4 	.word	0x200001f4
 8000f24:	200001f8 	.word	0x200001f8

08000f28 <UARTputc>:
 * Sends a single character over UART.
 * Waits until the Transmit Data Register Empty (TXE) flag is set before sending.
 * Uses USART2 for communication.
 */
void UARTputc(char thisChar)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    while ((USART2->ISR & USART_ISR_TXE) == 0);  // Wait until TDR is empty
 8000f32:	bf00      	nop
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <UARTputc+0x2c>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f9      	beq.n	8000f34 <UARTputc+0xc>
    USART2->TDR = (uint8_t)thisChar;
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <UARTputc+0x2c>)
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	b292      	uxth	r2, r2
 8000f46:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40004400 	.word	0x40004400

08000f58 <UARTputs>:
 * -------------------
 * Sends a null-terminated string over UART using UARTputc for each character.
 * Uses USART2 for communication.
 */
void UARTputs(char *thisChar)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    while (*thisChar)
 8000f60:	e007      	b.n	8000f72 <UARTputs+0x1a>
    {
        UARTputc(*thisChar);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffde 	bl	8000f28 <UARTputc>
        thisChar++;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
    while (*thisChar)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f3      	bne.n	8000f62 <UARTputs+0xa>
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <UARTprintf>:
 * ---------------------
 * Prints a formatted string over UART using variable arguments.
 * Uses USART2 for communication.
 */
void UARTprintf(char *fmt, ...)
{
 8000f84:	b40f      	push	{r0, r1, r2, r3}
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b0a0      	sub	sp, #128	@ 0x80
 8000f8a:	af00      	add	r7, sp, #0
    va_list args;

    // Need to guarantee that buffer is big enough for any string
    char buffer[MAX_UART_BUFSIZ];

    va_start(args, fmt);
 8000f8c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    vsnprintf(buffer, MAX_UART_BUFSIZ, fmt, args);
 8000f92:	1d38      	adds	r0, r7, #4
 8000f94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000f9a:	2178      	movs	r1, #120	@ 0x78
 8000f9c:	f004 fb00 	bl	80055a0 <vsniprintf>
    va_end(args);

    // Send the formatted string over UART
    UARTputs(buffer);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ffd8 	bl	8000f58 <UARTputs>
	}
 8000fa8:	bf00      	nop
 8000faa:	3780      	adds	r7, #128	@ 0x80
 8000fac:	46bd      	mov	sp, r7
 8000fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
	...

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b28      	ldr	r3, [pc, #160]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b25      	ldr	r3, [pc, #148]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a24      	ldr	r2, [pc, #144]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b22      	ldr	r3, [pc, #136]	@ (800107c <MX_GPIO_Init+0xc4>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <MX_GPIO_Init+0xc4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <MX_GPIO_Init+0xc4>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <MX_GPIO_Init+0xc4>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_GPIO_Init+0xc4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_GPIO_Init+0xc4>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_GPIO_Init+0xc4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2120      	movs	r1, #32
 8001032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001036:	f000 fe81 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001040:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <MX_GPIO_Init+0xc8>)
 8001052:	f000 fce9 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f000 fcda 	bl	8001a28 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	@ 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000800 	.word	0x48000800

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f000 fb56 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f816 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f7ff ff92 	bl	8000fb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001094:	f000 fab4 	bl	8001600 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001098:	f000 fa0c 	bl	80014b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Encoder_Init();
 800109c:	f7ff fe24 	bl	8000ce8 <Encoder_Init>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <main+0x34>)
 80010a4:	f002 fb4c 	bl	8003740 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80010a8:	2104      	movs	r1, #4
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <main+0x34>)
 80010ac:	f002 fb48 	bl	8003740 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  calculateAndDisplayMotorSpeed();
 80010b0:	f000 f866 	bl	8001180 <calculateAndDisplayMotorSpeed>
 80010b4:	e7fc      	b.n	80010b0 <main+0x2c>
 80010b6:	bf00      	nop
 80010b8:	20000214 	.word	0x20000214

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0a6      	sub	sp, #152	@ 0x98
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010c6:	2228      	movs	r2, #40	@ 0x28
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fa76 	bl	80055bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2258      	movs	r2, #88	@ 0x58
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 fa68 	bl	80055bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001108:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800110c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fe26 	bl	8001d6c <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001126:	f000 f889 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001140:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fe64 	bl	8002e14 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001152:	f000 f873 	bl	800123c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <SystemClock_Config+0xc0>)
 8001158:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f875 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001170:	f000 f864 	bl	800123c <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3798      	adds	r7, #152	@ 0x98
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	00100002 	.word	0x00100002

08001180 <calculateAndDisplayMotorSpeed>:

/* USER CODE BEGIN 4 */

void calculateAndDisplayMotorSpeed() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
    // Calculate encoder periods
    uint32_t* both = Calculate_Encoder_TimePeriod();
 8001186:	f7ff fe99 	bl	8000ebc <Calculate_Encoder_TimePeriod>
 800118a:	6178      	str	r0, [r7, #20]

    // Retrieve global encoder periods
    uint32_t leftPeriod = *both;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
    both += 1;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
    uint32_t rightPeriod = *both;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]

    // Calculate the speed of the left and right wheels in terms of revolutions per second
    // Assuming 20 vanes per wheel revolution and period in microseconds
    float leftSpeed = (float)(1.0 / (leftPeriod * 20e-6)); // Left wheel speed in revolutions per second
 800119e:	6938      	ldr	r0, [r7, #16]
 80011a0:	f7ff f9b8 	bl	8000514 <__aeabi_ui2d>
 80011a4:	a320      	add	r3, pc, #128	@ (adr r3, 8001228 <calculateAndDisplayMotorSpeed+0xa8>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fa2d 	bl	8000608 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	491e      	ldr	r1, [pc, #120]	@ (8001230 <calculateAndDisplayMotorSpeed+0xb0>)
 80011b8:	f7ff fb50 	bl	800085c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fcf8 	bl	8000bb8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	60bb      	str	r3, [r7, #8]
    float rightSpeed = (float)(1.0 / (rightPeriod * 20e-6)); // Right wheel speed in revolutions per second
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff f9a1 	bl	8000514 <__aeabi_ui2d>
 80011d2:	a315      	add	r3, pc, #84	@ (adr r3, 8001228 <calculateAndDisplayMotorSpeed+0xa8>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fa16 	bl	8000608 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f04f 0000 	mov.w	r0, #0
 80011e4:	4912      	ldr	r1, [pc, #72]	@ (8001230 <calculateAndDisplayMotorSpeed+0xb0>)
 80011e6:	f7ff fb39 	bl	800085c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fce1 	bl	8000bb8 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	607b      	str	r3, [r7, #4]

    // Display the calculated motor wheel speed on the terminal
    UARTprintf("Left Wheel Speed: %.2f revolutions/s\n", (double)leftSpeed);
 80011fa:	68b8      	ldr	r0, [r7, #8]
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <calculateAndDisplayMotorSpeed+0xb4>)
 8001206:	f7ff febd 	bl	8000f84 <UARTprintf>
    UARTprintf("Right Wheel Speed: %.2f revolutions/s\n", (double)rightSpeed);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff f9a4 	bl	8000558 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4808      	ldr	r0, [pc, #32]	@ (8001238 <calculateAndDisplayMotorSpeed+0xb8>)
 8001216:	f7ff feb5 	bl	8000f84 <UARTprintf>
//    UARTputc((char)leftSpeed);
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	88e368f1 	.word	0x88e368f1
 800122c:	3ef4f8b5 	.word	0x3ef4f8b5
 8001230:	3ff00000 	.word	0x3ff00000
 8001234:	080077f0 	.word	0x080077f0
 8001238:	08007818 	.word	0x08007818

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_MspInit+0x44>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_MspInit+0x44>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_MspInit+0x44>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_MspInit+0x44>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f000 fb90 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 fa6d 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f002 fb6d 	bl	80039d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000214 	.word	0x20000214

08001304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_kill>:

int _kill(int pid, int sig)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800131e:	f004 f959 	bl	80055d4 <__errno>
 8001322:	4603      	mov	r3, r0
 8001324:	2216      	movs	r2, #22
 8001326:	601a      	str	r2, [r3, #0]
  return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_exit>:

void _exit (int status)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffe7 	bl	8001314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001346:	bf00      	nop
 8001348:	e7fd      	b.n	8001346 <_exit+0x12>

0800134a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e00a      	b.n	8001372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135c:	f3af 8000 	nop.w
 8001360:	4601      	mov	r1, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	60ba      	str	r2, [r7, #8]
 8001368:	b2ca      	uxtb	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbf0      	blt.n	800135c <_read+0x12>
  }

  return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e009      	b.n	80013aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	60ba      	str	r2, [r7, #8]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbf1      	blt.n	8001396 <_write+0x12>
  }
  return len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_close>:

int _close(int file)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e4:	605a      	str	r2, [r3, #4]
  return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_isatty>:

int _isatty(int file)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f004 f8be 	bl	80055d4 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20010000 	.word	0x20010000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000210 	.word	0x20000210
 800148c:	20000438 	.word	0x20000438

08001490 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014dc:	2247      	movs	r2, #71	@ 0x47
 80014de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014fa:	481c      	ldr	r0, [pc, #112]	@ (800156c <MX_TIM2_Init+0xb8>)
 80014fc:	f002 f8c8 	bl	8003690 <HAL_TIM_IC_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001506:	f7ff fe99 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4814      	ldr	r0, [pc, #80]	@ (800156c <MX_TIM2_Init+0xb8>)
 800151a:	f002 fe15 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001524:	f7ff fe8a 	bl	800123c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800152c:	2301      	movs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	@ (800156c <MX_TIM2_Init+0xb8>)
 8001540:	f002 fb4a 	bl	8003bd8 <HAL_TIM_IC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800154a:	f7ff fe77 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2204      	movs	r2, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_TIM2_Init+0xb8>)
 8001556:	f002 fb3f 	bl	8003bd8 <HAL_TIM_IC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001560:	f7ff fe6c 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000214 	.word	0x20000214

08001570 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001590:	d130      	bne.n	80015f4 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_TIM_IC_MspInit+0x8c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c2:	2303      	movs	r3, #3
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f000 fa22 	bl	8001a28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	201c      	movs	r0, #28
 80015ea:	f000 f9e6 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ee:	201c      	movs	r0, #28
 80015f0:	f000 f9ff 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <MX_USART2_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 800160c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_USART2_UART_Init+0x58>)
 8001644:	f002 fe2a 	bl	800429c <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f7ff fdf5 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000260 	.word	0x20000260
 800165c:	40004400 	.word	0x40004400

08001660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <HAL_UART_MspInit+0x7c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d128      	bne.n	80016d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_UART_MspInit+0x80>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016b2:	230c      	movs	r3, #12
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c2:	2307      	movs	r3, #7
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d0:	f000 f9aa 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40004400 	.word	0x40004400
 80016e0:	40021000 	.word	0x40021000

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff fed2 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f003 ff65 	bl	80055e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001716:	f7ff fcb5 	bl	8001084 <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800171c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001728:	08007bf8 	.word	0x08007bf8
  ldr r2, =_sbss
 800172c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001730:	20000438 	.word	0x20000438

08001734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>
	...

08001738 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_Init+0x28>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_Init+0x28>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f92b 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fd78 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40022000 	.word	0x40022000

08001764 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f943 	bl	8001a0e <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017a0:	f000 f90b 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200002e8 	.word	0x200002e8

080017ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200002e8 	.word	0x200002e8

08001804 <__NVIC_SetPriorityGrouping>:
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	@ (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e160      	b.n	8001cfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8152 	beq.w	8001cf4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0203 	and.w	r2, r3, #3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80ac 	beq.w	8001cf4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb4:	4a59      	ldr	r2, [pc, #356]	@ (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bde:	d025      	beq.n	8001c2c <HAL_GPIO_Init+0x204>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a4f      	ldr	r2, [pc, #316]	@ (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x200>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x1fc>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1f8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1f4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4b      	ldr	r2, [pc, #300]	@ (8001d30 <HAL_GPIO_Init+0x308>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1f0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1ec>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e00c      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c14:	2307      	movs	r3, #7
 8001c16:	e00a      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	e008      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	4937      	ldr	r1, [pc, #220]	@ (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c70:	4a31      	ldr	r2, [pc, #196]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c76:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c9a:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f ae97 	bne.w	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	48001400 	.word	0x48001400
 8001d34:	48001800 	.word	0x48001800
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f001 b83a 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 816f 	beq.w	8002086 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001da8:	4bb5      	ldr	r3, [pc, #724]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4bb2      	ldr	r3, [pc, #712]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d15c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x10e>
 8001dc0:	4baf      	ldr	r3, [pc, #700]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d155      	bne.n	8001e7a <HAL_RCC_OscConfig+0x10e>
 8001dce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x94>
 8001dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0xc0>
 8001e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e04:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e18:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e28:	4b95      	ldr	r3, [pc, #596]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e30:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001e34:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001e40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8111 	beq.w	8002084 <HAL_RCC_OscConfig+0x318>
 8001e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 8108 	bne.w	8002084 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f000 bfc6 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12e>
 8001e8c:	4b7c      	ldr	r3, [pc, #496]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a7b      	ldr	r2, [pc, #492]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e036      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x158>
 8001eaa:	4b75      	ldr	r3, [pc, #468]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a74      	ldr	r2, [pc, #464]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b72      	ldr	r3, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a71      	ldr	r2, [pc, #452]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e021      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x184>
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a69      	ldr	r2, [pc, #420]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b67      	ldr	r3, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a66      	ldr	r2, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001ef0:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a62      	ldr	r2, [pc, #392]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b60      	ldr	r3, [pc, #384]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d059      	beq.n	8001fcc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fc68 	bl	80017ec <HAL_GetTick>
 8001f1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f22:	f7ff fc63 	bl	80017ec <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d902      	bls.n	8001f38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	f000 bf67 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 8001f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f3c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001f4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0x1fe>
 8001f64:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x22a>
 8001f6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f6e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001f7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f82:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f92:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f9a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001f9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001faa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ab      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1b6>
 8001fca:	e05c      	b.n	8002086 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fc0e 	bl	80017ec <HAL_GetTick>
 8001fd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fc09 	bl	80017ec <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d902      	bls.n	8001fec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f000 bf0d 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 8001fec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ff0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002000:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_RCC_OscConfig+0x2b2>
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x2de>
 800201e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002022:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002032:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002036:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800203a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_RCC_OscConfig+0x314>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800204e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002052:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002056:	fa92 f2a2 	rbit	r2, r2
 800205a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800205e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f002 021f 	and.w	r2, r2, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ab      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x26a>
 800207e:	e002      	b.n	8002086 <HAL_RCC_OscConfig+0x31a>
 8002080:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 817f 	beq.w	800239a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800209c:	4ba7      	ldr	r3, [pc, #668]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020a8:	4ba4      	ldr	r3, [pc, #656]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d173      	bne.n	800219c <HAL_RCC_OscConfig+0x430>
 80020b4:	4ba1      	ldr	r3, [pc, #644]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020c0:	d16c      	bne.n	800219c <HAL_RCC_OscConfig+0x430>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80020d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x386>
 80020ec:	4b93      	ldr	r3, [pc, #588]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0x3ae>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800210a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002120:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800212c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCC_OscConfig+0x3f6>
 800214c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002150:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d002      	beq.n	8002162 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f000 be52 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	21f8      	movs	r1, #248	@ 0xf8
 8002178:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002180:	fa91 f1a1 	rbit	r1, r1
 8002184:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002188:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800218c:	fab1 f181 	clz	r1, r1
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	408b      	lsls	r3, r1
 8002194:	4969      	ldr	r1, [pc, #420]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e0fe      	b.n	800239a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8088 	beq.w	80022be <HAL_RCC_OscConfig+0x552>
 80021ae:	2301      	movs	r3, #1
 80021b0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80021c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	2301      	movs	r3, #1
 80021d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fb07 	bl	80017ec <HAL_GetTick>
 80021de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e4:	f7ff fb02 	bl	80017ec <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d902      	bls.n	80021fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f000 be06 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800220c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d102      	bne.n	800222a <HAL_RCC_OscConfig+0x4be>
 8002224:	4b45      	ldr	r3, [pc, #276]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	e013      	b.n	8002252 <HAL_RCC_OscConfig+0x4e6>
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002242:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800224e:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	2202      	movs	r2, #2
 8002254:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002258:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002264:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0af      	beq.n	80021e4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	21f8      	movs	r1, #248	@ 0xf8
 800229a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80022a2:	fa91 f1a1 	rbit	r1, r1
 80022a6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80022aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80022ae:	fab1 f181 	clz	r1, r1
 80022b2:	b2c9      	uxtb	r1, r1
 80022b4:	408b      	lsls	r3, r1
 80022b6:	4921      	ldr	r1, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e06d      	b.n	800239a <HAL_RCC_OscConfig+0x62e>
 80022be:	2301      	movs	r3, #1
 80022c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80022d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2300      	movs	r3, #0
 80022e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fa7f 	bl	80017ec <HAL_GetTick>
 80022ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff fa7a 	bl	80017ec <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d902      	bls.n	800230a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	f000 bd7e 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800231c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x5d4>
 8002334:	4b01      	ldr	r3, [pc, #4]	@ (800233c <HAL_RCC_OscConfig+0x5d0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e016      	b.n	8002368 <HAL_RCC_OscConfig+0x5fc>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002358:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002364:	4bbf      	ldr	r3, [pc, #764]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	2202      	movs	r2, #2
 800236a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800236e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800237a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ac      	bne.n	80022f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8113 	beq.w	80025d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d07c      	beq.n	80024ba <HAL_RCC_OscConfig+0x74e>
 80023c0:	2301      	movs	r3, #1
 80023c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80023d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	4ba2      	ldr	r3, [pc, #648]	@ (8002668 <HAL_RCC_OscConfig+0x8fc>)
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	461a      	mov	r2, r3
 80023e6:	2301      	movs	r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7ff f9ff 	bl	80017ec <HAL_GetTick>
 80023ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff f9fa 	bl	80017ec <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d902      	bls.n	800240a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	f000 bcfe 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800244e:	2202      	movs	r2, #2
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002468:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 800246c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002476:	2102      	movs	r1, #2
 8002478:	6019      	str	r1, [r3, #0]
 800247a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f1a3 	rbit	r1, r3
 8002488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002490:	6019      	str	r1, [r3, #0]
  return result;
 8002492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002496:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d09d      	beq.n	80023f4 <HAL_RCC_OscConfig+0x688>
 80024b8:	e08d      	b.n	80025d6 <HAL_RCC_OscConfig+0x86a>
 80024ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024dc:	601a      	str	r2, [r3, #0]
  return result;
 80024de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002668 <HAL_RCC_OscConfig+0x8fc>)
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7ff f976 	bl	80017ec <HAL_GetTick>
 8002500:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002506:	f7ff f971 	bl	80017ec <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d902      	bls.n	800251c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	f000 bc75 	b.w	8002e06 <HAL_RCC_OscConfig+0x109a>
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002524:	2202      	movs	r2, #2
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002544:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002548:	2202      	movs	r2, #2
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002590:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002594:	2102      	movs	r1, #2
 8002596:	6019      	str	r1, [r3, #0]
 8002598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f1a3 	rbit	r1, r3
 80025a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025ae:	6019      	str	r1, [r3, #0]
  return result;
 80025b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d197      	bne.n	8002506 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 81a5 	beq.w	8002936 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_RCC_OscConfig+0x8f8>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_RCC_OscConfig+0x900>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d121      	bne.n	800267c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_RCC_OscConfig+0x900>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_RCC_OscConfig+0x900>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7ff f8d2 	bl	80017ec <HAL_GetTick>
 8002648:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e010      	b.n	8002670 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7ff f8cd 	bl	80017ec <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d908      	bls.n	8002670 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e3d1      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	10908120 	.word	0x10908120
 800266c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b8d      	ldr	r3, [pc, #564]	@ (80028a8 <HAL_RCC_OscConfig+0xb3c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0e8      	beq.n	800264e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x92e>
 800268c:	4b87      	ldr	r3, [pc, #540]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a86      	ldr	r2, [pc, #536]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	e035      	b.n	8002706 <HAL_RCC_OscConfig+0x99a>
 800269a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x958>
 80026aa:	4b80      	ldr	r3, [pc, #512]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a7f      	ldr	r2, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b7d      	ldr	r3, [pc, #500]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a7c      	ldr	r2, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	e020      	b.n	8002706 <HAL_RCC_OscConfig+0x99a>
 80026c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d10c      	bne.n	80026ee <HAL_RCC_OscConfig+0x982>
 80026d4:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a74      	ldr	r2, [pc, #464]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	4b72      	ldr	r3, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a71      	ldr	r2, [pc, #452]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0x99a>
 80026ee:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a6e      	ldr	r2, [pc, #440]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b6c      	ldr	r3, [pc, #432]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a6b      	ldr	r2, [pc, #428]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8081 	beq.w	800281a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff f868 	bl	80017ec <HAL_GetTick>
 800271c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e00b      	b.n	800273a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7ff f863 	bl	80017ec <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e365      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002742:	2202      	movs	r2, #2
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002758:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002762:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002766:	2202      	movs	r2, #2
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800278a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0xa3a>
 80027a0:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	e013      	b.n	80027ce <HAL_RCC_OscConfig+0xa62>
 80027a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027ae:	2202      	movs	r2, #2
 80027b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	4b38      	ldr	r3, [pc, #224]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80027d6:	2102      	movs	r1, #2
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fa92 f1a2 	rbit	r1, r2
 80027e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ec:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80027f0:	6011      	str	r1, [r2, #0]
  return result;
 80027f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027f6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d084      	beq.n	8002722 <HAL_RCC_OscConfig+0x9b6>
 8002818:	e083      	b.n	8002922 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe ffe7 	bl	80017ec <HAL_GetTick>
 800281e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7fe ffe2 	bl	80017ec <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2e4      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002844:	2202      	movs	r2, #2
 8002846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002864:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002868:	2202      	movs	r2, #2
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002870:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002882:	601a      	str	r2, [r3, #0]
  return result;
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800288c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0xb44>
 80028a2:	4b02      	ldr	r3, [pc, #8]	@ (80028ac <HAL_RCC_OscConfig+0xb40>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	e017      	b.n	80028d8 <HAL_RCC_OscConfig+0xb6c>
 80028a8:	40007000 	.word	0x40007000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028b8:	2202      	movs	r2, #2
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	4bb3      	ldr	r3, [pc, #716]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028dc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80028e0:	2102      	movs	r1, #2
 80028e2:	6011      	str	r1, [r2, #0]
 80028e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	fa92 f1a2 	rbit	r1, r2
 80028f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028f6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80028fa:	6011      	str	r1, [r2, #0]
  return result;
 80028fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002900:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d180      	bne.n	8002824 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002922:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a9d      	ldr	r2, [pc, #628]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 825e 	beq.w	8002e04 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002948:	4b96      	ldr	r3, [pc, #600]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	f000 821f 	beq.w	8002d94 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800295a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b02      	cmp	r3, #2
 8002964:	f040 8170 	bne.w	8002c48 <HAL_RCC_OscConfig+0xedc>
 8002968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800298c:	601a      	str	r2, [r3, #0]
  return result;
 800298e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002992:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002996:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	461a      	mov	r2, r3
 80029aa:	2300      	movs	r3, #0
 80029ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe ff1d 	bl	80017ec <HAL_GetTick>
 80029b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	e009      	b.n	80029cc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe ff18 	bl	80017ec <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e21c      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 80029cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80029d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029f0:	601a      	str	r2, [r3, #0]
  return result;
 80029f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_OscConfig+0xcaa>
 8002a10:	4b64      	ldr	r3, [pc, #400]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	e027      	b.n	8002a66 <HAL_RCC_OscConfig+0xcfa>
 8002a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a28:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a36:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	4b50      	ldr	r3, [pc, #320]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a72:	6011      	str	r1, [r2, #0]
 8002a74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a78:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	fa92 f1a2 	rbit	r1, r2
 8002a82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a86:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002a8a:	6011      	str	r1, [r2, #0]
  return result;
 8002a8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a90:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d182      	bne.n	80029b8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f023 020f 	bic.w	r2, r3, #15
 8002aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002abe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	4937      	ldr	r1, [pc, #220]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002acc:	4b35      	ldr	r3, [pc, #212]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a19      	ldr	r1, [r3, #32]
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	492d      	ldr	r1, [pc, #180]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002afc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b18:	601a      	str	r2, [r3, #0]
  return result;
 8002b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	2301      	movs	r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fe57 	bl	80017ec <HAL_GetTick>
 8002b3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b42:	e009      	b.n	8002b58 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fe52 	bl	80017ec <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e156      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 8002b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	fa93 f2a3 	rbit	r2, r3
 8002b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b78:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b7c:	601a      	str	r2, [r3, #0]
  return result;
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe3c>
 8002b9c:	4b01      	ldr	r3, [pc, #4]	@ (8002ba4 <HAL_RCC_OscConfig+0xe38>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	e02a      	b.n	8002bf8 <HAL_RCC_OscConfig+0xe8c>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	4b86      	ldr	r3, [pc, #536]	@ (8002e10 <HAL_RCC_OscConfig+0x10a4>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bfc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c04:	6011      	str	r1, [r2, #0]
 8002c06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	fa92 f1a2 	rbit	r1, r2
 8002c14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c18:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c1c:	6011      	str	r1, [r2, #0]
  return result;
 8002c1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c22:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	fab2 f282 	clz	r2, r2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	f042 0220 	orr.w	r2, r2, #32
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f002 021f 	and.w	r2, r2, #31
 8002c38:	2101      	movs	r1, #1
 8002c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f43f af7f 	beq.w	8002b44 <HAL_RCC_OscConfig+0xdd8>
 8002c46:	e0dd      	b.n	8002e04 <HAL_RCC_OscConfig+0x1098>
 8002c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c68:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c6c:	601a      	str	r2, [r3, #0]
  return result;
 8002c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c72:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fdad 	bl	80017ec <HAL_GetTick>
 8002c92:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	e009      	b.n	8002cac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fda8 	bl	80017ec <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0ac      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
 8002cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ccc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cd0:	601a      	str	r2, [r3, #0]
  return result;
 8002cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xf8a>
 8002cf0:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x10a4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	e027      	b.n	8002d46 <HAL_RCC_OscConfig+0xfda>
 8002cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d16:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d20:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	fa93 f2a3 	rbit	r2, r3
 8002d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	4b33      	ldr	r3, [pc, #204]	@ (8002e10 <HAL_RCC_OscConfig+0x10a4>)
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d4a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d4e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d52:	6011      	str	r1, [r2, #0]
 8002d54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	fa92 f1a2 	rbit	r1, r2
 8002d62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d66:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002d6a:	6011      	str	r1, [r2, #0]
  return result;
 8002d6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d70:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f042 0220 	orr.w	r2, r2, #32
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f002 021f 	and.w	r2, r2, #31
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d182      	bne.n	8002c98 <HAL_RCC_OscConfig+0xf2c>
 8002d92:	e037      	b.n	8002e04 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e02e      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_RCC_OscConfig+0x10a4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002db0:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <HAL_RCC_OscConfig+0x10a4>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002dbc:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d117      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002dd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002dd4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b09e      	sub	sp, #120	@ 0x78
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e162      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b90      	ldr	r3, [pc, #576]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	498b      	ldr	r1, [pc, #556]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b89      	ldr	r3, [pc, #548]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e14a      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	497f      	ldr	r1, [pc, #508]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80dc 	beq.w	8003040 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d13c      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xf6>
 8002e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e94:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_ClockConfig+0xa6>
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e00f      	b.n	8002eda <HAL_RCC_ClockConfig+0xc6>
 8002eba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ed6:	4b67      	ldr	r3, [pc, #412]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ede:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d17b      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0f3      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d13c      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x178>
 8002f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x128>
 8002f36:	4b4f      	ldr	r3, [pc, #316]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e00f      	b.n	8002f5c <HAL_RCC_ClockConfig+0x148>
 8002f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f58:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f60:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f64:	fa92 f2a2 	rbit	r2, r2
 8002f68:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d13a      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b2      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x1a0>
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x1bc>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	61ba      	str	r2, [r7, #24]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	617a      	str	r2, [r7, #20]
  return result;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e079      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f023 0203 	bic.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	491a      	ldr	r1, [pc, #104]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003010:	f7fe fbec 	bl	80017ec <HAL_GetTick>
 8003014:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	e00a      	b.n	800302e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003018:	f7fe fbe8 	bl	80017ec <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e061      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_ClockConfig+0x260>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 020c 	and.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	429a      	cmp	r2, r3
 800303e:	d1eb      	bne.n	8003018 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d214      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4906      	ldr	r1, [pc, #24]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <HAL_RCC_ClockConfig+0x25c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e040      	b.n	80030f2 <HAL_RCC_ClockConfig+0x2de>
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCC_ClockConfig+0x2e8>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	491a      	ldr	r1, [pc, #104]	@ (80030fc <HAL_RCC_ClockConfig+0x2e8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a2:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <HAL_RCC_ClockConfig+0x2e8>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4912      	ldr	r1, [pc, #72]	@ (80030fc <HAL_RCC_ClockConfig+0x2e8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030b6:	f000 f829 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ba:	4601      	mov	r1, r0
 80030bc:	4b0f      	ldr	r3, [pc, #60]	@ (80030fc <HAL_RCC_ClockConfig+0x2e8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c4:	22f0      	movs	r2, #240	@ 0xf0
 80030c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	fa92 f2a2 	rbit	r2, r2
 80030ce:	60fa      	str	r2, [r7, #12]
  return result;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	40d3      	lsrs	r3, r2
 80030da:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x2ec>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	fa21 f303 	lsr.w	r3, r1, r3
 80030e2:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <HAL_RCC_ClockConfig+0x2f0>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <HAL_RCC_ClockConfig+0x2f4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fb3a 	bl	8001764 <HAL_InitTick>
  
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3778      	adds	r7, #120	@ 0x78
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	08007840 	.word	0x08007840
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003126:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x30>
 8003136:	2b08      	cmp	r3, #8
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x36>
 800313a:	e029      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313e:	613b      	str	r3, [r7, #16]
      break;
 8003140:	e029      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003150:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	4a15      	ldr	r2, [pc, #84]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003168:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e007      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800317a:	4a0b      	ldr	r2, [pc, #44]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	613b      	str	r3, [r7, #16]
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	693b      	ldr	r3, [r7, #16]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	08007858 	.word	0x08007858
 80031b0:	08007868 	.word	0x08007868

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031d2:	f7ff ffef 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	603a      	str	r2, [r7, #0]
  return result;
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	40d3      	lsrs	r3, r2
 80031f8:	4a04      	ldr	r2, [pc, #16]	@ (800320c <HAL_RCC_GetPCLK1Freq+0x40>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	08007850 	.word	0x08007850

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003216:	f7ff ffcd 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 800321a:	4601      	mov	r1, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003224:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003228:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	fa92 f2a2 	rbit	r2, r2
 8003230:	603a      	str	r2, [r7, #0]
  return result;
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	40d3      	lsrs	r3, r2
 800323c:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <HAL_RCC_GetPCLK2Freq+0x40>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	08007850 	.word	0x08007850

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b092      	sub	sp, #72	@ 0x48
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80d4 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003278:	4b4e      	ldr	r3, [pc, #312]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10e      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b4b      	ldr	r3, [pc, #300]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a4a      	ldr	r2, [pc, #296]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328e:	61d3      	str	r3, [r2, #28]
 8003290:	4b48      	ldr	r3, [pc, #288]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b45      	ldr	r3, [pc, #276]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a41      	ldr	r2, [pc, #260]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fa97 	bl	80017ec <HAL_GetTick>
 80032be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fa93 	bl	80017ec <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	@ 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1d6      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b38      	ldr	r3, [pc, #224]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8084 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d07c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800330a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	461a      	mov	r2, r3
 800332a:	2301      	movs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	2300      	movs	r3, #0
 8003350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003352:	4a18      	ldr	r2, [pc, #96]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04b      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fa43 	bl	80017ec <HAL_GetTick>
 8003366:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe fa3f 	bl	80017ec <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e180      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
  return result;
 8003398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d108      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033ae:	4b01      	ldr	r3, [pc, #4]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	e00d      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	10908100 	.word	0x10908100
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b9a      	ldr	r3, [pc, #616]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	613a      	str	r2, [r7, #16]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	60fa      	str	r2, [r7, #12]
  return result;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0b7      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	498c      	ldr	r1, [pc, #560]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a87      	ldr	r2, [pc, #540]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342c:	4b82      	ldr	r3, [pc, #520]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	f023 0203 	bic.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	497f      	ldr	r1, [pc, #508]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800344a:	4b7b      	ldr	r3, [pc, #492]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4978      	ldr	r1, [pc, #480]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003468:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	4970      	ldr	r1, [pc, #448]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003486:	4b6c      	ldr	r3, [pc, #432]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	f023 0210 	bic.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4969      	ldr	r1, [pc, #420]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034a4:	4b64      	ldr	r3, [pc, #400]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	4961      	ldr	r1, [pc, #388]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	f023 0220 	bic.w	r2, r3, #32
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	495a      	ldr	r1, [pc, #360]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e0:	4b55      	ldr	r3, [pc, #340]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	4952      	ldr	r1, [pc, #328]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	494b      	ldr	r1, [pc, #300]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800351c:	4b46      	ldr	r3, [pc, #280]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4943      	ldr	r1, [pc, #268]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800353a:	4b3f      	ldr	r3, [pc, #252]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	493c      	ldr	r1, [pc, #240]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003558:	4b37      	ldr	r3, [pc, #220]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	4934      	ldr	r1, [pc, #208]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003576:	4b30      	ldr	r3, [pc, #192]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	492d      	ldr	r1, [pc, #180]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003594:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	4925      	ldr	r1, [pc, #148]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035b2:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	491e      	ldr	r1, [pc, #120]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80035d0:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	4916      	ldr	r1, [pc, #88]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fa:	490f      	ldr	r1, [pc, #60]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003618:	4907      	ldr	r1, [pc, #28]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800362a:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363e:	4913      	ldr	r1, [pc, #76]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003640:	4313      	orrs	r3, r2
 8003642:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	490b      	ldr	r1, [pc, #44]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367a:	4904      	ldr	r1, [pc, #16]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3748      	adds	r7, #72	@ 0x48
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e049      	b.n	8003736 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd ff5a 	bl	8001570 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fb46 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0x1e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e023      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x66>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0x2e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e01b      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x66>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d104      	bne.n	800377e <HAL_TIM_IC_Start_IT+0x3e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e013      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x66>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d104      	bne.n	800378e <HAL_TIM_IC_Start_IT+0x4e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	e00b      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x66>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d104      	bne.n	800379e <HAL_TIM_IC_Start_IT+0x5e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e003      	b.n	80037a6 <HAL_TIM_IC_Start_IT+0x66>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_IC_Start_IT+0x78>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e013      	b.n	80037e0 <HAL_TIM_IC_Start_IT+0xa0>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d104      	bne.n	80037c8 <HAL_TIM_IC_Start_IT+0x88>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e00b      	b.n	80037e0 <HAL_TIM_IC_Start_IT+0xa0>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d104      	bne.n	80037d8 <HAL_TIM_IC_Start_IT+0x98>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e003      	b.n	80037e0 <HAL_TIM_IC_Start_IT+0xa0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037e2:	7bbb      	ldrb	r3, [r7, #14]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037e8:	7b7b      	ldrb	r3, [r7, #13]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d001      	beq.n	80037f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0dd      	b.n	80039ae <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_IT+0xc2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003800:	e023      	b.n	800384a <HAL_TIM_IC_Start_IT+0x10a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_IT+0xd2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003810:	e01b      	b.n	800384a <HAL_TIM_IC_Start_IT+0x10a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d104      	bne.n	8003822 <HAL_TIM_IC_Start_IT+0xe2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003820:	e013      	b.n	800384a <HAL_TIM_IC_Start_IT+0x10a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d104      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0xf2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003830:	e00b      	b.n	800384a <HAL_TIM_IC_Start_IT+0x10a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x102>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003840:	e003      	b.n	800384a <HAL_TIM_IC_Start_IT+0x10a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_IC_Start_IT+0x11a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003858:	e013      	b.n	8003882 <HAL_TIM_IC_Start_IT+0x142>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_IC_Start_IT+0x12a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003868:	e00b      	b.n	8003882 <HAL_TIM_IC_Start_IT+0x142>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0x13a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003878:	e003      	b.n	8003882 <HAL_TIM_IC_Start_IT+0x142>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d841      	bhi.n	800390c <HAL_TIM_IC_Start_IT+0x1cc>
 8003888:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <HAL_TIM_IC_Start_IT+0x150>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038c5 	.word	0x080038c5
 8003894:	0800390d 	.word	0x0800390d
 8003898:	0800390d 	.word	0x0800390d
 800389c:	0800390d 	.word	0x0800390d
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	0800390d 	.word	0x0800390d
 80038ac:	0800390d 	.word	0x0800390d
 80038b0:	080038e9 	.word	0x080038e9
 80038b4:	0800390d 	.word	0x0800390d
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	0800390d 	.word	0x0800390d
 80038c0:	080038fb 	.word	0x080038fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0202 	orr.w	r2, r2, #2
 80038d2:	60da      	str	r2, [r3, #12]
      break;
 80038d4:	e01d      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0204 	orr.w	r2, r2, #4
 80038e4:	60da      	str	r2, [r3, #12]
      break;
 80038e6:	e014      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	60da      	str	r2, [r3, #12]
      break;
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0210 	orr.w	r2, r2, #16
 8003908:	60da      	str	r2, [r3, #12]
      break;
 800390a:	e002      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	bf00      	nop
  }

  if (status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d149      	bne.n	80039ac <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbeb 	bl	80040fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a23      	ldr	r2, [pc, #140]	@ (80039b8 <HAL_TIM_IC_Start_IT+0x278>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d018      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1f      	ldr	r2, [pc, #124]	@ (80039bc <HAL_TIM_IC_Start_IT+0x27c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_TIM_IC_Start_IT+0x280>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_TIM_IC_Start_IT+0x284>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_TIM_IC_Start_IT+0x288>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_IC_Start_IT+0x22c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_TIM_IC_Start_IT+0x28c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d115      	bne.n	8003998 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	4b17      	ldr	r3, [pc, #92]	@ (80039d0 <HAL_TIM_IC_Start_IT+0x290>)
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d015      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x26a>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003984:	d011      	beq.n	80039aa <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e008      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e000      	b.n	80039ac <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40015000 	.word	0x40015000
 80039d0:	00010007 	.word	0x00010007

080039d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0202 	mvn.w	r2, #2
 8003a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fa24 	bl	8000e6c <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f97c 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f983 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d020      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0204 	mvn.w	r2, #4
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f9fe 	bl	8000e6c <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f956 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f95d 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0208 	mvn.w	r2, #8
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f9d8 	bl	8000e6c <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f930 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f937 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2208      	movs	r2, #8
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd f9b2 	bl	8000e6c <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f90a 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f911 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0201 	mvn.w	r2, #1
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8e8 	bl	8003d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fb88 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb80 	bl	8004288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8d0 	bl	8003d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0220 	mvn.w	r2, #32
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fb48 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e088      	b.n	8003d08 <HAL_TIM_IC_ConfigChannel+0x130>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c14:	f000 f94e 	bl	8003eb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020c 	bic.w	r2, r2, #12
 8003c26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6999      	ldr	r1, [r3, #24]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	619a      	str	r2, [r3, #24]
 8003c3a:	e060      	b.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d11c      	bne.n	8003c7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c52:	f000 f99d 	bl	8003f90 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6999      	ldr	r1, [r3, #24]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	021a      	lsls	r2, r3, #8
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	e040      	b.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11b      	bne.n	8003cba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c92:	f000 f9ba 	bl	800400a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 020c 	bic.w	r2, r2, #12
 8003ca4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	61da      	str	r2, [r3, #28]
 8003cb8:	e021      	b.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d11c      	bne.n	8003cfa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003cd0:	f000 f9d7 	bl	8004082 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ce2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69d9      	ldr	r1, [r3, #28]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
 8003cf8:	e001      	b.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a48      	ldr	r2, [pc, #288]	@ (8003e94 <TIM_Base_SetConfig+0x134>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7e:	d00f      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a45      	ldr	r2, [pc, #276]	@ (8003e98 <TIM_Base_SetConfig+0x138>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a44      	ldr	r2, [pc, #272]	@ (8003e9c <TIM_Base_SetConfig+0x13c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a43      	ldr	r2, [pc, #268]	@ (8003ea0 <TIM_Base_SetConfig+0x140>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a42      	ldr	r2, [pc, #264]	@ (8003ea4 <TIM_Base_SetConfig+0x144>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a37      	ldr	r2, [pc, #220]	@ (8003e94 <TIM_Base_SetConfig+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc0:	d01b      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	@ (8003e98 <TIM_Base_SetConfig+0x138>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d017      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <TIM_Base_SetConfig+0x13c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a32      	ldr	r2, [pc, #200]	@ (8003ea0 <TIM_Base_SetConfig+0x140>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <TIM_Base_SetConfig+0x148>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a31      	ldr	r2, [pc, #196]	@ (8003eac <TIM_Base_SetConfig+0x14c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <TIM_Base_SetConfig+0x150>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea4 <TIM_Base_SetConfig+0x144>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a18      	ldr	r2, [pc, #96]	@ (8003e94 <TIM_Base_SetConfig+0x134>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <TIM_Base_SetConfig+0x140>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <TIM_Base_SetConfig+0x148>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <TIM_Base_SetConfig+0x14c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <TIM_Base_SetConfig+0x150>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <TIM_Base_SetConfig+0x144>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  }
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40015000 	.word	0x40015000
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 0201 	bic.w	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <TIM_TI1_SetConfig+0xc4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d017      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d013      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <TIM_TI1_SetConfig+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00f      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a22      	ldr	r2, [pc, #136]	@ (8003f80 <TIM_TI1_SetConfig+0xcc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a21      	ldr	r2, [pc, #132]	@ (8003f84 <TIM_TI1_SetConfig+0xd0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a20      	ldr	r2, [pc, #128]	@ (8003f88 <TIM_TI1_SetConfig+0xd4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_TI1_SetConfig+0x5e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <TIM_TI1_SetConfig+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <TIM_TI1_SetConfig+0x62>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <TIM_TI1_SetConfig+0x64>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e003      	b.n	8003f36 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f023 030a 	bic.w	r3, r3, #10
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 030a 	and.w	r3, r3, #10
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40015000 	.word	0x40015000

08003f90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 0210 	bic.w	r2, r3, #16
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	031b      	lsls	r3, r3, #12
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	b2db      	uxtb	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	2201      	movs	r2, #1
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1a      	ldr	r2, [r3, #32]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	43db      	mvns	r3, r3
 800411e:	401a      	ands	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1a      	ldr	r2, [r3, #32]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e06d      	b.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	@ (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2f      	ldr	r2, [pc, #188]	@ (800424c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a2d      	ldr	r2, [pc, #180]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d01d      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d018      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	@ (800424c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40015000 	.word	0x40015000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40014000 	.word	0x40014000

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e040      	b.n	8004330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd f9ce 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	@ 0x24
 80042c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9fc 	bl	80046e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f825 	bl	8004338 <UART_SetConfig>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e01b      	b.n	8004330 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa7b 	bl	8004824 <UART_CheckIdleState>
 800432e:	4603      	mov	r3, r0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b92      	ldr	r3, [pc, #584]	@ (80045ac <UART_SetConfig+0x274>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	430b      	orrs	r3, r1
 800436e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a80      	ldr	r2, [pc, #512]	@ (80045b0 <UART_SetConfig+0x278>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d120      	bne.n	80043f6 <UART_SetConfig+0xbe>
 80043b4:	4b7f      	ldr	r3, [pc, #508]	@ (80045b4 <UART_SetConfig+0x27c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d817      	bhi.n	80043f0 <UART_SetConfig+0xb8>
 80043c0:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x90>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043e5 	.word	0x080043e5
 80043d0:	080043eb 	.word	0x080043eb
 80043d4:	080043df 	.word	0x080043df
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0b5      	b.n	800454a <UART_SetConfig+0x212>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0b2      	b.n	800454a <UART_SetConfig+0x212>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e0af      	b.n	800454a <UART_SetConfig+0x212>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e0ac      	b.n	800454a <UART_SetConfig+0x212>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e0a9      	b.n	800454a <UART_SetConfig+0x212>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6f      	ldr	r2, [pc, #444]	@ (80045b8 <UART_SetConfig+0x280>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d124      	bne.n	800444a <UART_SetConfig+0x112>
 8004400:	4b6c      	ldr	r3, [pc, #432]	@ (80045b4 <UART_SetConfig+0x27c>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800440c:	d011      	beq.n	8004432 <UART_SetConfig+0xfa>
 800440e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004412:	d817      	bhi.n	8004444 <UART_SetConfig+0x10c>
 8004414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004418:	d011      	beq.n	800443e <UART_SetConfig+0x106>
 800441a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800441e:	d811      	bhi.n	8004444 <UART_SetConfig+0x10c>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <UART_SetConfig+0xf4>
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004428:	d006      	beq.n	8004438 <UART_SetConfig+0x100>
 800442a:	e00b      	b.n	8004444 <UART_SetConfig+0x10c>
 800442c:	2300      	movs	r3, #0
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e08b      	b.n	800454a <UART_SetConfig+0x212>
 8004432:	2302      	movs	r3, #2
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e088      	b.n	800454a <UART_SetConfig+0x212>
 8004438:	2304      	movs	r3, #4
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e085      	b.n	800454a <UART_SetConfig+0x212>
 800443e:	2308      	movs	r3, #8
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e082      	b.n	800454a <UART_SetConfig+0x212>
 8004444:	2310      	movs	r3, #16
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e07f      	b.n	800454a <UART_SetConfig+0x212>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5b      	ldr	r2, [pc, #364]	@ (80045bc <UART_SetConfig+0x284>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d124      	bne.n	800449e <UART_SetConfig+0x166>
 8004454:	4b57      	ldr	r3, [pc, #348]	@ (80045b4 <UART_SetConfig+0x27c>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800445c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004460:	d011      	beq.n	8004486 <UART_SetConfig+0x14e>
 8004462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004466:	d817      	bhi.n	8004498 <UART_SetConfig+0x160>
 8004468:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800446c:	d011      	beq.n	8004492 <UART_SetConfig+0x15a>
 800446e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004472:	d811      	bhi.n	8004498 <UART_SetConfig+0x160>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <UART_SetConfig+0x148>
 8004478:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800447c:	d006      	beq.n	800448c <UART_SetConfig+0x154>
 800447e:	e00b      	b.n	8004498 <UART_SetConfig+0x160>
 8004480:	2300      	movs	r3, #0
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e061      	b.n	800454a <UART_SetConfig+0x212>
 8004486:	2302      	movs	r3, #2
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e05e      	b.n	800454a <UART_SetConfig+0x212>
 800448c:	2304      	movs	r3, #4
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e05b      	b.n	800454a <UART_SetConfig+0x212>
 8004492:	2308      	movs	r3, #8
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e058      	b.n	800454a <UART_SetConfig+0x212>
 8004498:	2310      	movs	r3, #16
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e055      	b.n	800454a <UART_SetConfig+0x212>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a47      	ldr	r2, [pc, #284]	@ (80045c0 <UART_SetConfig+0x288>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d124      	bne.n	80044f2 <UART_SetConfig+0x1ba>
 80044a8:	4b42      	ldr	r3, [pc, #264]	@ (80045b4 <UART_SetConfig+0x27c>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044b4:	d011      	beq.n	80044da <UART_SetConfig+0x1a2>
 80044b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044ba:	d817      	bhi.n	80044ec <UART_SetConfig+0x1b4>
 80044bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044c0:	d011      	beq.n	80044e6 <UART_SetConfig+0x1ae>
 80044c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044c6:	d811      	bhi.n	80044ec <UART_SetConfig+0x1b4>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <UART_SetConfig+0x19c>
 80044cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044d0:	d006      	beq.n	80044e0 <UART_SetConfig+0x1a8>
 80044d2:	e00b      	b.n	80044ec <UART_SetConfig+0x1b4>
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e037      	b.n	800454a <UART_SetConfig+0x212>
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e034      	b.n	800454a <UART_SetConfig+0x212>
 80044e0:	2304      	movs	r3, #4
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e031      	b.n	800454a <UART_SetConfig+0x212>
 80044e6:	2308      	movs	r3, #8
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e02e      	b.n	800454a <UART_SetConfig+0x212>
 80044ec:	2310      	movs	r3, #16
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e02b      	b.n	800454a <UART_SetConfig+0x212>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <UART_SetConfig+0x28c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d124      	bne.n	8004546 <UART_SetConfig+0x20e>
 80044fc:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <UART_SetConfig+0x27c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004500:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004504:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004508:	d011      	beq.n	800452e <UART_SetConfig+0x1f6>
 800450a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800450e:	d817      	bhi.n	8004540 <UART_SetConfig+0x208>
 8004510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004514:	d011      	beq.n	800453a <UART_SetConfig+0x202>
 8004516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800451a:	d811      	bhi.n	8004540 <UART_SetConfig+0x208>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x1f0>
 8004520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004524:	d006      	beq.n	8004534 <UART_SetConfig+0x1fc>
 8004526:	e00b      	b.n	8004540 <UART_SetConfig+0x208>
 8004528:	2300      	movs	r3, #0
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e00d      	b.n	800454a <UART_SetConfig+0x212>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e00a      	b.n	800454a <UART_SetConfig+0x212>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e007      	b.n	800454a <UART_SetConfig+0x212>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e004      	b.n	800454a <UART_SetConfig+0x212>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e001      	b.n	800454a <UART_SetConfig+0x212>
 8004546:	2310      	movs	r3, #16
 8004548:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004552:	d16b      	bne.n	800462c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004554:	7ffb      	ldrb	r3, [r7, #31]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d838      	bhi.n	80045cc <UART_SetConfig+0x294>
 800455a:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <UART_SetConfig+0x228>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045cd 	.word	0x080045cd
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045cd 	.word	0x080045cd
 800457c:	080045cd 	.word	0x080045cd
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fe22 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e024      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fe40 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e020      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <UART_SetConfig+0x290>)
 8004596:	61bb      	str	r3, [r7, #24]
        break;
 8004598:	e01d      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fdb7 	bl	800310c <HAL_RCC_GetSysClockFreq>
 800459e:	61b8      	str	r0, [r7, #24]
        break;
 80045a0:	e019      	b.n	80045d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e015      	b.n	80045d6 <UART_SetConfig+0x29e>
 80045aa:	bf00      	nop
 80045ac:	efff69f3 	.word	0xefff69f3
 80045b0:	40013800 	.word	0x40013800
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40004400 	.word	0x40004400
 80045bc:	40004800 	.word	0x40004800
 80045c0:	40004c00 	.word	0x40004c00
 80045c4:	40005000 	.word	0x40005000
 80045c8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	77bb      	strb	r3, [r7, #30]
        break;
 80045d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d073      	beq.n	80046c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	005a      	lsls	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d916      	bls.n	8004626 <UART_SetConfig+0x2ee>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fe:	d212      	bcs.n	8004626 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f023 030f 	bic.w	r3, r3, #15
 8004608:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	b29a      	uxth	r2, r3
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	4313      	orrs	r3, r2
 800461a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	89fa      	ldrh	r2, [r7, #14]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e04e      	b.n	80046c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	77bb      	strb	r3, [r7, #30]
 800462a:	e04b      	b.n	80046c4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800462c:	7ffb      	ldrb	r3, [r7, #31]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d827      	bhi.n	8004682 <UART_SetConfig+0x34a>
 8004632:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <UART_SetConfig+0x300>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe fdb6 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fdd4 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004668:	61b8      	str	r0, [r7, #24]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <UART_SetConfig+0x3a4>)
 800466e:	61bb      	str	r3, [r7, #24]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe fd4b 	bl	800310c <HAL_RCC_GetSysClockFreq>
 8004676:	61b8      	str	r0, [r7, #24]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467e:	61bb      	str	r3, [r7, #24]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	77bb      	strb	r3, [r7, #30]
        break;
 800468a:	bf00      	nop
    }

    if (pclk != 0U)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d018      	beq.n	80046c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	085a      	lsrs	r2, r3, #1
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	441a      	add	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d909      	bls.n	80046c0 <UART_SetConfig+0x388>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b2:	d205      	bcs.n	80046c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	e001      	b.n	80046c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	007a1200 	.word	0x007a1200

080046e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047de:	d10a      	bne.n	80047f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b098      	sub	sp, #96	@ 0x60
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004834:	f7fc ffda 	bl	80017ec <HAL_GetTick>
 8004838:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b08      	cmp	r3, #8
 8004846:	d12e      	bne.n	80048a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f88c 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d021      	beq.n	80048a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004876:	653b      	str	r3, [r7, #80]	@ 0x50
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004880:	647b      	str	r3, [r7, #68]	@ 0x44
 8004882:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800488e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e6      	bne.n	8004862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e062      	b.n	800496c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d149      	bne.n	8004948 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f856 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d03c      	beq.n	8004948 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	623b      	str	r3, [r7, #32]
   return(result);
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004920:	61fa      	str	r2, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	617b      	str	r3, [r7, #20]
   return(result);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e011      	b.n	800496c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3758      	adds	r7, #88	@ 0x58
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004984:	e04f      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800498c:	d04b      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fc ff2d 	bl	80017ec <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e04e      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d037      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d034      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d031      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d110      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2208      	movs	r2, #8
 80049d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f838 	bl	8004a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2208      	movs	r2, #8
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e029      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a00:	d111      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f81e 	bl	8004a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0a0      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b095      	sub	sp, #84	@ 0x54
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d118      	bne.n	8004af6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f023 0310 	bic.w	r3, r3, #16
 8004ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	613b      	str	r3, [r7, #16]
   return(result);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b0a:	bf00      	nop
 8004b0c:	3754      	adds	r7, #84	@ 0x54
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <__cvt>:
 8004b16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1a:	ec57 6b10 	vmov	r6, r7, d0
 8004b1e:	2f00      	cmp	r7, #0
 8004b20:	460c      	mov	r4, r1
 8004b22:	4619      	mov	r1, r3
 8004b24:	463b      	mov	r3, r7
 8004b26:	bfbb      	ittet	lt
 8004b28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b2c:	461f      	movlt	r7, r3
 8004b2e:	2300      	movge	r3, #0
 8004b30:	232d      	movlt	r3, #45	@ 0x2d
 8004b32:	700b      	strb	r3, [r1, #0]
 8004b34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b3a:	4691      	mov	r9, r2
 8004b3c:	f023 0820 	bic.w	r8, r3, #32
 8004b40:	bfbc      	itt	lt
 8004b42:	4632      	movlt	r2, r6
 8004b44:	4616      	movlt	r6, r2
 8004b46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b4a:	d005      	beq.n	8004b58 <__cvt+0x42>
 8004b4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b50:	d100      	bne.n	8004b54 <__cvt+0x3e>
 8004b52:	3401      	adds	r4, #1
 8004b54:	2102      	movs	r1, #2
 8004b56:	e000      	b.n	8004b5a <__cvt+0x44>
 8004b58:	2103      	movs	r1, #3
 8004b5a:	ab03      	add	r3, sp, #12
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	ab02      	add	r3, sp, #8
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	ec47 6b10 	vmov	d0, r6, r7
 8004b66:	4653      	mov	r3, sl
 8004b68:	4622      	mov	r2, r4
 8004b6a:	f000 fde9 	bl	8005740 <_dtoa_r>
 8004b6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b72:	4605      	mov	r5, r0
 8004b74:	d119      	bne.n	8004baa <__cvt+0x94>
 8004b76:	f019 0f01 	tst.w	r9, #1
 8004b7a:	d00e      	beq.n	8004b9a <__cvt+0x84>
 8004b7c:	eb00 0904 	add.w	r9, r0, r4
 8004b80:	2200      	movs	r2, #0
 8004b82:	2300      	movs	r3, #0
 8004b84:	4630      	mov	r0, r6
 8004b86:	4639      	mov	r1, r7
 8004b88:	f7fb ffa6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b8c:	b108      	cbz	r0, 8004b92 <__cvt+0x7c>
 8004b8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b92:	2230      	movs	r2, #48	@ 0x30
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	454b      	cmp	r3, r9
 8004b98:	d31e      	bcc.n	8004bd8 <__cvt+0xc2>
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b9e:	1b5b      	subs	r3, r3, r5
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	b004      	add	sp, #16
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bae:	eb00 0904 	add.w	r9, r0, r4
 8004bb2:	d1e5      	bne.n	8004b80 <__cvt+0x6a>
 8004bb4:	7803      	ldrb	r3, [r0, #0]
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d10a      	bne.n	8004bd0 <__cvt+0xba>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb ff89 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bc6:	b918      	cbnz	r0, 8004bd0 <__cvt+0xba>
 8004bc8:	f1c4 0401 	rsb	r4, r4, #1
 8004bcc:	f8ca 4000 	str.w	r4, [sl]
 8004bd0:	f8da 3000 	ldr.w	r3, [sl]
 8004bd4:	4499      	add	r9, r3
 8004bd6:	e7d3      	b.n	8004b80 <__cvt+0x6a>
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	9103      	str	r1, [sp, #12]
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e7d9      	b.n	8004b94 <__cvt+0x7e>

08004be0 <__exponent>:
 8004be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be2:	2900      	cmp	r1, #0
 8004be4:	bfba      	itte	lt
 8004be6:	4249      	neglt	r1, r1
 8004be8:	232d      	movlt	r3, #45	@ 0x2d
 8004bea:	232b      	movge	r3, #43	@ 0x2b
 8004bec:	2909      	cmp	r1, #9
 8004bee:	7002      	strb	r2, [r0, #0]
 8004bf0:	7043      	strb	r3, [r0, #1]
 8004bf2:	dd29      	ble.n	8004c48 <__exponent+0x68>
 8004bf4:	f10d 0307 	add.w	r3, sp, #7
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	270a      	movs	r7, #10
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c02:	fb07 1416 	mls	r4, r7, r6, r1
 8004c06:	3430      	adds	r4, #48	@ 0x30
 8004c08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	2c63      	cmp	r4, #99	@ 0x63
 8004c10:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004c14:	4631      	mov	r1, r6
 8004c16:	dcf1      	bgt.n	8004bfc <__exponent+0x1c>
 8004c18:	3130      	adds	r1, #48	@ 0x30
 8004c1a:	1e94      	subs	r4, r2, #2
 8004c1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c20:	1c41      	adds	r1, r0, #1
 8004c22:	4623      	mov	r3, r4
 8004c24:	42ab      	cmp	r3, r5
 8004c26:	d30a      	bcc.n	8004c3e <__exponent+0x5e>
 8004c28:	f10d 0309 	add.w	r3, sp, #9
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	42ac      	cmp	r4, r5
 8004c30:	bf88      	it	hi
 8004c32:	2300      	movhi	r3, #0
 8004c34:	3302      	adds	r3, #2
 8004c36:	4403      	add	r3, r0
 8004c38:	1a18      	subs	r0, r3, r0
 8004c3a:	b003      	add	sp, #12
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c46:	e7ed      	b.n	8004c24 <__exponent+0x44>
 8004c48:	2330      	movs	r3, #48	@ 0x30
 8004c4a:	3130      	adds	r1, #48	@ 0x30
 8004c4c:	7083      	strb	r3, [r0, #2]
 8004c4e:	70c1      	strb	r1, [r0, #3]
 8004c50:	1d03      	adds	r3, r0, #4
 8004c52:	e7f1      	b.n	8004c38 <__exponent+0x58>

08004c54 <_printf_float>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	b08d      	sub	sp, #52	@ 0x34
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c60:	4616      	mov	r6, r2
 8004c62:	461f      	mov	r7, r3
 8004c64:	4605      	mov	r5, r0
 8004c66:	f000 fcb1 	bl	80055cc <_localeconv_r>
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fb fb06 	bl	8000280 <strlen>
 8004c74:	2300      	movs	r3, #0
 8004c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c78:	f8d8 3000 	ldr.w	r3, [r8]
 8004c7c:	9005      	str	r0, [sp, #20]
 8004c7e:	3307      	adds	r3, #7
 8004c80:	f023 0307 	bic.w	r3, r3, #7
 8004c84:	f103 0208 	add.w	r2, r3, #8
 8004c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8004c90:	f8c8 2000 	str.w	r2, [r8]
 8004c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c9c:	9307      	str	r3, [sp, #28]
 8004c9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ca2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004caa:	4b9c      	ldr	r3, [pc, #624]	@ (8004f1c <_printf_float+0x2c8>)
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cb0:	f7fb ff44 	bl	8000b3c <__aeabi_dcmpun>
 8004cb4:	bb70      	cbnz	r0, 8004d14 <_printf_float+0xc0>
 8004cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cba:	4b98      	ldr	r3, [pc, #608]	@ (8004f1c <_printf_float+0x2c8>)
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cc0:	f7fb ff1e 	bl	8000b00 <__aeabi_dcmple>
 8004cc4:	bb30      	cbnz	r0, 8004d14 <_printf_float+0xc0>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb ff0d 	bl	8000aec <__aeabi_dcmplt>
 8004cd2:	b110      	cbz	r0, 8004cda <_printf_float+0x86>
 8004cd4:	232d      	movs	r3, #45	@ 0x2d
 8004cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cda:	4a91      	ldr	r2, [pc, #580]	@ (8004f20 <_printf_float+0x2cc>)
 8004cdc:	4b91      	ldr	r3, [pc, #580]	@ (8004f24 <_printf_float+0x2d0>)
 8004cde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ce2:	bf94      	ite	ls
 8004ce4:	4690      	movls	r8, r2
 8004ce6:	4698      	movhi	r8, r3
 8004ce8:	2303      	movs	r3, #3
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	f02b 0304 	bic.w	r3, fp, #4
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	f04f 0900 	mov.w	r9, #0
 8004cf6:	9700      	str	r7, [sp, #0]
 8004cf8:	4633      	mov	r3, r6
 8004cfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 f9d2 	bl	80050a8 <_printf_common>
 8004d04:	3001      	adds	r0, #1
 8004d06:	f040 808d 	bne.w	8004e24 <_printf_float+0x1d0>
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d0e:	b00d      	add	sp, #52	@ 0x34
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	f7fb ff0e 	bl	8000b3c <__aeabi_dcmpun>
 8004d20:	b140      	cbz	r0, 8004d34 <_printf_float+0xe0>
 8004d22:	464b      	mov	r3, r9
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bfbc      	itt	lt
 8004d28:	232d      	movlt	r3, #45	@ 0x2d
 8004d2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f28 <_printf_float+0x2d4>)
 8004d30:	4b7e      	ldr	r3, [pc, #504]	@ (8004f2c <_printf_float+0x2d8>)
 8004d32:	e7d4      	b.n	8004cde <_printf_float+0x8a>
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d3a:	9206      	str	r2, [sp, #24]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	d13b      	bne.n	8004db8 <_printf_float+0x164>
 8004d40:	2306      	movs	r3, #6
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004d50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d54:	ab09      	add	r3, sp, #36	@ 0x24
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	ec49 8b10 	vmov	d0, r8, r9
 8004d5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d62:	4628      	mov	r0, r5
 8004d64:	f7ff fed7 	bl	8004b16 <__cvt>
 8004d68:	9b06      	ldr	r3, [sp, #24]
 8004d6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d6c:	2b47      	cmp	r3, #71	@ 0x47
 8004d6e:	4680      	mov	r8, r0
 8004d70:	d129      	bne.n	8004dc6 <_printf_float+0x172>
 8004d72:	1cc8      	adds	r0, r1, #3
 8004d74:	db02      	blt.n	8004d7c <_printf_float+0x128>
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	dd41      	ble.n	8004e00 <_printf_float+0x1ac>
 8004d7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d80:	fa5f fa8a 	uxtb.w	sl, sl
 8004d84:	3901      	subs	r1, #1
 8004d86:	4652      	mov	r2, sl
 8004d88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d8e:	f7ff ff27 	bl	8004be0 <__exponent>
 8004d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d94:	1813      	adds	r3, r2, r0
 8004d96:	2a01      	cmp	r2, #1
 8004d98:	4681      	mov	r9, r0
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	dc02      	bgt.n	8004da4 <_printf_float+0x150>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	07d2      	lsls	r2, r2, #31
 8004da2:	d501      	bpl.n	8004da8 <_printf_float+0x154>
 8004da4:	3301      	adds	r3, #1
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0a2      	beq.n	8004cf6 <_printf_float+0xa2>
 8004db0:	232d      	movs	r3, #45	@ 0x2d
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db6:	e79e      	b.n	8004cf6 <_printf_float+0xa2>
 8004db8:	9a06      	ldr	r2, [sp, #24]
 8004dba:	2a47      	cmp	r2, #71	@ 0x47
 8004dbc:	d1c2      	bne.n	8004d44 <_printf_float+0xf0>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1c0      	bne.n	8004d44 <_printf_float+0xf0>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7bd      	b.n	8004d42 <_printf_float+0xee>
 8004dc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dca:	d9db      	bls.n	8004d84 <_printf_float+0x130>
 8004dcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004dd0:	d118      	bne.n	8004e04 <_printf_float+0x1b0>
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	dd0b      	ble.n	8004df0 <_printf_float+0x19c>
 8004dd8:	6121      	str	r1, [r4, #16]
 8004dda:	b913      	cbnz	r3, 8004de2 <_printf_float+0x18e>
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	07d0      	lsls	r0, r2, #31
 8004de0:	d502      	bpl.n	8004de8 <_printf_float+0x194>
 8004de2:	3301      	adds	r3, #1
 8004de4:	440b      	add	r3, r1
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004dea:	f04f 0900 	mov.w	r9, #0
 8004dee:	e7db      	b.n	8004da8 <_printf_float+0x154>
 8004df0:	b913      	cbnz	r3, 8004df8 <_printf_float+0x1a4>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	07d2      	lsls	r2, r2, #31
 8004df6:	d501      	bpl.n	8004dfc <_printf_float+0x1a8>
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7f4      	b.n	8004de6 <_printf_float+0x192>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e7f2      	b.n	8004de6 <_printf_float+0x192>
 8004e00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e06:	4299      	cmp	r1, r3
 8004e08:	db05      	blt.n	8004e16 <_printf_float+0x1c2>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	6121      	str	r1, [r4, #16]
 8004e0e:	07d8      	lsls	r0, r3, #31
 8004e10:	d5ea      	bpl.n	8004de8 <_printf_float+0x194>
 8004e12:	1c4b      	adds	r3, r1, #1
 8004e14:	e7e7      	b.n	8004de6 <_printf_float+0x192>
 8004e16:	2900      	cmp	r1, #0
 8004e18:	bfd4      	ite	le
 8004e1a:	f1c1 0202 	rsble	r2, r1, #2
 8004e1e:	2201      	movgt	r2, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	e7e0      	b.n	8004de6 <_printf_float+0x192>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	055a      	lsls	r2, r3, #21
 8004e28:	d407      	bmi.n	8004e3a <_printf_float+0x1e6>
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	d12b      	bne.n	8004e90 <_printf_float+0x23c>
 8004e38:	e767      	b.n	8004d0a <_printf_float+0xb6>
 8004e3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e3e:	f240 80dd 	bls.w	8004ffc <_printf_float+0x3a8>
 8004e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e46:	2200      	movs	r2, #0
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f7fb fe45 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d033      	beq.n	8004eba <_printf_float+0x266>
 8004e52:	4a37      	ldr	r2, [pc, #220]	@ (8004f30 <_printf_float+0x2dc>)
 8004e54:	2301      	movs	r3, #1
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f af54 	beq.w	8004d0a <_printf_float+0xb6>
 8004e62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e66:	4543      	cmp	r3, r8
 8004e68:	db02      	blt.n	8004e70 <_printf_float+0x21c>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	07d8      	lsls	r0, r3, #31
 8004e6e:	d50f      	bpl.n	8004e90 <_printf_float+0x23c>
 8004e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e74:	4631      	mov	r1, r6
 8004e76:	4628      	mov	r0, r5
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	f43f af45 	beq.w	8004d0a <_printf_float+0xb6>
 8004e80:	f04f 0900 	mov.w	r9, #0
 8004e84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004e88:	f104 0a1a 	add.w	sl, r4, #26
 8004e8c:	45c8      	cmp	r8, r9
 8004e8e:	dc09      	bgt.n	8004ea4 <_printf_float+0x250>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	079b      	lsls	r3, r3, #30
 8004e94:	f100 8103 	bmi.w	800509e <_printf_float+0x44a>
 8004e98:	68e0      	ldr	r0, [r4, #12]
 8004e9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e9c:	4298      	cmp	r0, r3
 8004e9e:	bfb8      	it	lt
 8004ea0:	4618      	movlt	r0, r3
 8004ea2:	e734      	b.n	8004d0e <_printf_float+0xba>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	47b8      	blx	r7
 8004eae:	3001      	adds	r0, #1
 8004eb0:	f43f af2b 	beq.w	8004d0a <_printf_float+0xb6>
 8004eb4:	f109 0901 	add.w	r9, r9, #1
 8004eb8:	e7e8      	b.n	8004e8c <_printf_float+0x238>
 8004eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dc39      	bgt.n	8004f34 <_printf_float+0x2e0>
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <_printf_float+0x2dc>)
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f af1d 	beq.w	8004d0a <_printf_float+0xb6>
 8004ed0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004ed4:	ea59 0303 	orrs.w	r3, r9, r3
 8004ed8:	d102      	bne.n	8004ee0 <_printf_float+0x28c>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	07d9      	lsls	r1, r3, #31
 8004ede:	d5d7      	bpl.n	8004e90 <_printf_float+0x23c>
 8004ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b8      	blx	r7
 8004eea:	3001      	adds	r0, #1
 8004eec:	f43f af0d 	beq.w	8004d0a <_printf_float+0xb6>
 8004ef0:	f04f 0a00 	mov.w	sl, #0
 8004ef4:	f104 0b1a 	add.w	fp, r4, #26
 8004ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004efa:	425b      	negs	r3, r3
 8004efc:	4553      	cmp	r3, sl
 8004efe:	dc01      	bgt.n	8004f04 <_printf_float+0x2b0>
 8004f00:	464b      	mov	r3, r9
 8004f02:	e793      	b.n	8004e2c <_printf_float+0x1d8>
 8004f04:	2301      	movs	r3, #1
 8004f06:	465a      	mov	r2, fp
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	f43f aefb 	beq.w	8004d0a <_printf_float+0xb6>
 8004f14:	f10a 0a01 	add.w	sl, sl, #1
 8004f18:	e7ee      	b.n	8004ef8 <_printf_float+0x2a4>
 8004f1a:	bf00      	nop
 8004f1c:	7fefffff 	.word	0x7fefffff
 8004f20:	08007878 	.word	0x08007878
 8004f24:	0800787c 	.word	0x0800787c
 8004f28:	08007880 	.word	0x08007880
 8004f2c:	08007884 	.word	0x08007884
 8004f30:	08007888 	.word	0x08007888
 8004f34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f3a:	4553      	cmp	r3, sl
 8004f3c:	bfa8      	it	ge
 8004f3e:	4653      	movge	r3, sl
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	4699      	mov	r9, r3
 8004f44:	dc36      	bgt.n	8004fb4 <_printf_float+0x360>
 8004f46:	f04f 0b00 	mov.w	fp, #0
 8004f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4e:	f104 021a 	add.w	r2, r4, #26
 8004f52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f54:	9306      	str	r3, [sp, #24]
 8004f56:	eba3 0309 	sub.w	r3, r3, r9
 8004f5a:	455b      	cmp	r3, fp
 8004f5c:	dc31      	bgt.n	8004fc2 <_printf_float+0x36e>
 8004f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f60:	459a      	cmp	sl, r3
 8004f62:	dc3a      	bgt.n	8004fda <_printf_float+0x386>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07da      	lsls	r2, r3, #31
 8004f68:	d437      	bmi.n	8004fda <_printf_float+0x386>
 8004f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f6c:	ebaa 0903 	sub.w	r9, sl, r3
 8004f70:	9b06      	ldr	r3, [sp, #24]
 8004f72:	ebaa 0303 	sub.w	r3, sl, r3
 8004f76:	4599      	cmp	r9, r3
 8004f78:	bfa8      	it	ge
 8004f7a:	4699      	movge	r9, r3
 8004f7c:	f1b9 0f00 	cmp.w	r9, #0
 8004f80:	dc33      	bgt.n	8004fea <_printf_float+0x396>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f8a:	f104 0b1a 	add.w	fp, r4, #26
 8004f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f90:	ebaa 0303 	sub.w	r3, sl, r3
 8004f94:	eba3 0309 	sub.w	r3, r3, r9
 8004f98:	4543      	cmp	r3, r8
 8004f9a:	f77f af79 	ble.w	8004e90 <_printf_float+0x23c>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	465a      	mov	r2, fp
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f43f aeae 	beq.w	8004d0a <_printf_float+0xb6>
 8004fae:	f108 0801 	add.w	r8, r8, #1
 8004fb2:	e7ec      	b.n	8004f8e <_printf_float+0x33a>
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d1c2      	bne.n	8004f46 <_printf_float+0x2f2>
 8004fc0:	e6a3      	b.n	8004d0a <_printf_float+0xb6>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	9206      	str	r2, [sp, #24]
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae9c 	beq.w	8004d0a <_printf_float+0xb6>
 8004fd2:	9a06      	ldr	r2, [sp, #24]
 8004fd4:	f10b 0b01 	add.w	fp, fp, #1
 8004fd8:	e7bb      	b.n	8004f52 <_printf_float+0x2fe>
 8004fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d1c0      	bne.n	8004f6a <_printf_float+0x316>
 8004fe8:	e68f      	b.n	8004d0a <_printf_float+0xb6>
 8004fea:	9a06      	ldr	r2, [sp, #24]
 8004fec:	464b      	mov	r3, r9
 8004fee:	4442      	add	r2, r8
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d1c3      	bne.n	8004f82 <_printf_float+0x32e>
 8004ffa:	e686      	b.n	8004d0a <_printf_float+0xb6>
 8004ffc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005000:	f1ba 0f01 	cmp.w	sl, #1
 8005004:	dc01      	bgt.n	800500a <_printf_float+0x3b6>
 8005006:	07db      	lsls	r3, r3, #31
 8005008:	d536      	bpl.n	8005078 <_printf_float+0x424>
 800500a:	2301      	movs	r3, #1
 800500c:	4642      	mov	r2, r8
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae78 	beq.w	8004d0a <_printf_float+0xb6>
 800501a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	f43f ae70 	beq.w	8004d0a <_printf_float+0xb6>
 800502a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800502e:	2200      	movs	r2, #0
 8005030:	2300      	movs	r3, #0
 8005032:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005036:	f7fb fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800503a:	b9c0      	cbnz	r0, 800506e <_printf_float+0x41a>
 800503c:	4653      	mov	r3, sl
 800503e:	f108 0201 	add.w	r2, r8, #1
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	d10c      	bne.n	8005066 <_printf_float+0x412>
 800504c:	e65d      	b.n	8004d0a <_printf_float+0xb6>
 800504e:	2301      	movs	r3, #1
 8005050:	465a      	mov	r2, fp
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	f43f ae56 	beq.w	8004d0a <_printf_float+0xb6>
 800505e:	f108 0801 	add.w	r8, r8, #1
 8005062:	45d0      	cmp	r8, sl
 8005064:	dbf3      	blt.n	800504e <_printf_float+0x3fa>
 8005066:	464b      	mov	r3, r9
 8005068:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800506c:	e6df      	b.n	8004e2e <_printf_float+0x1da>
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	f104 0b1a 	add.w	fp, r4, #26
 8005076:	e7f4      	b.n	8005062 <_printf_float+0x40e>
 8005078:	2301      	movs	r3, #1
 800507a:	4642      	mov	r2, r8
 800507c:	e7e1      	b.n	8005042 <_printf_float+0x3ee>
 800507e:	2301      	movs	r3, #1
 8005080:	464a      	mov	r2, r9
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	f43f ae3e 	beq.w	8004d0a <_printf_float+0xb6>
 800508e:	f108 0801 	add.w	r8, r8, #1
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005096:	1a5b      	subs	r3, r3, r1
 8005098:	4543      	cmp	r3, r8
 800509a:	dcf0      	bgt.n	800507e <_printf_float+0x42a>
 800509c:	e6fc      	b.n	8004e98 <_printf_float+0x244>
 800509e:	f04f 0800 	mov.w	r8, #0
 80050a2:	f104 0919 	add.w	r9, r4, #25
 80050a6:	e7f4      	b.n	8005092 <_printf_float+0x43e>

080050a8 <_printf_common>:
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	4698      	mov	r8, r3
 80050b0:	688a      	ldr	r2, [r1, #8]
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bfb8      	it	lt
 80050bc:	4613      	movlt	r3, r2
 80050be:	6033      	str	r3, [r6, #0]
 80050c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050c4:	4607      	mov	r7, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	b10a      	cbz	r2, 80050ce <_printf_common+0x26>
 80050ca:	3301      	adds	r3, #1
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	0699      	lsls	r1, r3, #26
 80050d2:	bf42      	ittt	mi
 80050d4:	6833      	ldrmi	r3, [r6, #0]
 80050d6:	3302      	addmi	r3, #2
 80050d8:	6033      	strmi	r3, [r6, #0]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d106      	bne.n	80050f0 <_printf_common+0x48>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	6832      	ldr	r2, [r6, #0]
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	42ab      	cmp	r3, r5
 80050ee:	dc26      	bgt.n	800513e <_printf_common+0x96>
 80050f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	3b00      	subs	r3, #0
 80050f8:	bf18      	it	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	0692      	lsls	r2, r2, #26
 80050fe:	d42b      	bmi.n	8005158 <_printf_common+0xb0>
 8005100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005104:	4641      	mov	r1, r8
 8005106:	4638      	mov	r0, r7
 8005108:	47c8      	blx	r9
 800510a:	3001      	adds	r0, #1
 800510c:	d01e      	beq.n	800514c <_printf_common+0xa4>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	6922      	ldr	r2, [r4, #16]
 8005112:	f003 0306 	and.w	r3, r3, #6
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf02      	ittt	eq
 800511a:	68e5      	ldreq	r5, [r4, #12]
 800511c:	6833      	ldreq	r3, [r6, #0]
 800511e:	1aed      	subeq	r5, r5, r3
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	bf0c      	ite	eq
 8005124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005128:	2500      	movne	r5, #0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfc4      	itt	gt
 800512e:	1a9b      	subgt	r3, r3, r2
 8005130:	18ed      	addgt	r5, r5, r3
 8005132:	2600      	movs	r6, #0
 8005134:	341a      	adds	r4, #26
 8005136:	42b5      	cmp	r5, r6
 8005138:	d11a      	bne.n	8005170 <_printf_common+0xc8>
 800513a:	2000      	movs	r0, #0
 800513c:	e008      	b.n	8005150 <_printf_common+0xa8>
 800513e:	2301      	movs	r3, #1
 8005140:	4652      	mov	r2, sl
 8005142:	4641      	mov	r1, r8
 8005144:	4638      	mov	r0, r7
 8005146:	47c8      	blx	r9
 8005148:	3001      	adds	r0, #1
 800514a:	d103      	bne.n	8005154 <_printf_common+0xac>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	3501      	adds	r5, #1
 8005156:	e7c6      	b.n	80050e6 <_printf_common+0x3e>
 8005158:	18e1      	adds	r1, r4, r3
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	2030      	movs	r0, #48	@ 0x30
 800515e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005162:	4422      	add	r2, r4
 8005164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800516c:	3302      	adds	r3, #2
 800516e:	e7c7      	b.n	8005100 <_printf_common+0x58>
 8005170:	2301      	movs	r3, #1
 8005172:	4622      	mov	r2, r4
 8005174:	4641      	mov	r1, r8
 8005176:	4638      	mov	r0, r7
 8005178:	47c8      	blx	r9
 800517a:	3001      	adds	r0, #1
 800517c:	d0e6      	beq.n	800514c <_printf_common+0xa4>
 800517e:	3601      	adds	r6, #1
 8005180:	e7d9      	b.n	8005136 <_printf_common+0x8e>
	...

08005184 <_printf_i>:
 8005184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	7e0f      	ldrb	r7, [r1, #24]
 800518a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800518c:	2f78      	cmp	r7, #120	@ 0x78
 800518e:	4691      	mov	r9, r2
 8005190:	4680      	mov	r8, r0
 8005192:	460c      	mov	r4, r1
 8005194:	469a      	mov	sl, r3
 8005196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800519a:	d807      	bhi.n	80051ac <_printf_i+0x28>
 800519c:	2f62      	cmp	r7, #98	@ 0x62
 800519e:	d80a      	bhi.n	80051b6 <_printf_i+0x32>
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	f000 80d2 	beq.w	800534a <_printf_i+0x1c6>
 80051a6:	2f58      	cmp	r7, #88	@ 0x58
 80051a8:	f000 80b9 	beq.w	800531e <_printf_i+0x19a>
 80051ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051b4:	e03a      	b.n	800522c <_printf_i+0xa8>
 80051b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ba:	2b15      	cmp	r3, #21
 80051bc:	d8f6      	bhi.n	80051ac <_printf_i+0x28>
 80051be:	a101      	add	r1, pc, #4	@ (adr r1, 80051c4 <_printf_i+0x40>)
 80051c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	08005231 	.word	0x08005231
 80051cc:	080051ad 	.word	0x080051ad
 80051d0:	080051ad 	.word	0x080051ad
 80051d4:	080051ad 	.word	0x080051ad
 80051d8:	080051ad 	.word	0x080051ad
 80051dc:	08005231 	.word	0x08005231
 80051e0:	080051ad 	.word	0x080051ad
 80051e4:	080051ad 	.word	0x080051ad
 80051e8:	080051ad 	.word	0x080051ad
 80051ec:	080051ad 	.word	0x080051ad
 80051f0:	08005331 	.word	0x08005331
 80051f4:	0800525b 	.word	0x0800525b
 80051f8:	080052eb 	.word	0x080052eb
 80051fc:	080051ad 	.word	0x080051ad
 8005200:	080051ad 	.word	0x080051ad
 8005204:	08005353 	.word	0x08005353
 8005208:	080051ad 	.word	0x080051ad
 800520c:	0800525b 	.word	0x0800525b
 8005210:	080051ad 	.word	0x080051ad
 8005214:	080051ad 	.word	0x080051ad
 8005218:	080052f3 	.word	0x080052f3
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6032      	str	r2, [r6, #0]
 8005224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800522c:	2301      	movs	r3, #1
 800522e:	e09d      	b.n	800536c <_printf_i+0x1e8>
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	1d19      	adds	r1, r3, #4
 8005236:	6031      	str	r1, [r6, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	d501      	bpl.n	8005240 <_printf_i+0xbc>
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	e003      	b.n	8005248 <_printf_i+0xc4>
 8005240:	0645      	lsls	r5, r0, #25
 8005242:	d5fb      	bpl.n	800523c <_printf_i+0xb8>
 8005244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005248:	2d00      	cmp	r5, #0
 800524a:	da03      	bge.n	8005254 <_printf_i+0xd0>
 800524c:	232d      	movs	r3, #45	@ 0x2d
 800524e:	426d      	negs	r5, r5
 8005250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005254:	4859      	ldr	r0, [pc, #356]	@ (80053bc <_printf_i+0x238>)
 8005256:	230a      	movs	r3, #10
 8005258:	e011      	b.n	800527e <_printf_i+0xfa>
 800525a:	6821      	ldr	r1, [r4, #0]
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	0608      	lsls	r0, r1, #24
 8005260:	f853 5b04 	ldr.w	r5, [r3], #4
 8005264:	d402      	bmi.n	800526c <_printf_i+0xe8>
 8005266:	0649      	lsls	r1, r1, #25
 8005268:	bf48      	it	mi
 800526a:	b2ad      	uxthmi	r5, r5
 800526c:	2f6f      	cmp	r7, #111	@ 0x6f
 800526e:	4853      	ldr	r0, [pc, #332]	@ (80053bc <_printf_i+0x238>)
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	bf14      	ite	ne
 8005274:	230a      	movne	r3, #10
 8005276:	2308      	moveq	r3, #8
 8005278:	2100      	movs	r1, #0
 800527a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800527e:	6866      	ldr	r6, [r4, #4]
 8005280:	60a6      	str	r6, [r4, #8]
 8005282:	2e00      	cmp	r6, #0
 8005284:	bfa2      	ittt	ge
 8005286:	6821      	ldrge	r1, [r4, #0]
 8005288:	f021 0104 	bicge.w	r1, r1, #4
 800528c:	6021      	strge	r1, [r4, #0]
 800528e:	b90d      	cbnz	r5, 8005294 <_printf_i+0x110>
 8005290:	2e00      	cmp	r6, #0
 8005292:	d04b      	beq.n	800532c <_printf_i+0x1a8>
 8005294:	4616      	mov	r6, r2
 8005296:	fbb5 f1f3 	udiv	r1, r5, r3
 800529a:	fb03 5711 	mls	r7, r3, r1, r5
 800529e:	5dc7      	ldrb	r7, [r0, r7]
 80052a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052a4:	462f      	mov	r7, r5
 80052a6:	42bb      	cmp	r3, r7
 80052a8:	460d      	mov	r5, r1
 80052aa:	d9f4      	bls.n	8005296 <_printf_i+0x112>
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d10b      	bne.n	80052c8 <_printf_i+0x144>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	07df      	lsls	r7, r3, #31
 80052b4:	d508      	bpl.n	80052c8 <_printf_i+0x144>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6861      	ldr	r1, [r4, #4]
 80052ba:	4299      	cmp	r1, r3
 80052bc:	bfde      	ittt	le
 80052be:	2330      	movle	r3, #48	@ 0x30
 80052c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80052c8:	1b92      	subs	r2, r2, r6
 80052ca:	6122      	str	r2, [r4, #16]
 80052cc:	f8cd a000 	str.w	sl, [sp]
 80052d0:	464b      	mov	r3, r9
 80052d2:	aa03      	add	r2, sp, #12
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff fee6 	bl	80050a8 <_printf_common>
 80052dc:	3001      	adds	r0, #1
 80052de:	d14a      	bne.n	8005376 <_printf_i+0x1f2>
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052e4:	b004      	add	sp, #16
 80052e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f043 0320 	orr.w	r3, r3, #32
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	4833      	ldr	r0, [pc, #204]	@ (80053c0 <_printf_i+0x23c>)
 80052f4:	2778      	movs	r7, #120	@ 0x78
 80052f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6831      	ldr	r1, [r6, #0]
 80052fe:	061f      	lsls	r7, r3, #24
 8005300:	f851 5b04 	ldr.w	r5, [r1], #4
 8005304:	d402      	bmi.n	800530c <_printf_i+0x188>
 8005306:	065f      	lsls	r7, r3, #25
 8005308:	bf48      	it	mi
 800530a:	b2ad      	uxthmi	r5, r5
 800530c:	6031      	str	r1, [r6, #0]
 800530e:	07d9      	lsls	r1, r3, #31
 8005310:	bf44      	itt	mi
 8005312:	f043 0320 	orrmi.w	r3, r3, #32
 8005316:	6023      	strmi	r3, [r4, #0]
 8005318:	b11d      	cbz	r5, 8005322 <_printf_i+0x19e>
 800531a:	2310      	movs	r3, #16
 800531c:	e7ac      	b.n	8005278 <_printf_i+0xf4>
 800531e:	4827      	ldr	r0, [pc, #156]	@ (80053bc <_printf_i+0x238>)
 8005320:	e7e9      	b.n	80052f6 <_printf_i+0x172>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	f023 0320 	bic.w	r3, r3, #32
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	e7f6      	b.n	800531a <_printf_i+0x196>
 800532c:	4616      	mov	r6, r2
 800532e:	e7bd      	b.n	80052ac <_printf_i+0x128>
 8005330:	6833      	ldr	r3, [r6, #0]
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	6961      	ldr	r1, [r4, #20]
 8005336:	1d18      	adds	r0, r3, #4
 8005338:	6030      	str	r0, [r6, #0]
 800533a:	062e      	lsls	r6, r5, #24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	d501      	bpl.n	8005344 <_printf_i+0x1c0>
 8005340:	6019      	str	r1, [r3, #0]
 8005342:	e002      	b.n	800534a <_printf_i+0x1c6>
 8005344:	0668      	lsls	r0, r5, #25
 8005346:	d5fb      	bpl.n	8005340 <_printf_i+0x1bc>
 8005348:	8019      	strh	r1, [r3, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	4616      	mov	r6, r2
 8005350:	e7bc      	b.n	80052cc <_printf_i+0x148>
 8005352:	6833      	ldr	r3, [r6, #0]
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	6032      	str	r2, [r6, #0]
 8005358:	681e      	ldr	r6, [r3, #0]
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	2100      	movs	r1, #0
 800535e:	4630      	mov	r0, r6
 8005360:	f7fa ff3e 	bl	80001e0 <memchr>
 8005364:	b108      	cbz	r0, 800536a <_printf_i+0x1e6>
 8005366:	1b80      	subs	r0, r0, r6
 8005368:	6060      	str	r0, [r4, #4]
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	2300      	movs	r3, #0
 8005370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005374:	e7aa      	b.n	80052cc <_printf_i+0x148>
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	4632      	mov	r2, r6
 800537a:	4649      	mov	r1, r9
 800537c:	4640      	mov	r0, r8
 800537e:	47d0      	blx	sl
 8005380:	3001      	adds	r0, #1
 8005382:	d0ad      	beq.n	80052e0 <_printf_i+0x15c>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	079b      	lsls	r3, r3, #30
 8005388:	d413      	bmi.n	80053b2 <_printf_i+0x22e>
 800538a:	68e0      	ldr	r0, [r4, #12]
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	4298      	cmp	r0, r3
 8005390:	bfb8      	it	lt
 8005392:	4618      	movlt	r0, r3
 8005394:	e7a6      	b.n	80052e4 <_printf_i+0x160>
 8005396:	2301      	movs	r3, #1
 8005398:	4632      	mov	r2, r6
 800539a:	4649      	mov	r1, r9
 800539c:	4640      	mov	r0, r8
 800539e:	47d0      	blx	sl
 80053a0:	3001      	adds	r0, #1
 80053a2:	d09d      	beq.n	80052e0 <_printf_i+0x15c>
 80053a4:	3501      	adds	r5, #1
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	9903      	ldr	r1, [sp, #12]
 80053aa:	1a5b      	subs	r3, r3, r1
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	dcf2      	bgt.n	8005396 <_printf_i+0x212>
 80053b0:	e7eb      	b.n	800538a <_printf_i+0x206>
 80053b2:	2500      	movs	r5, #0
 80053b4:	f104 0619 	add.w	r6, r4, #25
 80053b8:	e7f5      	b.n	80053a6 <_printf_i+0x222>
 80053ba:	bf00      	nop
 80053bc:	0800788a 	.word	0x0800788a
 80053c0:	0800789b 	.word	0x0800789b

080053c4 <std>:
 80053c4:	2300      	movs	r3, #0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	4604      	mov	r4, r0
 80053ca:	e9c0 3300 	strd	r3, r3, [r0]
 80053ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053d2:	6083      	str	r3, [r0, #8]
 80053d4:	8181      	strh	r1, [r0, #12]
 80053d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80053d8:	81c2      	strh	r2, [r0, #14]
 80053da:	6183      	str	r3, [r0, #24]
 80053dc:	4619      	mov	r1, r3
 80053de:	2208      	movs	r2, #8
 80053e0:	305c      	adds	r0, #92	@ 0x5c
 80053e2:	f000 f8eb 	bl	80055bc <memset>
 80053e6:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <std+0x58>)
 80053e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <std+0x5c>)
 80053ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <std+0x60>)
 80053f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <std+0x64>)
 80053f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <std+0x68>)
 80053f8:	6224      	str	r4, [r4, #32]
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d006      	beq.n	800540c <std+0x48>
 80053fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005402:	4294      	cmp	r4, r2
 8005404:	d002      	beq.n	800540c <std+0x48>
 8005406:	33d0      	adds	r3, #208	@ 0xd0
 8005408:	429c      	cmp	r4, r3
 800540a:	d105      	bne.n	8005418 <std+0x54>
 800540c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f000 b908 	b.w	8005628 <__retarget_lock_init_recursive>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	08006f41 	.word	0x08006f41
 8005420:	08006f63 	.word	0x08006f63
 8005424:	08006f9b 	.word	0x08006f9b
 8005428:	08006fbf 	.word	0x08006fbf
 800542c:	200002ec 	.word	0x200002ec

08005430 <stdio_exit_handler>:
 8005430:	4a02      	ldr	r2, [pc, #8]	@ (800543c <stdio_exit_handler+0xc>)
 8005432:	4903      	ldr	r1, [pc, #12]	@ (8005440 <stdio_exit_handler+0x10>)
 8005434:	4803      	ldr	r0, [pc, #12]	@ (8005444 <stdio_exit_handler+0x14>)
 8005436:	f000 b869 	b.w	800550c <_fwalk_sglue>
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c
 8005440:	080067d5 	.word	0x080067d5
 8005444:	2000001c 	.word	0x2000001c

08005448 <cleanup_stdio>:
 8005448:	6841      	ldr	r1, [r0, #4]
 800544a:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <cleanup_stdio+0x34>)
 800544c:	4299      	cmp	r1, r3
 800544e:	b510      	push	{r4, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	d001      	beq.n	8005458 <cleanup_stdio+0x10>
 8005454:	f001 f9be 	bl	80067d4 <_fflush_r>
 8005458:	68a1      	ldr	r1, [r4, #8]
 800545a:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <cleanup_stdio+0x38>)
 800545c:	4299      	cmp	r1, r3
 800545e:	d002      	beq.n	8005466 <cleanup_stdio+0x1e>
 8005460:	4620      	mov	r0, r4
 8005462:	f001 f9b7 	bl	80067d4 <_fflush_r>
 8005466:	68e1      	ldr	r1, [r4, #12]
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <cleanup_stdio+0x3c>)
 800546a:	4299      	cmp	r1, r3
 800546c:	d004      	beq.n	8005478 <cleanup_stdio+0x30>
 800546e:	4620      	mov	r0, r4
 8005470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005474:	f001 b9ae 	b.w	80067d4 <_fflush_r>
 8005478:	bd10      	pop	{r4, pc}
 800547a:	bf00      	nop
 800547c:	200002ec 	.word	0x200002ec
 8005480:	20000354 	.word	0x20000354
 8005484:	200003bc 	.word	0x200003bc

08005488 <global_stdio_init.part.0>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <global_stdio_init.part.0+0x30>)
 800548c:	4c0b      	ldr	r4, [pc, #44]	@ (80054bc <global_stdio_init.part.0+0x34>)
 800548e:	4a0c      	ldr	r2, [pc, #48]	@ (80054c0 <global_stdio_init.part.0+0x38>)
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	4620      	mov	r0, r4
 8005494:	2200      	movs	r2, #0
 8005496:	2104      	movs	r1, #4
 8005498:	f7ff ff94 	bl	80053c4 <std>
 800549c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054a0:	2201      	movs	r2, #1
 80054a2:	2109      	movs	r1, #9
 80054a4:	f7ff ff8e 	bl	80053c4 <std>
 80054a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054ac:	2202      	movs	r2, #2
 80054ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b2:	2112      	movs	r1, #18
 80054b4:	f7ff bf86 	b.w	80053c4 <std>
 80054b8:	20000424 	.word	0x20000424
 80054bc:	200002ec 	.word	0x200002ec
 80054c0:	08005431 	.word	0x08005431

080054c4 <__sfp_lock_acquire>:
 80054c4:	4801      	ldr	r0, [pc, #4]	@ (80054cc <__sfp_lock_acquire+0x8>)
 80054c6:	f000 b8b0 	b.w	800562a <__retarget_lock_acquire_recursive>
 80054ca:	bf00      	nop
 80054cc:	20000429 	.word	0x20000429

080054d0 <__sfp_lock_release>:
 80054d0:	4801      	ldr	r0, [pc, #4]	@ (80054d8 <__sfp_lock_release+0x8>)
 80054d2:	f000 b8ab 	b.w	800562c <__retarget_lock_release_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000429 	.word	0x20000429

080054dc <__sinit>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	f7ff fff0 	bl	80054c4 <__sfp_lock_acquire>
 80054e4:	6a23      	ldr	r3, [r4, #32]
 80054e6:	b11b      	cbz	r3, 80054f0 <__sinit+0x14>
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	f7ff bff0 	b.w	80054d0 <__sfp_lock_release>
 80054f0:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <__sinit+0x28>)
 80054f2:	6223      	str	r3, [r4, #32]
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <__sinit+0x2c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f5      	bne.n	80054e8 <__sinit+0xc>
 80054fc:	f7ff ffc4 	bl	8005488 <global_stdio_init.part.0>
 8005500:	e7f2      	b.n	80054e8 <__sinit+0xc>
 8005502:	bf00      	nop
 8005504:	08005449 	.word	0x08005449
 8005508:	20000424 	.word	0x20000424

0800550c <_fwalk_sglue>:
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4607      	mov	r7, r0
 8005512:	4688      	mov	r8, r1
 8005514:	4614      	mov	r4, r2
 8005516:	2600      	movs	r6, #0
 8005518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800551c:	f1b9 0901 	subs.w	r9, r9, #1
 8005520:	d505      	bpl.n	800552e <_fwalk_sglue+0x22>
 8005522:	6824      	ldr	r4, [r4, #0]
 8005524:	2c00      	cmp	r4, #0
 8005526:	d1f7      	bne.n	8005518 <_fwalk_sglue+0xc>
 8005528:	4630      	mov	r0, r6
 800552a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552e:	89ab      	ldrh	r3, [r5, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d907      	bls.n	8005544 <_fwalk_sglue+0x38>
 8005534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005538:	3301      	adds	r3, #1
 800553a:	d003      	beq.n	8005544 <_fwalk_sglue+0x38>
 800553c:	4629      	mov	r1, r5
 800553e:	4638      	mov	r0, r7
 8005540:	47c0      	blx	r8
 8005542:	4306      	orrs	r6, r0
 8005544:	3568      	adds	r5, #104	@ 0x68
 8005546:	e7e9      	b.n	800551c <_fwalk_sglue+0x10>

08005548 <_vsniprintf_r>:
 8005548:	b530      	push	{r4, r5, lr}
 800554a:	4614      	mov	r4, r2
 800554c:	2c00      	cmp	r4, #0
 800554e:	b09b      	sub	sp, #108	@ 0x6c
 8005550:	4605      	mov	r5, r0
 8005552:	461a      	mov	r2, r3
 8005554:	da05      	bge.n	8005562 <_vsniprintf_r+0x1a>
 8005556:	238b      	movs	r3, #139	@ 0x8b
 8005558:	6003      	str	r3, [r0, #0]
 800555a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800555e:	b01b      	add	sp, #108	@ 0x6c
 8005560:	bd30      	pop	{r4, r5, pc}
 8005562:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005566:	f8ad 300c 	strh.w	r3, [sp, #12]
 800556a:	bf14      	ite	ne
 800556c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005570:	4623      	moveq	r3, r4
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800557a:	9100      	str	r1, [sp, #0]
 800557c:	9104      	str	r1, [sp, #16]
 800557e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005582:	4669      	mov	r1, sp
 8005584:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005586:	f000 fefb 	bl	8006380 <_svfiprintf_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	bfbc      	itt	lt
 800558e:	238b      	movlt	r3, #139	@ 0x8b
 8005590:	602b      	strlt	r3, [r5, #0]
 8005592:	2c00      	cmp	r4, #0
 8005594:	d0e3      	beq.n	800555e <_vsniprintf_r+0x16>
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e7df      	b.n	800555e <_vsniprintf_r+0x16>
	...

080055a0 <vsniprintf>:
 80055a0:	b507      	push	{r0, r1, r2, lr}
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	460a      	mov	r2, r1
 80055a8:	4601      	mov	r1, r0
 80055aa:	4803      	ldr	r0, [pc, #12]	@ (80055b8 <vsniprintf+0x18>)
 80055ac:	6800      	ldr	r0, [r0, #0]
 80055ae:	f7ff ffcb 	bl	8005548 <_vsniprintf_r>
 80055b2:	b003      	add	sp, #12
 80055b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80055b8:	20000018 	.word	0x20000018

080055bc <memset>:
 80055bc:	4402      	add	r2, r0
 80055be:	4603      	mov	r3, r0
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d100      	bne.n	80055c6 <memset+0xa>
 80055c4:	4770      	bx	lr
 80055c6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ca:	e7f9      	b.n	80055c0 <memset+0x4>

080055cc <_localeconv_r>:
 80055cc:	4800      	ldr	r0, [pc, #0]	@ (80055d0 <_localeconv_r+0x4>)
 80055ce:	4770      	bx	lr
 80055d0:	20000158 	.word	0x20000158

080055d4 <__errno>:
 80055d4:	4b01      	ldr	r3, [pc, #4]	@ (80055dc <__errno+0x8>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000018 	.word	0x20000018

080055e0 <__libc_init_array>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005618 <__libc_init_array+0x38>)
 80055e4:	4c0d      	ldr	r4, [pc, #52]	@ (800561c <__libc_init_array+0x3c>)
 80055e6:	1b64      	subs	r4, r4, r5
 80055e8:	10a4      	asrs	r4, r4, #2
 80055ea:	2600      	movs	r6, #0
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	d109      	bne.n	8005604 <__libc_init_array+0x24>
 80055f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005620 <__libc_init_array+0x40>)
 80055f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005624 <__libc_init_array+0x44>)
 80055f4:	f002 f8ee 	bl	80077d4 <_init>
 80055f8:	1b64      	subs	r4, r4, r5
 80055fa:	10a4      	asrs	r4, r4, #2
 80055fc:	2600      	movs	r6, #0
 80055fe:	42a6      	cmp	r6, r4
 8005600:	d105      	bne.n	800560e <__libc_init_array+0x2e>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	f855 3b04 	ldr.w	r3, [r5], #4
 8005608:	4798      	blx	r3
 800560a:	3601      	adds	r6, #1
 800560c:	e7ee      	b.n	80055ec <__libc_init_array+0xc>
 800560e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005612:	4798      	blx	r3
 8005614:	3601      	adds	r6, #1
 8005616:	e7f2      	b.n	80055fe <__libc_init_array+0x1e>
 8005618:	08007bf0 	.word	0x08007bf0
 800561c:	08007bf0 	.word	0x08007bf0
 8005620:	08007bf0 	.word	0x08007bf0
 8005624:	08007bf4 	.word	0x08007bf4

08005628 <__retarget_lock_init_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_acquire_recursive>:
 800562a:	4770      	bx	lr

0800562c <__retarget_lock_release_recursive>:
 800562c:	4770      	bx	lr

0800562e <quorem>:
 800562e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005632:	6903      	ldr	r3, [r0, #16]
 8005634:	690c      	ldr	r4, [r1, #16]
 8005636:	42a3      	cmp	r3, r4
 8005638:	4607      	mov	r7, r0
 800563a:	db7e      	blt.n	800573a <quorem+0x10c>
 800563c:	3c01      	subs	r4, #1
 800563e:	f101 0814 	add.w	r8, r1, #20
 8005642:	00a3      	lsls	r3, r4, #2
 8005644:	f100 0514 	add.w	r5, r0, #20
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005658:	3301      	adds	r3, #1
 800565a:	429a      	cmp	r2, r3
 800565c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005660:	fbb2 f6f3 	udiv	r6, r2, r3
 8005664:	d32e      	bcc.n	80056c4 <quorem+0x96>
 8005666:	f04f 0a00 	mov.w	sl, #0
 800566a:	46c4      	mov	ip, r8
 800566c:	46ae      	mov	lr, r5
 800566e:	46d3      	mov	fp, sl
 8005670:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005674:	b298      	uxth	r0, r3
 8005676:	fb06 a000 	mla	r0, r6, r0, sl
 800567a:	0c02      	lsrs	r2, r0, #16
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	fb06 2303 	mla	r3, r6, r3, r2
 8005682:	f8de 2000 	ldr.w	r2, [lr]
 8005686:	b280      	uxth	r0, r0
 8005688:	b292      	uxth	r2, r2
 800568a:	1a12      	subs	r2, r2, r0
 800568c:	445a      	add	r2, fp
 800568e:	f8de 0000 	ldr.w	r0, [lr]
 8005692:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005696:	b29b      	uxth	r3, r3
 8005698:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800569c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056a0:	b292      	uxth	r2, r2
 80056a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056a6:	45e1      	cmp	r9, ip
 80056a8:	f84e 2b04 	str.w	r2, [lr], #4
 80056ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056b0:	d2de      	bcs.n	8005670 <quorem+0x42>
 80056b2:	9b00      	ldr	r3, [sp, #0]
 80056b4:	58eb      	ldr	r3, [r5, r3]
 80056b6:	b92b      	cbnz	r3, 80056c4 <quorem+0x96>
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	3b04      	subs	r3, #4
 80056bc:	429d      	cmp	r5, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	d32f      	bcc.n	8005722 <quorem+0xf4>
 80056c2:	613c      	str	r4, [r7, #16]
 80056c4:	4638      	mov	r0, r7
 80056c6:	f001 fb33 	bl	8006d30 <__mcmp>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	db25      	blt.n	800571a <quorem+0xec>
 80056ce:	4629      	mov	r1, r5
 80056d0:	2000      	movs	r0, #0
 80056d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80056d6:	f8d1 c000 	ldr.w	ip, [r1]
 80056da:	fa1f fe82 	uxth.w	lr, r2
 80056de:	fa1f f38c 	uxth.w	r3, ip
 80056e2:	eba3 030e 	sub.w	r3, r3, lr
 80056e6:	4403      	add	r3, r0
 80056e8:	0c12      	lsrs	r2, r2, #16
 80056ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056f8:	45c1      	cmp	r9, r8
 80056fa:	f841 3b04 	str.w	r3, [r1], #4
 80056fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005702:	d2e6      	bcs.n	80056d2 <quorem+0xa4>
 8005704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005708:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800570c:	b922      	cbnz	r2, 8005718 <quorem+0xea>
 800570e:	3b04      	subs	r3, #4
 8005710:	429d      	cmp	r5, r3
 8005712:	461a      	mov	r2, r3
 8005714:	d30b      	bcc.n	800572e <quorem+0x100>
 8005716:	613c      	str	r4, [r7, #16]
 8005718:	3601      	adds	r6, #1
 800571a:	4630      	mov	r0, r6
 800571c:	b003      	add	sp, #12
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	3b04      	subs	r3, #4
 8005726:	2a00      	cmp	r2, #0
 8005728:	d1cb      	bne.n	80056c2 <quorem+0x94>
 800572a:	3c01      	subs	r4, #1
 800572c:	e7c6      	b.n	80056bc <quorem+0x8e>
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	3b04      	subs	r3, #4
 8005732:	2a00      	cmp	r2, #0
 8005734:	d1ef      	bne.n	8005716 <quorem+0xe8>
 8005736:	3c01      	subs	r4, #1
 8005738:	e7ea      	b.n	8005710 <quorem+0xe2>
 800573a:	2000      	movs	r0, #0
 800573c:	e7ee      	b.n	800571c <quorem+0xee>
	...

08005740 <_dtoa_r>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	69c7      	ldr	r7, [r0, #28]
 8005746:	b099      	sub	sp, #100	@ 0x64
 8005748:	ed8d 0b02 	vstr	d0, [sp, #8]
 800574c:	ec55 4b10 	vmov	r4, r5, d0
 8005750:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005752:	9109      	str	r1, [sp, #36]	@ 0x24
 8005754:	4683      	mov	fp, r0
 8005756:	920e      	str	r2, [sp, #56]	@ 0x38
 8005758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800575a:	b97f      	cbnz	r7, 800577c <_dtoa_r+0x3c>
 800575c:	2010      	movs	r0, #16
 800575e:	f000 ff0b 	bl	8006578 <malloc>
 8005762:	4602      	mov	r2, r0
 8005764:	f8cb 001c 	str.w	r0, [fp, #28]
 8005768:	b920      	cbnz	r0, 8005774 <_dtoa_r+0x34>
 800576a:	4ba7      	ldr	r3, [pc, #668]	@ (8005a08 <_dtoa_r+0x2c8>)
 800576c:	21ef      	movs	r1, #239	@ 0xef
 800576e:	48a7      	ldr	r0, [pc, #668]	@ (8005a0c <_dtoa_r+0x2cc>)
 8005770:	f001 fcd6 	bl	8007120 <__assert_func>
 8005774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005778:	6007      	str	r7, [r0, #0]
 800577a:	60c7      	str	r7, [r0, #12]
 800577c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	b159      	cbz	r1, 800579c <_dtoa_r+0x5c>
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	604a      	str	r2, [r1, #4]
 8005788:	2301      	movs	r3, #1
 800578a:	4093      	lsls	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
 800578e:	4658      	mov	r0, fp
 8005790:	f001 f894 	bl	80068bc <_Bfree>
 8005794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	1e2b      	subs	r3, r5, #0
 800579e:	bfb9      	ittee	lt
 80057a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057a4:	9303      	strlt	r3, [sp, #12]
 80057a6:	2300      	movge	r3, #0
 80057a8:	6033      	strge	r3, [r6, #0]
 80057aa:	9f03      	ldr	r7, [sp, #12]
 80057ac:	4b98      	ldr	r3, [pc, #608]	@ (8005a10 <_dtoa_r+0x2d0>)
 80057ae:	bfbc      	itt	lt
 80057b0:	2201      	movlt	r2, #1
 80057b2:	6032      	strlt	r2, [r6, #0]
 80057b4:	43bb      	bics	r3, r7
 80057b6:	d112      	bne.n	80057de <_dtoa_r+0x9e>
 80057b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057c4:	4323      	orrs	r3, r4
 80057c6:	f000 854d 	beq.w	8006264 <_dtoa_r+0xb24>
 80057ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005a24 <_dtoa_r+0x2e4>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 854f 	beq.w	8006274 <_dtoa_r+0xb34>
 80057d6:	f10a 0303 	add.w	r3, sl, #3
 80057da:	f000 bd49 	b.w	8006270 <_dtoa_r+0xb30>
 80057de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057e2:	2200      	movs	r2, #0
 80057e4:	ec51 0b17 	vmov	r0, r1, d7
 80057e8:	2300      	movs	r3, #0
 80057ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80057ee:	f7fb f973 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f2:	4680      	mov	r8, r0
 80057f4:	b158      	cbz	r0, 800580e <_dtoa_r+0xce>
 80057f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057f8:	2301      	movs	r3, #1
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057fe:	b113      	cbz	r3, 8005806 <_dtoa_r+0xc6>
 8005800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005802:	4b84      	ldr	r3, [pc, #528]	@ (8005a14 <_dtoa_r+0x2d4>)
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005a28 <_dtoa_r+0x2e8>
 800580a:	f000 bd33 	b.w	8006274 <_dtoa_r+0xb34>
 800580e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005812:	aa16      	add	r2, sp, #88	@ 0x58
 8005814:	a917      	add	r1, sp, #92	@ 0x5c
 8005816:	4658      	mov	r0, fp
 8005818:	f001 fb3a 	bl	8006e90 <__d2b>
 800581c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005820:	4681      	mov	r9, r0
 8005822:	2e00      	cmp	r6, #0
 8005824:	d077      	beq.n	8005916 <_dtoa_r+0x1d6>
 8005826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005828:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800582c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800583c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005840:	4619      	mov	r1, r3
 8005842:	2200      	movs	r2, #0
 8005844:	4b74      	ldr	r3, [pc, #464]	@ (8005a18 <_dtoa_r+0x2d8>)
 8005846:	f7fa fd27 	bl	8000298 <__aeabi_dsub>
 800584a:	a369      	add	r3, pc, #420	@ (adr r3, 80059f0 <_dtoa_r+0x2b0>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fa feda 	bl	8000608 <__aeabi_dmul>
 8005854:	a368      	add	r3, pc, #416	@ (adr r3, 80059f8 <_dtoa_r+0x2b8>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fd1f 	bl	800029c <__adddf3>
 800585e:	4604      	mov	r4, r0
 8005860:	4630      	mov	r0, r6
 8005862:	460d      	mov	r5, r1
 8005864:	f7fa fe66 	bl	8000534 <__aeabi_i2d>
 8005868:	a365      	add	r3, pc, #404	@ (adr r3, 8005a00 <_dtoa_r+0x2c0>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f7fa fecb 	bl	8000608 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fa fd0f 	bl	800029c <__adddf3>
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	f7fb f971 	bl	8000b68 <__aeabi_d2iz>
 8005886:	2200      	movs	r2, #0
 8005888:	4607      	mov	r7, r0
 800588a:	2300      	movs	r3, #0
 800588c:	4620      	mov	r0, r4
 800588e:	4629      	mov	r1, r5
 8005890:	f7fb f92c 	bl	8000aec <__aeabi_dcmplt>
 8005894:	b140      	cbz	r0, 80058a8 <_dtoa_r+0x168>
 8005896:	4638      	mov	r0, r7
 8005898:	f7fa fe4c 	bl	8000534 <__aeabi_i2d>
 800589c:	4622      	mov	r2, r4
 800589e:	462b      	mov	r3, r5
 80058a0:	f7fb f91a 	bl	8000ad8 <__aeabi_dcmpeq>
 80058a4:	b900      	cbnz	r0, 80058a8 <_dtoa_r+0x168>
 80058a6:	3f01      	subs	r7, #1
 80058a8:	2f16      	cmp	r7, #22
 80058aa:	d851      	bhi.n	8005950 <_dtoa_r+0x210>
 80058ac:	4b5b      	ldr	r3, [pc, #364]	@ (8005a1c <_dtoa_r+0x2dc>)
 80058ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058ba:	f7fb f917 	bl	8000aec <__aeabi_dcmplt>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d048      	beq.n	8005954 <_dtoa_r+0x214>
 80058c2:	3f01      	subs	r7, #1
 80058c4:	2300      	movs	r3, #0
 80058c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80058c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80058ca:	1b9b      	subs	r3, r3, r6
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	bf44      	itt	mi
 80058d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80058d4:	2300      	movmi	r3, #0
 80058d6:	9208      	str	r2, [sp, #32]
 80058d8:	bf54      	ite	pl
 80058da:	f04f 0800 	movpl.w	r8, #0
 80058de:	9308      	strmi	r3, [sp, #32]
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	db39      	blt.n	8005958 <_dtoa_r+0x218>
 80058e4:	9b08      	ldr	r3, [sp, #32]
 80058e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80058e8:	443b      	add	r3, r7
 80058ea:	9308      	str	r3, [sp, #32]
 80058ec:	2300      	movs	r3, #0
 80058ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f2:	2b09      	cmp	r3, #9
 80058f4:	d864      	bhi.n	80059c0 <_dtoa_r+0x280>
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	bfc4      	itt	gt
 80058fa:	3b04      	subgt	r3, #4
 80058fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80058fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005900:	f1a3 0302 	sub.w	r3, r3, #2
 8005904:	bfcc      	ite	gt
 8005906:	2400      	movgt	r4, #0
 8005908:	2401      	movle	r4, #1
 800590a:	2b03      	cmp	r3, #3
 800590c:	d863      	bhi.n	80059d6 <_dtoa_r+0x296>
 800590e:	e8df f003 	tbb	[pc, r3]
 8005912:	372a      	.short	0x372a
 8005914:	5535      	.short	0x5535
 8005916:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800591a:	441e      	add	r6, r3
 800591c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005920:	2b20      	cmp	r3, #32
 8005922:	bfc1      	itttt	gt
 8005924:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005928:	409f      	lslgt	r7, r3
 800592a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800592e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005932:	bfd6      	itet	le
 8005934:	f1c3 0320 	rsble	r3, r3, #32
 8005938:	ea47 0003 	orrgt.w	r0, r7, r3
 800593c:	fa04 f003 	lslle.w	r0, r4, r3
 8005940:	f7fa fde8 	bl	8000514 <__aeabi_ui2d>
 8005944:	2201      	movs	r2, #1
 8005946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800594a:	3e01      	subs	r6, #1
 800594c:	9214      	str	r2, [sp, #80]	@ 0x50
 800594e:	e777      	b.n	8005840 <_dtoa_r+0x100>
 8005950:	2301      	movs	r3, #1
 8005952:	e7b8      	b.n	80058c6 <_dtoa_r+0x186>
 8005954:	9012      	str	r0, [sp, #72]	@ 0x48
 8005956:	e7b7      	b.n	80058c8 <_dtoa_r+0x188>
 8005958:	427b      	negs	r3, r7
 800595a:	930a      	str	r3, [sp, #40]	@ 0x28
 800595c:	2300      	movs	r3, #0
 800595e:	eba8 0807 	sub.w	r8, r8, r7
 8005962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005964:	e7c4      	b.n	80058f0 <_dtoa_r+0x1b0>
 8005966:	2300      	movs	r3, #0
 8005968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800596a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	dc35      	bgt.n	80059dc <_dtoa_r+0x29c>
 8005970:	2301      	movs	r3, #1
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	9307      	str	r3, [sp, #28]
 8005976:	461a      	mov	r2, r3
 8005978:	920e      	str	r2, [sp, #56]	@ 0x38
 800597a:	e00b      	b.n	8005994 <_dtoa_r+0x254>
 800597c:	2301      	movs	r3, #1
 800597e:	e7f3      	b.n	8005968 <_dtoa_r+0x228>
 8005980:	2300      	movs	r3, #0
 8005982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005986:	18fb      	adds	r3, r7, r3
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	3301      	adds	r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	9307      	str	r3, [sp, #28]
 8005990:	bfb8      	it	lt
 8005992:	2301      	movlt	r3, #1
 8005994:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005998:	2100      	movs	r1, #0
 800599a:	2204      	movs	r2, #4
 800599c:	f102 0514 	add.w	r5, r2, #20
 80059a0:	429d      	cmp	r5, r3
 80059a2:	d91f      	bls.n	80059e4 <_dtoa_r+0x2a4>
 80059a4:	6041      	str	r1, [r0, #4]
 80059a6:	4658      	mov	r0, fp
 80059a8:	f000 ff48 	bl	800683c <_Balloc>
 80059ac:	4682      	mov	sl, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d13c      	bne.n	8005a2c <_dtoa_r+0x2ec>
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <_dtoa_r+0x2e0>)
 80059b4:	4602      	mov	r2, r0
 80059b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80059ba:	e6d8      	b.n	800576e <_dtoa_r+0x2e>
 80059bc:	2301      	movs	r3, #1
 80059be:	e7e0      	b.n	8005982 <_dtoa_r+0x242>
 80059c0:	2401      	movs	r4, #1
 80059c2:	2300      	movs	r3, #0
 80059c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	9307      	str	r3, [sp, #28]
 80059d0:	2200      	movs	r2, #0
 80059d2:	2312      	movs	r3, #18
 80059d4:	e7d0      	b.n	8005978 <_dtoa_r+0x238>
 80059d6:	2301      	movs	r3, #1
 80059d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059da:	e7f5      	b.n	80059c8 <_dtoa_r+0x288>
 80059dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	e7d7      	b.n	8005994 <_dtoa_r+0x254>
 80059e4:	3101      	adds	r1, #1
 80059e6:	0052      	lsls	r2, r2, #1
 80059e8:	e7d8      	b.n	800599c <_dtoa_r+0x25c>
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	636f4361 	.word	0x636f4361
 80059f4:	3fd287a7 	.word	0x3fd287a7
 80059f8:	8b60c8b3 	.word	0x8b60c8b3
 80059fc:	3fc68a28 	.word	0x3fc68a28
 8005a00:	509f79fb 	.word	0x509f79fb
 8005a04:	3fd34413 	.word	0x3fd34413
 8005a08:	080078b9 	.word	0x080078b9
 8005a0c:	080078d0 	.word	0x080078d0
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	08007889 	.word	0x08007889
 8005a18:	3ff80000 	.word	0x3ff80000
 8005a1c:	080079d8 	.word	0x080079d8
 8005a20:	08007928 	.word	0x08007928
 8005a24:	080078b5 	.word	0x080078b5
 8005a28:	08007888 	.word	0x08007888
 8005a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a30:	6018      	str	r0, [r3, #0]
 8005a32:	9b07      	ldr	r3, [sp, #28]
 8005a34:	2b0e      	cmp	r3, #14
 8005a36:	f200 80a4 	bhi.w	8005b82 <_dtoa_r+0x442>
 8005a3a:	2c00      	cmp	r4, #0
 8005a3c:	f000 80a1 	beq.w	8005b82 <_dtoa_r+0x442>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	dd33      	ble.n	8005aac <_dtoa_r+0x36c>
 8005a44:	4bad      	ldr	r3, [pc, #692]	@ (8005cfc <_dtoa_r+0x5bc>)
 8005a46:	f007 020f 	and.w	r2, r7, #15
 8005a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a4e:	ed93 7b00 	vldr	d7, [r3]
 8005a52:	05f8      	lsls	r0, r7, #23
 8005a54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a5c:	d516      	bpl.n	8005a8c <_dtoa_r+0x34c>
 8005a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8005d00 <_dtoa_r+0x5c0>)
 8005a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a68:	f7fa fef8 	bl	800085c <__aeabi_ddiv>
 8005a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a70:	f004 040f 	and.w	r4, r4, #15
 8005a74:	2603      	movs	r6, #3
 8005a76:	4da2      	ldr	r5, [pc, #648]	@ (8005d00 <_dtoa_r+0x5c0>)
 8005a78:	b954      	cbnz	r4, 8005a90 <_dtoa_r+0x350>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a82:	f7fa feeb 	bl	800085c <__aeabi_ddiv>
 8005a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a8a:	e028      	b.n	8005ade <_dtoa_r+0x39e>
 8005a8c:	2602      	movs	r6, #2
 8005a8e:	e7f2      	b.n	8005a76 <_dtoa_r+0x336>
 8005a90:	07e1      	lsls	r1, r4, #31
 8005a92:	d508      	bpl.n	8005aa6 <_dtoa_r+0x366>
 8005a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a9c:	f7fa fdb4 	bl	8000608 <__aeabi_dmul>
 8005aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	1064      	asrs	r4, r4, #1
 8005aa8:	3508      	adds	r5, #8
 8005aaa:	e7e5      	b.n	8005a78 <_dtoa_r+0x338>
 8005aac:	f000 80d2 	beq.w	8005c54 <_dtoa_r+0x514>
 8005ab0:	427c      	negs	r4, r7
 8005ab2:	4b92      	ldr	r3, [pc, #584]	@ (8005cfc <_dtoa_r+0x5bc>)
 8005ab4:	4d92      	ldr	r5, [pc, #584]	@ (8005d00 <_dtoa_r+0x5c0>)
 8005ab6:	f004 020f 	and.w	r2, r4, #15
 8005aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ac6:	f7fa fd9f 	bl	8000608 <__aeabi_dmul>
 8005aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ace:	1124      	asrs	r4, r4, #4
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2602      	movs	r6, #2
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	f040 80b2 	bne.w	8005c3e <_dtoa_r+0x4fe>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1d3      	bne.n	8005a86 <_dtoa_r+0x346>
 8005ade:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ae0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80b7 	beq.w	8005c58 <_dtoa_r+0x518>
 8005aea:	4b86      	ldr	r3, [pc, #536]	@ (8005d04 <_dtoa_r+0x5c4>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa fffb 	bl	8000aec <__aeabi_dcmplt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f000 80ae 	beq.w	8005c58 <_dtoa_r+0x518>
 8005afc:	9b07      	ldr	r3, [sp, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80aa 	beq.w	8005c58 <_dtoa_r+0x518>
 8005b04:	9b00      	ldr	r3, [sp, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dd37      	ble.n	8005b7a <_dtoa_r+0x43a>
 8005b0a:	1e7b      	subs	r3, r7, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4b7d      	ldr	r3, [pc, #500]	@ (8005d08 <_dtoa_r+0x5c8>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	4629      	mov	r1, r5
 8005b16:	f7fa fd77 	bl	8000608 <__aeabi_dmul>
 8005b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1e:	9c00      	ldr	r4, [sp, #0]
 8005b20:	3601      	adds	r6, #1
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fa fd06 	bl	8000534 <__aeabi_i2d>
 8005b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b2c:	f7fa fd6c 	bl	8000608 <__aeabi_dmul>
 8005b30:	4b76      	ldr	r3, [pc, #472]	@ (8005d0c <_dtoa_r+0x5cc>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	f7fa fbb2 	bl	800029c <__adddf3>
 8005b38:	4605      	mov	r5, r0
 8005b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	f040 808d 	bne.w	8005c5e <_dtoa_r+0x51e>
 8005b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b48:	4b71      	ldr	r3, [pc, #452]	@ (8005d10 <_dtoa_r+0x5d0>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fba4 	bl	8000298 <__aeabi_dsub>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4633      	mov	r3, r6
 8005b5c:	f7fa ffe4 	bl	8000b28 <__aeabi_dcmpgt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	f040 828b 	bne.w	800607c <_dtoa_r+0x93c>
 8005b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b6a:	462a      	mov	r2, r5
 8005b6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b70:	f7fa ffbc 	bl	8000aec <__aeabi_dcmplt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 8128 	bne.w	8005dca <_dtoa_r+0x68a>
 8005b7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f2c0 815a 	blt.w	8005e3e <_dtoa_r+0x6fe>
 8005b8a:	2f0e      	cmp	r7, #14
 8005b8c:	f300 8157 	bgt.w	8005e3e <_dtoa_r+0x6fe>
 8005b90:	4b5a      	ldr	r3, [pc, #360]	@ (8005cfc <_dtoa_r+0x5bc>)
 8005b92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b96:	ed93 7b00 	vldr	d7, [r3]
 8005b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	ed8d 7b00 	vstr	d7, [sp]
 8005ba2:	da03      	bge.n	8005bac <_dtoa_r+0x46c>
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f340 8101 	ble.w	8005dae <_dtoa_r+0x66e>
 8005bac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bb0:	4656      	mov	r6, sl
 8005bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7fa fe4f 	bl	800085c <__aeabi_ddiv>
 8005bbe:	f7fa ffd3 	bl	8000b68 <__aeabi_d2iz>
 8005bc2:	4680      	mov	r8, r0
 8005bc4:	f7fa fcb6 	bl	8000534 <__aeabi_i2d>
 8005bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bcc:	f7fa fd1c 	bl	8000608 <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bdc:	f7fa fb5c 	bl	8000298 <__aeabi_dsub>
 8005be0:	f806 4b01 	strb.w	r4, [r6], #1
 8005be4:	9d07      	ldr	r5, [sp, #28]
 8005be6:	eba6 040a 	sub.w	r4, r6, sl
 8005bea:	42a5      	cmp	r5, r4
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	f040 8117 	bne.w	8005e22 <_dtoa_r+0x6e2>
 8005bf4:	f7fa fb52 	bl	800029c <__adddf3>
 8005bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460d      	mov	r5, r1
 8005c00:	f7fa ff92 	bl	8000b28 <__aeabi_dcmpgt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 80f9 	bne.w	8005dfc <_dtoa_r+0x6bc>
 8005c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa ff61 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c16:	b118      	cbz	r0, 8005c20 <_dtoa_r+0x4e0>
 8005c18:	f018 0f01 	tst.w	r8, #1
 8005c1c:	f040 80ee 	bne.w	8005dfc <_dtoa_r+0x6bc>
 8005c20:	4649      	mov	r1, r9
 8005c22:	4658      	mov	r0, fp
 8005c24:	f000 fe4a 	bl	80068bc <_Bfree>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	7033      	strb	r3, [r6, #0]
 8005c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c2e:	3701      	adds	r7, #1
 8005c30:	601f      	str	r7, [r3, #0]
 8005c32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 831d 	beq.w	8006274 <_dtoa_r+0xb34>
 8005c3a:	601e      	str	r6, [r3, #0]
 8005c3c:	e31a      	b.n	8006274 <_dtoa_r+0xb34>
 8005c3e:	07e2      	lsls	r2, r4, #31
 8005c40:	d505      	bpl.n	8005c4e <_dtoa_r+0x50e>
 8005c42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c46:	f7fa fcdf 	bl	8000608 <__aeabi_dmul>
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	1064      	asrs	r4, r4, #1
 8005c50:	3508      	adds	r5, #8
 8005c52:	e73f      	b.n	8005ad4 <_dtoa_r+0x394>
 8005c54:	2602      	movs	r6, #2
 8005c56:	e742      	b.n	8005ade <_dtoa_r+0x39e>
 8005c58:	9c07      	ldr	r4, [sp, #28]
 8005c5a:	9704      	str	r7, [sp, #16]
 8005c5c:	e761      	b.n	8005b22 <_dtoa_r+0x3e2>
 8005c5e:	4b27      	ldr	r3, [pc, #156]	@ (8005cfc <_dtoa_r+0x5bc>)
 8005c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c6a:	4454      	add	r4, sl
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d053      	beq.n	8005d18 <_dtoa_r+0x5d8>
 8005c70:	4928      	ldr	r1, [pc, #160]	@ (8005d14 <_dtoa_r+0x5d4>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fa fdf2 	bl	800085c <__aeabi_ddiv>
 8005c78:	4633      	mov	r3, r6
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	f7fa fb0c 	bl	8000298 <__aeabi_dsub>
 8005c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c84:	4656      	mov	r6, sl
 8005c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8a:	f7fa ff6d 	bl	8000b68 <__aeabi_d2iz>
 8005c8e:	4605      	mov	r5, r0
 8005c90:	f7fa fc50 	bl	8000534 <__aeabi_i2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9c:	f7fa fafc 	bl	8000298 <__aeabi_dsub>
 8005ca0:	3530      	adds	r5, #48	@ 0x30
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005caa:	f806 5b01 	strb.w	r5, [r6], #1
 8005cae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cb2:	f7fa ff1b 	bl	8000aec <__aeabi_dcmplt>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d171      	bne.n	8005d9e <_dtoa_r+0x65e>
 8005cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cbe:	4911      	ldr	r1, [pc, #68]	@ (8005d04 <_dtoa_r+0x5c4>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fa fae9 	bl	8000298 <__aeabi_dsub>
 8005cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cca:	f7fa ff0f 	bl	8000aec <__aeabi_dcmplt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f040 8095 	bne.w	8005dfe <_dtoa_r+0x6be>
 8005cd4:	42a6      	cmp	r6, r4
 8005cd6:	f43f af50 	beq.w	8005b7a <_dtoa_r+0x43a>
 8005cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cde:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <_dtoa_r+0x5c8>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7fa fc91 	bl	8000608 <__aeabi_dmul>
 8005ce6:	4b08      	ldr	r3, [pc, #32]	@ (8005d08 <_dtoa_r+0x5c8>)
 8005ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cec:	2200      	movs	r2, #0
 8005cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf2:	f7fa fc89 	bl	8000608 <__aeabi_dmul>
 8005cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfa:	e7c4      	b.n	8005c86 <_dtoa_r+0x546>
 8005cfc:	080079d8 	.word	0x080079d8
 8005d00:	080079b0 	.word	0x080079b0
 8005d04:	3ff00000 	.word	0x3ff00000
 8005d08:	40240000 	.word	0x40240000
 8005d0c:	401c0000 	.word	0x401c0000
 8005d10:	40140000 	.word	0x40140000
 8005d14:	3fe00000 	.word	0x3fe00000
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f7fa fc74 	bl	8000608 <__aeabi_dmul>
 8005d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d24:	9415      	str	r4, [sp, #84]	@ 0x54
 8005d26:	4656      	mov	r6, sl
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa ff1c 	bl	8000b68 <__aeabi_d2iz>
 8005d30:	4605      	mov	r5, r0
 8005d32:	f7fa fbff 	bl	8000534 <__aeabi_i2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3e:	f7fa faab 	bl	8000298 <__aeabi_dsub>
 8005d42:	3530      	adds	r5, #48	@ 0x30
 8005d44:	f806 5b01 	strb.w	r5, [r6], #1
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	42a6      	cmp	r6, r4
 8005d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	d124      	bne.n	8005da2 <_dtoa_r+0x662>
 8005d58:	4bac      	ldr	r3, [pc, #688]	@ (800600c <_dtoa_r+0x8cc>)
 8005d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d5e:	f7fa fa9d 	bl	800029c <__adddf3>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d6a:	f7fa fedd 	bl	8000b28 <__aeabi_dcmpgt>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d145      	bne.n	8005dfe <_dtoa_r+0x6be>
 8005d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d76:	49a5      	ldr	r1, [pc, #660]	@ (800600c <_dtoa_r+0x8cc>)
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7fa fa8d 	bl	8000298 <__aeabi_dsub>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d86:	f7fa feb1 	bl	8000aec <__aeabi_dcmplt>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f43f aef5 	beq.w	8005b7a <_dtoa_r+0x43a>
 8005d90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d92:	1e73      	subs	r3, r6, #1
 8005d94:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d9a:	2b30      	cmp	r3, #48	@ 0x30
 8005d9c:	d0f8      	beq.n	8005d90 <_dtoa_r+0x650>
 8005d9e:	9f04      	ldr	r7, [sp, #16]
 8005da0:	e73e      	b.n	8005c20 <_dtoa_r+0x4e0>
 8005da2:	4b9b      	ldr	r3, [pc, #620]	@ (8006010 <_dtoa_r+0x8d0>)
 8005da4:	f7fa fc30 	bl	8000608 <__aeabi_dmul>
 8005da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dac:	e7bc      	b.n	8005d28 <_dtoa_r+0x5e8>
 8005dae:	d10c      	bne.n	8005dca <_dtoa_r+0x68a>
 8005db0:	4b98      	ldr	r3, [pc, #608]	@ (8006014 <_dtoa_r+0x8d4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005db8:	f7fa fc26 	bl	8000608 <__aeabi_dmul>
 8005dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc0:	f7fa fea8 	bl	8000b14 <__aeabi_dcmpge>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f000 8157 	beq.w	8006078 <_dtoa_r+0x938>
 8005dca:	2400      	movs	r4, #0
 8005dcc:	4625      	mov	r5, r4
 8005dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	4656      	mov	r6, sl
 8005dd6:	2700      	movs	r7, #0
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4658      	mov	r0, fp
 8005ddc:	f000 fd6e 	bl	80068bc <_Bfree>
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d0dc      	beq.n	8005d9e <_dtoa_r+0x65e>
 8005de4:	b12f      	cbz	r7, 8005df2 <_dtoa_r+0x6b2>
 8005de6:	42af      	cmp	r7, r5
 8005de8:	d003      	beq.n	8005df2 <_dtoa_r+0x6b2>
 8005dea:	4639      	mov	r1, r7
 8005dec:	4658      	mov	r0, fp
 8005dee:	f000 fd65 	bl	80068bc <_Bfree>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4658      	mov	r0, fp
 8005df6:	f000 fd61 	bl	80068bc <_Bfree>
 8005dfa:	e7d0      	b.n	8005d9e <_dtoa_r+0x65e>
 8005dfc:	9704      	str	r7, [sp, #16]
 8005dfe:	4633      	mov	r3, r6
 8005e00:	461e      	mov	r6, r3
 8005e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e06:	2a39      	cmp	r2, #57	@ 0x39
 8005e08:	d107      	bne.n	8005e1a <_dtoa_r+0x6da>
 8005e0a:	459a      	cmp	sl, r3
 8005e0c:	d1f8      	bne.n	8005e00 <_dtoa_r+0x6c0>
 8005e0e:	9a04      	ldr	r2, [sp, #16]
 8005e10:	3201      	adds	r2, #1
 8005e12:	9204      	str	r2, [sp, #16]
 8005e14:	2230      	movs	r2, #48	@ 0x30
 8005e16:	f88a 2000 	strb.w	r2, [sl]
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	3201      	adds	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	e7bd      	b.n	8005d9e <_dtoa_r+0x65e>
 8005e22:	4b7b      	ldr	r3, [pc, #492]	@ (8006010 <_dtoa_r+0x8d0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	f7fa fbef 	bl	8000608 <__aeabi_dmul>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	f7fa fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f43f aebb 	beq.w	8005bb2 <_dtoa_r+0x472>
 8005e3c:	e6f0      	b.n	8005c20 <_dtoa_r+0x4e0>
 8005e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	f000 80db 	beq.w	8005ffc <_dtoa_r+0x8bc>
 8005e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e48:	2a01      	cmp	r2, #1
 8005e4a:	f300 80bf 	bgt.w	8005fcc <_dtoa_r+0x88c>
 8005e4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005e50:	2a00      	cmp	r2, #0
 8005e52:	f000 80b7 	beq.w	8005fc4 <_dtoa_r+0x884>
 8005e56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e5c:	4646      	mov	r6, r8
 8005e5e:	9a08      	ldr	r2, [sp, #32]
 8005e60:	2101      	movs	r1, #1
 8005e62:	441a      	add	r2, r3
 8005e64:	4658      	mov	r0, fp
 8005e66:	4498      	add	r8, r3
 8005e68:	9208      	str	r2, [sp, #32]
 8005e6a:	f000 fddb 	bl	8006a24 <__i2b>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	b15e      	cbz	r6, 8005e8a <_dtoa_r+0x74a>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd08      	ble.n	8005e8a <_dtoa_r+0x74a>
 8005e78:	42b3      	cmp	r3, r6
 8005e7a:	9a08      	ldr	r2, [sp, #32]
 8005e7c:	bfa8      	it	ge
 8005e7e:	4633      	movge	r3, r6
 8005e80:	eba8 0803 	sub.w	r8, r8, r3
 8005e84:	1af6      	subs	r6, r6, r3
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	9308      	str	r3, [sp, #32]
 8005e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e8c:	b1f3      	cbz	r3, 8005ecc <_dtoa_r+0x78c>
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80b7 	beq.w	8006004 <_dtoa_r+0x8c4>
 8005e96:	b18c      	cbz	r4, 8005ebc <_dtoa_r+0x77c>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	f000 fe81 	bl	8006ba4 <__pow5mult>
 8005ea2:	464a      	mov	r2, r9
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4658      	mov	r0, fp
 8005eaa:	f000 fdd1 	bl	8006a50 <__multiply>
 8005eae:	4649      	mov	r1, r9
 8005eb0:	9004      	str	r0, [sp, #16]
 8005eb2:	4658      	mov	r0, fp
 8005eb4:	f000 fd02 	bl	80068bc <_Bfree>
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	4699      	mov	r9, r3
 8005ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ebe:	1b1a      	subs	r2, r3, r4
 8005ec0:	d004      	beq.n	8005ecc <_dtoa_r+0x78c>
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f000 fe6d 	bl	8006ba4 <__pow5mult>
 8005eca:	4681      	mov	r9, r0
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f000 fda8 	bl	8006a24 <__i2b>
 8005ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 81cf 	beq.w	800627c <_dtoa_r+0xb3c>
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	4658      	mov	r0, fp
 8005ee4:	f000 fe5e 	bl	8006ba4 <__pow5mult>
 8005ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	4604      	mov	r4, r0
 8005eee:	f300 8095 	bgt.w	800601c <_dtoa_r+0x8dc>
 8005ef2:	9b02      	ldr	r3, [sp, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 8087 	bne.w	8006008 <_dtoa_r+0x8c8>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8089 	bne.w	8006018 <_dtoa_r+0x8d8>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f0c:	0d1b      	lsrs	r3, r3, #20
 8005f0e:	051b      	lsls	r3, r3, #20
 8005f10:	b12b      	cbz	r3, 8005f1e <_dtoa_r+0x7de>
 8005f12:	9b08      	ldr	r3, [sp, #32]
 8005f14:	3301      	adds	r3, #1
 8005f16:	9308      	str	r3, [sp, #32]
 8005f18:	f108 0801 	add.w	r8, r8, #1
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 81b0 	beq.w	8006288 <_dtoa_r+0xb48>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f2e:	6918      	ldr	r0, [r3, #16]
 8005f30:	f000 fd2c 	bl	800698c <__hi0bits>
 8005f34:	f1c0 0020 	rsb	r0, r0, #32
 8005f38:	9b08      	ldr	r3, [sp, #32]
 8005f3a:	4418      	add	r0, r3
 8005f3c:	f010 001f 	ands.w	r0, r0, #31
 8005f40:	d077      	beq.n	8006032 <_dtoa_r+0x8f2>
 8005f42:	f1c0 0320 	rsb	r3, r0, #32
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	dd6b      	ble.n	8006022 <_dtoa_r+0x8e2>
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	f1c0 001c 	rsb	r0, r0, #28
 8005f50:	4403      	add	r3, r0
 8005f52:	4480      	add	r8, r0
 8005f54:	4406      	add	r6, r0
 8005f56:	9308      	str	r3, [sp, #32]
 8005f58:	f1b8 0f00 	cmp.w	r8, #0
 8005f5c:	dd05      	ble.n	8005f6a <_dtoa_r+0x82a>
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4642      	mov	r2, r8
 8005f62:	4658      	mov	r0, fp
 8005f64:	f000 fe78 	bl	8006c58 <__lshift>
 8005f68:	4681      	mov	r9, r0
 8005f6a:	9b08      	ldr	r3, [sp, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd05      	ble.n	8005f7c <_dtoa_r+0x83c>
 8005f70:	4621      	mov	r1, r4
 8005f72:	461a      	mov	r2, r3
 8005f74:	4658      	mov	r0, fp
 8005f76:	f000 fe6f 	bl	8006c58 <__lshift>
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d059      	beq.n	8006036 <_dtoa_r+0x8f6>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4648      	mov	r0, r9
 8005f86:	f000 fed3 	bl	8006d30 <__mcmp>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	da53      	bge.n	8006036 <_dtoa_r+0x8f6>
 8005f8e:	1e7b      	subs	r3, r7, #1
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	4649      	mov	r1, r9
 8005f94:	2300      	movs	r3, #0
 8005f96:	220a      	movs	r2, #10
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f000 fcb1 	bl	8006900 <__multadd>
 8005f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fa0:	4681      	mov	r9, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8172 	beq.w	800628c <_dtoa_r+0xb4c>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4629      	mov	r1, r5
 8005fac:	220a      	movs	r2, #10
 8005fae:	4658      	mov	r0, fp
 8005fb0:	f000 fca6 	bl	8006900 <__multadd>
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	4605      	mov	r5, r0
 8005fba:	dc67      	bgt.n	800608c <_dtoa_r+0x94c>
 8005fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	dc41      	bgt.n	8006046 <_dtoa_r+0x906>
 8005fc2:	e063      	b.n	800608c <_dtoa_r+0x94c>
 8005fc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fca:	e746      	b.n	8005e5a <_dtoa_r+0x71a>
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	1e5c      	subs	r4, r3, #1
 8005fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	bfbf      	itttt	lt
 8005fd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005fd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005fda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005fdc:	1ae3      	sublt	r3, r4, r3
 8005fde:	bfb4      	ite	lt
 8005fe0:	18d2      	addlt	r2, r2, r3
 8005fe2:	1b1c      	subge	r4, r3, r4
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	bfbc      	itt	lt
 8005fe8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005fea:	2400      	movlt	r4, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfb5      	itete	lt
 8005ff0:	eba8 0603 	sublt.w	r6, r8, r3
 8005ff4:	9b07      	ldrge	r3, [sp, #28]
 8005ff6:	2300      	movlt	r3, #0
 8005ff8:	4646      	movge	r6, r8
 8005ffa:	e730      	b.n	8005e5e <_dtoa_r+0x71e>
 8005ffc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ffe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006000:	4646      	mov	r6, r8
 8006002:	e735      	b.n	8005e70 <_dtoa_r+0x730>
 8006004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006006:	e75c      	b.n	8005ec2 <_dtoa_r+0x782>
 8006008:	2300      	movs	r3, #0
 800600a:	e788      	b.n	8005f1e <_dtoa_r+0x7de>
 800600c:	3fe00000 	.word	0x3fe00000
 8006010:	40240000 	.word	0x40240000
 8006014:	40140000 	.word	0x40140000
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	e780      	b.n	8005f1e <_dtoa_r+0x7de>
 800601c:	2300      	movs	r3, #0
 800601e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006020:	e782      	b.n	8005f28 <_dtoa_r+0x7e8>
 8006022:	d099      	beq.n	8005f58 <_dtoa_r+0x818>
 8006024:	9a08      	ldr	r2, [sp, #32]
 8006026:	331c      	adds	r3, #28
 8006028:	441a      	add	r2, r3
 800602a:	4498      	add	r8, r3
 800602c:	441e      	add	r6, r3
 800602e:	9208      	str	r2, [sp, #32]
 8006030:	e792      	b.n	8005f58 <_dtoa_r+0x818>
 8006032:	4603      	mov	r3, r0
 8006034:	e7f6      	b.n	8006024 <_dtoa_r+0x8e4>
 8006036:	9b07      	ldr	r3, [sp, #28]
 8006038:	9704      	str	r7, [sp, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dc20      	bgt.n	8006080 <_dtoa_r+0x940>
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	2b02      	cmp	r3, #2
 8006044:	dd1e      	ble.n	8006084 <_dtoa_r+0x944>
 8006046:	9b00      	ldr	r3, [sp, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f47f aec0 	bne.w	8005dce <_dtoa_r+0x68e>
 800604e:	4621      	mov	r1, r4
 8006050:	2205      	movs	r2, #5
 8006052:	4658      	mov	r0, fp
 8006054:	f000 fc54 	bl	8006900 <__multadd>
 8006058:	4601      	mov	r1, r0
 800605a:	4604      	mov	r4, r0
 800605c:	4648      	mov	r0, r9
 800605e:	f000 fe67 	bl	8006d30 <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	f77f aeb3 	ble.w	8005dce <_dtoa_r+0x68e>
 8006068:	4656      	mov	r6, sl
 800606a:	2331      	movs	r3, #49	@ 0x31
 800606c:	f806 3b01 	strb.w	r3, [r6], #1
 8006070:	9b04      	ldr	r3, [sp, #16]
 8006072:	3301      	adds	r3, #1
 8006074:	9304      	str	r3, [sp, #16]
 8006076:	e6ae      	b.n	8005dd6 <_dtoa_r+0x696>
 8006078:	9c07      	ldr	r4, [sp, #28]
 800607a:	9704      	str	r7, [sp, #16]
 800607c:	4625      	mov	r5, r4
 800607e:	e7f3      	b.n	8006068 <_dtoa_r+0x928>
 8006080:	9b07      	ldr	r3, [sp, #28]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8104 	beq.w	8006294 <_dtoa_r+0xb54>
 800608c:	2e00      	cmp	r6, #0
 800608e:	dd05      	ble.n	800609c <_dtoa_r+0x95c>
 8006090:	4629      	mov	r1, r5
 8006092:	4632      	mov	r2, r6
 8006094:	4658      	mov	r0, fp
 8006096:	f000 fddf 	bl	8006c58 <__lshift>
 800609a:	4605      	mov	r5, r0
 800609c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d05a      	beq.n	8006158 <_dtoa_r+0xa18>
 80060a2:	6869      	ldr	r1, [r5, #4]
 80060a4:	4658      	mov	r0, fp
 80060a6:	f000 fbc9 	bl	800683c <_Balloc>
 80060aa:	4606      	mov	r6, r0
 80060ac:	b928      	cbnz	r0, 80060ba <_dtoa_r+0x97a>
 80060ae:	4b84      	ldr	r3, [pc, #528]	@ (80062c0 <_dtoa_r+0xb80>)
 80060b0:	4602      	mov	r2, r0
 80060b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060b6:	f7ff bb5a 	b.w	800576e <_dtoa_r+0x2e>
 80060ba:	692a      	ldr	r2, [r5, #16]
 80060bc:	3202      	adds	r2, #2
 80060be:	0092      	lsls	r2, r2, #2
 80060c0:	f105 010c 	add.w	r1, r5, #12
 80060c4:	300c      	adds	r0, #12
 80060c6:	f001 f81d 	bl	8007104 <memcpy>
 80060ca:	2201      	movs	r2, #1
 80060cc:	4631      	mov	r1, r6
 80060ce:	4658      	mov	r0, fp
 80060d0:	f000 fdc2 	bl	8006c58 <__lshift>
 80060d4:	f10a 0301 	add.w	r3, sl, #1
 80060d8:	9307      	str	r3, [sp, #28]
 80060da:	9b00      	ldr	r3, [sp, #0]
 80060dc:	4453      	add	r3, sl
 80060de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	462f      	mov	r7, r5
 80060e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ea:	4605      	mov	r5, r0
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	4621      	mov	r1, r4
 80060f0:	3b01      	subs	r3, #1
 80060f2:	4648      	mov	r0, r9
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	f7ff fa9a 	bl	800562e <quorem>
 80060fa:	4639      	mov	r1, r7
 80060fc:	9002      	str	r0, [sp, #8]
 80060fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006102:	4648      	mov	r0, r9
 8006104:	f000 fe14 	bl	8006d30 <__mcmp>
 8006108:	462a      	mov	r2, r5
 800610a:	9008      	str	r0, [sp, #32]
 800610c:	4621      	mov	r1, r4
 800610e:	4658      	mov	r0, fp
 8006110:	f000 fe2a 	bl	8006d68 <__mdiff>
 8006114:	68c2      	ldr	r2, [r0, #12]
 8006116:	4606      	mov	r6, r0
 8006118:	bb02      	cbnz	r2, 800615c <_dtoa_r+0xa1c>
 800611a:	4601      	mov	r1, r0
 800611c:	4648      	mov	r0, r9
 800611e:	f000 fe07 	bl	8006d30 <__mcmp>
 8006122:	4602      	mov	r2, r0
 8006124:	4631      	mov	r1, r6
 8006126:	4658      	mov	r0, fp
 8006128:	920e      	str	r2, [sp, #56]	@ 0x38
 800612a:	f000 fbc7 	bl	80068bc <_Bfree>
 800612e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006132:	9e07      	ldr	r6, [sp, #28]
 8006134:	ea43 0102 	orr.w	r1, r3, r2
 8006138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800613a:	4319      	orrs	r1, r3
 800613c:	d110      	bne.n	8006160 <_dtoa_r+0xa20>
 800613e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006142:	d029      	beq.n	8006198 <_dtoa_r+0xa58>
 8006144:	9b08      	ldr	r3, [sp, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd02      	ble.n	8006150 <_dtoa_r+0xa10>
 800614a:	9b02      	ldr	r3, [sp, #8]
 800614c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	f883 8000 	strb.w	r8, [r3]
 8006156:	e63f      	b.n	8005dd8 <_dtoa_r+0x698>
 8006158:	4628      	mov	r0, r5
 800615a:	e7bb      	b.n	80060d4 <_dtoa_r+0x994>
 800615c:	2201      	movs	r2, #1
 800615e:	e7e1      	b.n	8006124 <_dtoa_r+0x9e4>
 8006160:	9b08      	ldr	r3, [sp, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	db04      	blt.n	8006170 <_dtoa_r+0xa30>
 8006166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006168:	430b      	orrs	r3, r1
 800616a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800616c:	430b      	orrs	r3, r1
 800616e:	d120      	bne.n	80061b2 <_dtoa_r+0xa72>
 8006170:	2a00      	cmp	r2, #0
 8006172:	dded      	ble.n	8006150 <_dtoa_r+0xa10>
 8006174:	4649      	mov	r1, r9
 8006176:	2201      	movs	r2, #1
 8006178:	4658      	mov	r0, fp
 800617a:	f000 fd6d 	bl	8006c58 <__lshift>
 800617e:	4621      	mov	r1, r4
 8006180:	4681      	mov	r9, r0
 8006182:	f000 fdd5 	bl	8006d30 <__mcmp>
 8006186:	2800      	cmp	r0, #0
 8006188:	dc03      	bgt.n	8006192 <_dtoa_r+0xa52>
 800618a:	d1e1      	bne.n	8006150 <_dtoa_r+0xa10>
 800618c:	f018 0f01 	tst.w	r8, #1
 8006190:	d0de      	beq.n	8006150 <_dtoa_r+0xa10>
 8006192:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006196:	d1d8      	bne.n	800614a <_dtoa_r+0xa0a>
 8006198:	9a00      	ldr	r2, [sp, #0]
 800619a:	2339      	movs	r3, #57	@ 0x39
 800619c:	7013      	strb	r3, [r2, #0]
 800619e:	4633      	mov	r3, r6
 80061a0:	461e      	mov	r6, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061a8:	2a39      	cmp	r2, #57	@ 0x39
 80061aa:	d052      	beq.n	8006252 <_dtoa_r+0xb12>
 80061ac:	3201      	adds	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e612      	b.n	8005dd8 <_dtoa_r+0x698>
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	dd07      	ble.n	80061c6 <_dtoa_r+0xa86>
 80061b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061ba:	d0ed      	beq.n	8006198 <_dtoa_r+0xa58>
 80061bc:	9a00      	ldr	r2, [sp, #0]
 80061be:	f108 0301 	add.w	r3, r8, #1
 80061c2:	7013      	strb	r3, [r2, #0]
 80061c4:	e608      	b.n	8005dd8 <_dtoa_r+0x698>
 80061c6:	9b07      	ldr	r3, [sp, #28]
 80061c8:	9a07      	ldr	r2, [sp, #28]
 80061ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d028      	beq.n	8006226 <_dtoa_r+0xae6>
 80061d4:	4649      	mov	r1, r9
 80061d6:	2300      	movs	r3, #0
 80061d8:	220a      	movs	r2, #10
 80061da:	4658      	mov	r0, fp
 80061dc:	f000 fb90 	bl	8006900 <__multadd>
 80061e0:	42af      	cmp	r7, r5
 80061e2:	4681      	mov	r9, r0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f04f 020a 	mov.w	r2, #10
 80061ec:	4639      	mov	r1, r7
 80061ee:	4658      	mov	r0, fp
 80061f0:	d107      	bne.n	8006202 <_dtoa_r+0xac2>
 80061f2:	f000 fb85 	bl	8006900 <__multadd>
 80061f6:	4607      	mov	r7, r0
 80061f8:	4605      	mov	r5, r0
 80061fa:	9b07      	ldr	r3, [sp, #28]
 80061fc:	3301      	adds	r3, #1
 80061fe:	9307      	str	r3, [sp, #28]
 8006200:	e774      	b.n	80060ec <_dtoa_r+0x9ac>
 8006202:	f000 fb7d 	bl	8006900 <__multadd>
 8006206:	4629      	mov	r1, r5
 8006208:	4607      	mov	r7, r0
 800620a:	2300      	movs	r3, #0
 800620c:	220a      	movs	r2, #10
 800620e:	4658      	mov	r0, fp
 8006210:	f000 fb76 	bl	8006900 <__multadd>
 8006214:	4605      	mov	r5, r0
 8006216:	e7f0      	b.n	80061fa <_dtoa_r+0xaba>
 8006218:	9b00      	ldr	r3, [sp, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	bfcc      	ite	gt
 800621e:	461e      	movgt	r6, r3
 8006220:	2601      	movle	r6, #1
 8006222:	4456      	add	r6, sl
 8006224:	2700      	movs	r7, #0
 8006226:	4649      	mov	r1, r9
 8006228:	2201      	movs	r2, #1
 800622a:	4658      	mov	r0, fp
 800622c:	f000 fd14 	bl	8006c58 <__lshift>
 8006230:	4621      	mov	r1, r4
 8006232:	4681      	mov	r9, r0
 8006234:	f000 fd7c 	bl	8006d30 <__mcmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	dcb0      	bgt.n	800619e <_dtoa_r+0xa5e>
 800623c:	d102      	bne.n	8006244 <_dtoa_r+0xb04>
 800623e:	f018 0f01 	tst.w	r8, #1
 8006242:	d1ac      	bne.n	800619e <_dtoa_r+0xa5e>
 8006244:	4633      	mov	r3, r6
 8006246:	461e      	mov	r6, r3
 8006248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800624c:	2a30      	cmp	r2, #48	@ 0x30
 800624e:	d0fa      	beq.n	8006246 <_dtoa_r+0xb06>
 8006250:	e5c2      	b.n	8005dd8 <_dtoa_r+0x698>
 8006252:	459a      	cmp	sl, r3
 8006254:	d1a4      	bne.n	80061a0 <_dtoa_r+0xa60>
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	2331      	movs	r3, #49	@ 0x31
 800625e:	f88a 3000 	strb.w	r3, [sl]
 8006262:	e5b9      	b.n	8005dd8 <_dtoa_r+0x698>
 8006264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006266:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80062c4 <_dtoa_r+0xb84>
 800626a:	b11b      	cbz	r3, 8006274 <_dtoa_r+0xb34>
 800626c:	f10a 0308 	add.w	r3, sl, #8
 8006270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4650      	mov	r0, sl
 8006276:	b019      	add	sp, #100	@ 0x64
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627e:	2b01      	cmp	r3, #1
 8006280:	f77f ae37 	ble.w	8005ef2 <_dtoa_r+0x7b2>
 8006284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006286:	930a      	str	r3, [sp, #40]	@ 0x28
 8006288:	2001      	movs	r0, #1
 800628a:	e655      	b.n	8005f38 <_dtoa_r+0x7f8>
 800628c:	9b00      	ldr	r3, [sp, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f77f aed6 	ble.w	8006040 <_dtoa_r+0x900>
 8006294:	4656      	mov	r6, sl
 8006296:	4621      	mov	r1, r4
 8006298:	4648      	mov	r0, r9
 800629a:	f7ff f9c8 	bl	800562e <quorem>
 800629e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062a2:	f806 8b01 	strb.w	r8, [r6], #1
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	eba6 020a 	sub.w	r2, r6, sl
 80062ac:	4293      	cmp	r3, r2
 80062ae:	ddb3      	ble.n	8006218 <_dtoa_r+0xad8>
 80062b0:	4649      	mov	r1, r9
 80062b2:	2300      	movs	r3, #0
 80062b4:	220a      	movs	r2, #10
 80062b6:	4658      	mov	r0, fp
 80062b8:	f000 fb22 	bl	8006900 <__multadd>
 80062bc:	4681      	mov	r9, r0
 80062be:	e7ea      	b.n	8006296 <_dtoa_r+0xb56>
 80062c0:	08007928 	.word	0x08007928
 80062c4:	080078ac 	.word	0x080078ac

080062c8 <__ssputs_r>:
 80062c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	688e      	ldr	r6, [r1, #8]
 80062ce:	461f      	mov	r7, r3
 80062d0:	42be      	cmp	r6, r7
 80062d2:	680b      	ldr	r3, [r1, #0]
 80062d4:	4682      	mov	sl, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	4690      	mov	r8, r2
 80062da:	d82d      	bhi.n	8006338 <__ssputs_r+0x70>
 80062dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062e4:	d026      	beq.n	8006334 <__ssputs_r+0x6c>
 80062e6:	6965      	ldr	r5, [r4, #20]
 80062e8:	6909      	ldr	r1, [r1, #16]
 80062ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ee:	eba3 0901 	sub.w	r9, r3, r1
 80062f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062f6:	1c7b      	adds	r3, r7, #1
 80062f8:	444b      	add	r3, r9
 80062fa:	106d      	asrs	r5, r5, #1
 80062fc:	429d      	cmp	r5, r3
 80062fe:	bf38      	it	cc
 8006300:	461d      	movcc	r5, r3
 8006302:	0553      	lsls	r3, r2, #21
 8006304:	d527      	bpl.n	8006356 <__ssputs_r+0x8e>
 8006306:	4629      	mov	r1, r5
 8006308:	f000 f960 	bl	80065cc <_malloc_r>
 800630c:	4606      	mov	r6, r0
 800630e:	b360      	cbz	r0, 800636a <__ssputs_r+0xa2>
 8006310:	6921      	ldr	r1, [r4, #16]
 8006312:	464a      	mov	r2, r9
 8006314:	f000 fef6 	bl	8007104 <memcpy>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800631e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	6126      	str	r6, [r4, #16]
 8006326:	6165      	str	r5, [r4, #20]
 8006328:	444e      	add	r6, r9
 800632a:	eba5 0509 	sub.w	r5, r5, r9
 800632e:	6026      	str	r6, [r4, #0]
 8006330:	60a5      	str	r5, [r4, #8]
 8006332:	463e      	mov	r6, r7
 8006334:	42be      	cmp	r6, r7
 8006336:	d900      	bls.n	800633a <__ssputs_r+0x72>
 8006338:	463e      	mov	r6, r7
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	4632      	mov	r2, r6
 800633e:	4641      	mov	r1, r8
 8006340:	f000 fe6f 	bl	8007022 <memmove>
 8006344:	68a3      	ldr	r3, [r4, #8]
 8006346:	1b9b      	subs	r3, r3, r6
 8006348:	60a3      	str	r3, [r4, #8]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	4433      	add	r3, r6
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	2000      	movs	r0, #0
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	462a      	mov	r2, r5
 8006358:	f000 fe35 	bl	8006fc6 <_realloc_r>
 800635c:	4606      	mov	r6, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d1e0      	bne.n	8006324 <__ssputs_r+0x5c>
 8006362:	6921      	ldr	r1, [r4, #16]
 8006364:	4650      	mov	r0, sl
 8006366:	f000 ff0d 	bl	8007184 <_free_r>
 800636a:	230c      	movs	r3, #12
 800636c:	f8ca 3000 	str.w	r3, [sl]
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800637c:	e7e9      	b.n	8006352 <__ssputs_r+0x8a>
	...

08006380 <_svfiprintf_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4698      	mov	r8, r3
 8006386:	898b      	ldrh	r3, [r1, #12]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	b09d      	sub	sp, #116	@ 0x74
 800638c:	4607      	mov	r7, r0
 800638e:	460d      	mov	r5, r1
 8006390:	4614      	mov	r4, r2
 8006392:	d510      	bpl.n	80063b6 <_svfiprintf_r+0x36>
 8006394:	690b      	ldr	r3, [r1, #16]
 8006396:	b973      	cbnz	r3, 80063b6 <_svfiprintf_r+0x36>
 8006398:	2140      	movs	r1, #64	@ 0x40
 800639a:	f000 f917 	bl	80065cc <_malloc_r>
 800639e:	6028      	str	r0, [r5, #0]
 80063a0:	6128      	str	r0, [r5, #16]
 80063a2:	b930      	cbnz	r0, 80063b2 <_svfiprintf_r+0x32>
 80063a4:	230c      	movs	r3, #12
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063ac:	b01d      	add	sp, #116	@ 0x74
 80063ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b2:	2340      	movs	r3, #64	@ 0x40
 80063b4:	616b      	str	r3, [r5, #20]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ba:	2320      	movs	r3, #32
 80063bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c4:	2330      	movs	r3, #48	@ 0x30
 80063c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006564 <_svfiprintf_r+0x1e4>
 80063ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063ce:	f04f 0901 	mov.w	r9, #1
 80063d2:	4623      	mov	r3, r4
 80063d4:	469a      	mov	sl, r3
 80063d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063da:	b10a      	cbz	r2, 80063e0 <_svfiprintf_r+0x60>
 80063dc:	2a25      	cmp	r2, #37	@ 0x25
 80063de:	d1f9      	bne.n	80063d4 <_svfiprintf_r+0x54>
 80063e0:	ebba 0b04 	subs.w	fp, sl, r4
 80063e4:	d00b      	beq.n	80063fe <_svfiprintf_r+0x7e>
 80063e6:	465b      	mov	r3, fp
 80063e8:	4622      	mov	r2, r4
 80063ea:	4629      	mov	r1, r5
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff ff6b 	bl	80062c8 <__ssputs_r>
 80063f2:	3001      	adds	r0, #1
 80063f4:	f000 80a7 	beq.w	8006546 <_svfiprintf_r+0x1c6>
 80063f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063fa:	445a      	add	r2, fp
 80063fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80063fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 809f 	beq.w	8006546 <_svfiprintf_r+0x1c6>
 8006408:	2300      	movs	r3, #0
 800640a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800640e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006412:	f10a 0a01 	add.w	sl, sl, #1
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800641e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006420:	4654      	mov	r4, sl
 8006422:	2205      	movs	r2, #5
 8006424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006428:	484e      	ldr	r0, [pc, #312]	@ (8006564 <_svfiprintf_r+0x1e4>)
 800642a:	f7f9 fed9 	bl	80001e0 <memchr>
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	b9d8      	cbnz	r0, 800646a <_svfiprintf_r+0xea>
 8006432:	06d0      	lsls	r0, r2, #27
 8006434:	bf44      	itt	mi
 8006436:	2320      	movmi	r3, #32
 8006438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800643c:	0711      	lsls	r1, r2, #28
 800643e:	bf44      	itt	mi
 8006440:	232b      	movmi	r3, #43	@ 0x2b
 8006442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006446:	f89a 3000 	ldrb.w	r3, [sl]
 800644a:	2b2a      	cmp	r3, #42	@ 0x2a
 800644c:	d015      	beq.n	800647a <_svfiprintf_r+0xfa>
 800644e:	9a07      	ldr	r2, [sp, #28]
 8006450:	4654      	mov	r4, sl
 8006452:	2000      	movs	r0, #0
 8006454:	f04f 0c0a 	mov.w	ip, #10
 8006458:	4621      	mov	r1, r4
 800645a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645e:	3b30      	subs	r3, #48	@ 0x30
 8006460:	2b09      	cmp	r3, #9
 8006462:	d94b      	bls.n	80064fc <_svfiprintf_r+0x17c>
 8006464:	b1b0      	cbz	r0, 8006494 <_svfiprintf_r+0x114>
 8006466:	9207      	str	r2, [sp, #28]
 8006468:	e014      	b.n	8006494 <_svfiprintf_r+0x114>
 800646a:	eba0 0308 	sub.w	r3, r0, r8
 800646e:	fa09 f303 	lsl.w	r3, r9, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	46a2      	mov	sl, r4
 8006478:	e7d2      	b.n	8006420 <_svfiprintf_r+0xa0>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	1d19      	adds	r1, r3, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	9103      	str	r1, [sp, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfbb      	ittet	lt
 8006486:	425b      	neglt	r3, r3
 8006488:	f042 0202 	orrlt.w	r2, r2, #2
 800648c:	9307      	strge	r3, [sp, #28]
 800648e:	9307      	strlt	r3, [sp, #28]
 8006490:	bfb8      	it	lt
 8006492:	9204      	strlt	r2, [sp, #16]
 8006494:	7823      	ldrb	r3, [r4, #0]
 8006496:	2b2e      	cmp	r3, #46	@ 0x2e
 8006498:	d10a      	bne.n	80064b0 <_svfiprintf_r+0x130>
 800649a:	7863      	ldrb	r3, [r4, #1]
 800649c:	2b2a      	cmp	r3, #42	@ 0x2a
 800649e:	d132      	bne.n	8006506 <_svfiprintf_r+0x186>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	9203      	str	r2, [sp, #12]
 80064a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ac:	3402      	adds	r4, #2
 80064ae:	9305      	str	r3, [sp, #20]
 80064b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006574 <_svfiprintf_r+0x1f4>
 80064b4:	7821      	ldrb	r1, [r4, #0]
 80064b6:	2203      	movs	r2, #3
 80064b8:	4650      	mov	r0, sl
 80064ba:	f7f9 fe91 	bl	80001e0 <memchr>
 80064be:	b138      	cbz	r0, 80064d0 <_svfiprintf_r+0x150>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	eba0 000a 	sub.w	r0, r0, sl
 80064c6:	2240      	movs	r2, #64	@ 0x40
 80064c8:	4082      	lsls	r2, r0
 80064ca:	4313      	orrs	r3, r2
 80064cc:	3401      	adds	r4, #1
 80064ce:	9304      	str	r3, [sp, #16]
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	4824      	ldr	r0, [pc, #144]	@ (8006568 <_svfiprintf_r+0x1e8>)
 80064d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064da:	2206      	movs	r2, #6
 80064dc:	f7f9 fe80 	bl	80001e0 <memchr>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d036      	beq.n	8006552 <_svfiprintf_r+0x1d2>
 80064e4:	4b21      	ldr	r3, [pc, #132]	@ (800656c <_svfiprintf_r+0x1ec>)
 80064e6:	bb1b      	cbnz	r3, 8006530 <_svfiprintf_r+0x1b0>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	3307      	adds	r3, #7
 80064ec:	f023 0307 	bic.w	r3, r3, #7
 80064f0:	3308      	adds	r3, #8
 80064f2:	9303      	str	r3, [sp, #12]
 80064f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f6:	4433      	add	r3, r6
 80064f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064fa:	e76a      	b.n	80063d2 <_svfiprintf_r+0x52>
 80064fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006500:	460c      	mov	r4, r1
 8006502:	2001      	movs	r0, #1
 8006504:	e7a8      	b.n	8006458 <_svfiprintf_r+0xd8>
 8006506:	2300      	movs	r3, #0
 8006508:	3401      	adds	r4, #1
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	4619      	mov	r1, r3
 800650e:	f04f 0c0a 	mov.w	ip, #10
 8006512:	4620      	mov	r0, r4
 8006514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006518:	3a30      	subs	r2, #48	@ 0x30
 800651a:	2a09      	cmp	r2, #9
 800651c:	d903      	bls.n	8006526 <_svfiprintf_r+0x1a6>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0c6      	beq.n	80064b0 <_svfiprintf_r+0x130>
 8006522:	9105      	str	r1, [sp, #20]
 8006524:	e7c4      	b.n	80064b0 <_svfiprintf_r+0x130>
 8006526:	fb0c 2101 	mla	r1, ip, r1, r2
 800652a:	4604      	mov	r4, r0
 800652c:	2301      	movs	r3, #1
 800652e:	e7f0      	b.n	8006512 <_svfiprintf_r+0x192>
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	462a      	mov	r2, r5
 8006536:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <_svfiprintf_r+0x1f0>)
 8006538:	a904      	add	r1, sp, #16
 800653a:	4638      	mov	r0, r7
 800653c:	f7fe fb8a 	bl	8004c54 <_printf_float>
 8006540:	1c42      	adds	r2, r0, #1
 8006542:	4606      	mov	r6, r0
 8006544:	d1d6      	bne.n	80064f4 <_svfiprintf_r+0x174>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	065b      	lsls	r3, r3, #25
 800654a:	f53f af2d 	bmi.w	80063a8 <_svfiprintf_r+0x28>
 800654e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006550:	e72c      	b.n	80063ac <_svfiprintf_r+0x2c>
 8006552:	ab03      	add	r3, sp, #12
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462a      	mov	r2, r5
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <_svfiprintf_r+0x1f0>)
 800655a:	a904      	add	r1, sp, #16
 800655c:	4638      	mov	r0, r7
 800655e:	f7fe fe11 	bl	8005184 <_printf_i>
 8006562:	e7ed      	b.n	8006540 <_svfiprintf_r+0x1c0>
 8006564:	08007939 	.word	0x08007939
 8006568:	08007943 	.word	0x08007943
 800656c:	08004c55 	.word	0x08004c55
 8006570:	080062c9 	.word	0x080062c9
 8006574:	0800793f 	.word	0x0800793f

08006578 <malloc>:
 8006578:	4b02      	ldr	r3, [pc, #8]	@ (8006584 <malloc+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f000 b825 	b.w	80065cc <_malloc_r>
 8006582:	bf00      	nop
 8006584:	20000018 	.word	0x20000018

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0f      	ldr	r6, [pc, #60]	@ (80065c8 <sbrk_aligned+0x40>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 fd94 	bl	80070c0 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 fd8f 	bl	80070c0 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d103      	bne.n	80065ae <sbrk_aligned+0x26>
 80065a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80065aa:	4620      	mov	r0, r4
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	1cc4      	adds	r4, r0, #3
 80065b0:	f024 0403 	bic.w	r4, r4, #3
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d0f8      	beq.n	80065aa <sbrk_aligned+0x22>
 80065b8:	1a21      	subs	r1, r4, r0
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 fd80 	bl	80070c0 <_sbrk_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d1f2      	bne.n	80065aa <sbrk_aligned+0x22>
 80065c4:	e7ef      	b.n	80065a6 <sbrk_aligned+0x1e>
 80065c6:	bf00      	nop
 80065c8:	2000042c 	.word	0x2000042c

080065cc <_malloc_r>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	1ccd      	adds	r5, r1, #3
 80065d2:	f025 0503 	bic.w	r5, r5, #3
 80065d6:	3508      	adds	r5, #8
 80065d8:	2d0c      	cmp	r5, #12
 80065da:	bf38      	it	cc
 80065dc:	250c      	movcc	r5, #12
 80065de:	2d00      	cmp	r5, #0
 80065e0:	4606      	mov	r6, r0
 80065e2:	db01      	blt.n	80065e8 <_malloc_r+0x1c>
 80065e4:	42a9      	cmp	r1, r5
 80065e6:	d904      	bls.n	80065f2 <_malloc_r+0x26>
 80065e8:	230c      	movs	r3, #12
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	2000      	movs	r0, #0
 80065ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066c8 <_malloc_r+0xfc>
 80065f6:	f000 f915 	bl	8006824 <__malloc_lock>
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	461c      	mov	r4, r3
 8006600:	bb44      	cbnz	r4, 8006654 <_malloc_r+0x88>
 8006602:	4629      	mov	r1, r5
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ffbf 	bl	8006588 <sbrk_aligned>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	4604      	mov	r4, r0
 800660e:	d158      	bne.n	80066c2 <_malloc_r+0xf6>
 8006610:	f8d8 4000 	ldr.w	r4, [r8]
 8006614:	4627      	mov	r7, r4
 8006616:	2f00      	cmp	r7, #0
 8006618:	d143      	bne.n	80066a2 <_malloc_r+0xd6>
 800661a:	2c00      	cmp	r4, #0
 800661c:	d04b      	beq.n	80066b6 <_malloc_r+0xea>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	4639      	mov	r1, r7
 8006622:	4630      	mov	r0, r6
 8006624:	eb04 0903 	add.w	r9, r4, r3
 8006628:	f000 fd4a 	bl	80070c0 <_sbrk_r>
 800662c:	4581      	cmp	r9, r0
 800662e:	d142      	bne.n	80066b6 <_malloc_r+0xea>
 8006630:	6821      	ldr	r1, [r4, #0]
 8006632:	1a6d      	subs	r5, r5, r1
 8006634:	4629      	mov	r1, r5
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ffa6 	bl	8006588 <sbrk_aligned>
 800663c:	3001      	adds	r0, #1
 800663e:	d03a      	beq.n	80066b6 <_malloc_r+0xea>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	442b      	add	r3, r5
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	f8d8 3000 	ldr.w	r3, [r8]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	bb62      	cbnz	r2, 80066a8 <_malloc_r+0xdc>
 800664e:	f8c8 7000 	str.w	r7, [r8]
 8006652:	e00f      	b.n	8006674 <_malloc_r+0xa8>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	1b52      	subs	r2, r2, r5
 8006658:	d420      	bmi.n	800669c <_malloc_r+0xd0>
 800665a:	2a0b      	cmp	r2, #11
 800665c:	d917      	bls.n	800668e <_malloc_r+0xc2>
 800665e:	1961      	adds	r1, r4, r5
 8006660:	42a3      	cmp	r3, r4
 8006662:	6025      	str	r5, [r4, #0]
 8006664:	bf18      	it	ne
 8006666:	6059      	strne	r1, [r3, #4]
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	bf08      	it	eq
 800666c:	f8c8 1000 	streq.w	r1, [r8]
 8006670:	5162      	str	r2, [r4, r5]
 8006672:	604b      	str	r3, [r1, #4]
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f8db 	bl	8006830 <__malloc_unlock>
 800667a:	f104 000b 	add.w	r0, r4, #11
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	f020 0007 	bic.w	r0, r0, #7
 8006684:	1ac2      	subs	r2, r0, r3
 8006686:	bf1c      	itt	ne
 8006688:	1a1b      	subne	r3, r3, r0
 800668a:	50a3      	strne	r3, [r4, r2]
 800668c:	e7af      	b.n	80065ee <_malloc_r+0x22>
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	42a3      	cmp	r3, r4
 8006692:	bf0c      	ite	eq
 8006694:	f8c8 2000 	streq.w	r2, [r8]
 8006698:	605a      	strne	r2, [r3, #4]
 800669a:	e7eb      	b.n	8006674 <_malloc_r+0xa8>
 800669c:	4623      	mov	r3, r4
 800669e:	6864      	ldr	r4, [r4, #4]
 80066a0:	e7ae      	b.n	8006600 <_malloc_r+0x34>
 80066a2:	463c      	mov	r4, r7
 80066a4:	687f      	ldr	r7, [r7, #4]
 80066a6:	e7b6      	b.n	8006616 <_malloc_r+0x4a>
 80066a8:	461a      	mov	r2, r3
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d1fb      	bne.n	80066a8 <_malloc_r+0xdc>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6053      	str	r3, [r2, #4]
 80066b4:	e7de      	b.n	8006674 <_malloc_r+0xa8>
 80066b6:	230c      	movs	r3, #12
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	4630      	mov	r0, r6
 80066bc:	f000 f8b8 	bl	8006830 <__malloc_unlock>
 80066c0:	e794      	b.n	80065ec <_malloc_r+0x20>
 80066c2:	6005      	str	r5, [r0, #0]
 80066c4:	e7d6      	b.n	8006674 <_malloc_r+0xa8>
 80066c6:	bf00      	nop
 80066c8:	20000430 	.word	0x20000430

080066cc <__sflush_r>:
 80066cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d4:	0716      	lsls	r6, r2, #28
 80066d6:	4605      	mov	r5, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	d454      	bmi.n	8006786 <__sflush_r+0xba>
 80066dc:	684b      	ldr	r3, [r1, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dc02      	bgt.n	80066e8 <__sflush_r+0x1c>
 80066e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd48      	ble.n	800677a <__sflush_r+0xae>
 80066e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d045      	beq.n	800677a <__sflush_r+0xae>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066f4:	682f      	ldr	r7, [r5, #0]
 80066f6:	6a21      	ldr	r1, [r4, #32]
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	d030      	beq.n	800675e <__sflush_r+0x92>
 80066fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	0759      	lsls	r1, r3, #29
 8006702:	d505      	bpl.n	8006710 <__sflush_r+0x44>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800670a:	b10b      	cbz	r3, 8006710 <__sflush_r+0x44>
 800670c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006714:	6a21      	ldr	r1, [r4, #32]
 8006716:	4628      	mov	r0, r5
 8006718:	47b0      	blx	r6
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	d106      	bne.n	800672e <__sflush_r+0x62>
 8006720:	6829      	ldr	r1, [r5, #0]
 8006722:	291d      	cmp	r1, #29
 8006724:	d82b      	bhi.n	800677e <__sflush_r+0xb2>
 8006726:	4a2a      	ldr	r2, [pc, #168]	@ (80067d0 <__sflush_r+0x104>)
 8006728:	410a      	asrs	r2, r1
 800672a:	07d6      	lsls	r6, r2, #31
 800672c:	d427      	bmi.n	800677e <__sflush_r+0xb2>
 800672e:	2200      	movs	r2, #0
 8006730:	6062      	str	r2, [r4, #4]
 8006732:	04d9      	lsls	r1, r3, #19
 8006734:	6922      	ldr	r2, [r4, #16]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	d504      	bpl.n	8006744 <__sflush_r+0x78>
 800673a:	1c42      	adds	r2, r0, #1
 800673c:	d101      	bne.n	8006742 <__sflush_r+0x76>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b903      	cbnz	r3, 8006744 <__sflush_r+0x78>
 8006742:	6560      	str	r0, [r4, #84]	@ 0x54
 8006744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006746:	602f      	str	r7, [r5, #0]
 8006748:	b1b9      	cbz	r1, 800677a <__sflush_r+0xae>
 800674a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800674e:	4299      	cmp	r1, r3
 8006750:	d002      	beq.n	8006758 <__sflush_r+0x8c>
 8006752:	4628      	mov	r0, r5
 8006754:	f000 fd16 	bl	8007184 <_free_r>
 8006758:	2300      	movs	r3, #0
 800675a:	6363      	str	r3, [r4, #52]	@ 0x34
 800675c:	e00d      	b.n	800677a <__sflush_r+0xae>
 800675e:	2301      	movs	r3, #1
 8006760:	4628      	mov	r0, r5
 8006762:	47b0      	blx	r6
 8006764:	4602      	mov	r2, r0
 8006766:	1c50      	adds	r0, r2, #1
 8006768:	d1c9      	bne.n	80066fe <__sflush_r+0x32>
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c6      	beq.n	80066fe <__sflush_r+0x32>
 8006770:	2b1d      	cmp	r3, #29
 8006772:	d001      	beq.n	8006778 <__sflush_r+0xac>
 8006774:	2b16      	cmp	r3, #22
 8006776:	d11e      	bne.n	80067b6 <__sflush_r+0xea>
 8006778:	602f      	str	r7, [r5, #0]
 800677a:	2000      	movs	r0, #0
 800677c:	e022      	b.n	80067c4 <__sflush_r+0xf8>
 800677e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006782:	b21b      	sxth	r3, r3
 8006784:	e01b      	b.n	80067be <__sflush_r+0xf2>
 8006786:	690f      	ldr	r7, [r1, #16]
 8006788:	2f00      	cmp	r7, #0
 800678a:	d0f6      	beq.n	800677a <__sflush_r+0xae>
 800678c:	0793      	lsls	r3, r2, #30
 800678e:	680e      	ldr	r6, [r1, #0]
 8006790:	bf08      	it	eq
 8006792:	694b      	ldreq	r3, [r1, #20]
 8006794:	600f      	str	r7, [r1, #0]
 8006796:	bf18      	it	ne
 8006798:	2300      	movne	r3, #0
 800679a:	eba6 0807 	sub.w	r8, r6, r7
 800679e:	608b      	str	r3, [r1, #8]
 80067a0:	f1b8 0f00 	cmp.w	r8, #0
 80067a4:	dde9      	ble.n	800677a <__sflush_r+0xae>
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067aa:	4643      	mov	r3, r8
 80067ac:	463a      	mov	r2, r7
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b0      	blx	r6
 80067b2:	2800      	cmp	r0, #0
 80067b4:	dc08      	bgt.n	80067c8 <__sflush_r+0xfc>
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c8:	4407      	add	r7, r0
 80067ca:	eba8 0800 	sub.w	r8, r8, r0
 80067ce:	e7e7      	b.n	80067a0 <__sflush_r+0xd4>
 80067d0:	dfbffffe 	.word	0xdfbffffe

080067d4 <_fflush_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	4605      	mov	r5, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b913      	cbnz	r3, 80067e4 <_fflush_r+0x10>
 80067de:	2500      	movs	r5, #0
 80067e0:	4628      	mov	r0, r5
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	b118      	cbz	r0, 80067ee <_fflush_r+0x1a>
 80067e6:	6a03      	ldr	r3, [r0, #32]
 80067e8:	b90b      	cbnz	r3, 80067ee <_fflush_r+0x1a>
 80067ea:	f7fe fe77 	bl	80054dc <__sinit>
 80067ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f3      	beq.n	80067de <_fflush_r+0xa>
 80067f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067f8:	07d0      	lsls	r0, r2, #31
 80067fa:	d404      	bmi.n	8006806 <_fflush_r+0x32>
 80067fc:	0599      	lsls	r1, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_fflush_r+0x32>
 8006800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006802:	f7fe ff12 	bl	800562a <__retarget_lock_acquire_recursive>
 8006806:	4628      	mov	r0, r5
 8006808:	4621      	mov	r1, r4
 800680a:	f7ff ff5f 	bl	80066cc <__sflush_r>
 800680e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006810:	07da      	lsls	r2, r3, #31
 8006812:	4605      	mov	r5, r0
 8006814:	d4e4      	bmi.n	80067e0 <_fflush_r+0xc>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	059b      	lsls	r3, r3, #22
 800681a:	d4e1      	bmi.n	80067e0 <_fflush_r+0xc>
 800681c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800681e:	f7fe ff05 	bl	800562c <__retarget_lock_release_recursive>
 8006822:	e7dd      	b.n	80067e0 <_fflush_r+0xc>

08006824 <__malloc_lock>:
 8006824:	4801      	ldr	r0, [pc, #4]	@ (800682c <__malloc_lock+0x8>)
 8006826:	f7fe bf00 	b.w	800562a <__retarget_lock_acquire_recursive>
 800682a:	bf00      	nop
 800682c:	20000428 	.word	0x20000428

08006830 <__malloc_unlock>:
 8006830:	4801      	ldr	r0, [pc, #4]	@ (8006838 <__malloc_unlock+0x8>)
 8006832:	f7fe befb 	b.w	800562c <__retarget_lock_release_recursive>
 8006836:	bf00      	nop
 8006838:	20000428 	.word	0x20000428

0800683c <_Balloc>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	69c6      	ldr	r6, [r0, #28]
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	b976      	cbnz	r6, 8006864 <_Balloc+0x28>
 8006846:	2010      	movs	r0, #16
 8006848:	f7ff fe96 	bl	8006578 <malloc>
 800684c:	4602      	mov	r2, r0
 800684e:	61e0      	str	r0, [r4, #28]
 8006850:	b920      	cbnz	r0, 800685c <_Balloc+0x20>
 8006852:	4b18      	ldr	r3, [pc, #96]	@ (80068b4 <_Balloc+0x78>)
 8006854:	4818      	ldr	r0, [pc, #96]	@ (80068b8 <_Balloc+0x7c>)
 8006856:	216b      	movs	r1, #107	@ 0x6b
 8006858:	f000 fc62 	bl	8007120 <__assert_func>
 800685c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006860:	6006      	str	r6, [r0, #0]
 8006862:	60c6      	str	r6, [r0, #12]
 8006864:	69e6      	ldr	r6, [r4, #28]
 8006866:	68f3      	ldr	r3, [r6, #12]
 8006868:	b183      	cbz	r3, 800688c <_Balloc+0x50>
 800686a:	69e3      	ldr	r3, [r4, #28]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006872:	b9b8      	cbnz	r0, 80068a4 <_Balloc+0x68>
 8006874:	2101      	movs	r1, #1
 8006876:	fa01 f605 	lsl.w	r6, r1, r5
 800687a:	1d72      	adds	r2, r6, #5
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fc6c 	bl	800715c <_calloc_r>
 8006884:	b160      	cbz	r0, 80068a0 <_Balloc+0x64>
 8006886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800688a:	e00e      	b.n	80068aa <_Balloc+0x6e>
 800688c:	2221      	movs	r2, #33	@ 0x21
 800688e:	2104      	movs	r1, #4
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fc63 	bl	800715c <_calloc_r>
 8006896:	69e3      	ldr	r3, [r4, #28]
 8006898:	60f0      	str	r0, [r6, #12]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e4      	bne.n	800686a <_Balloc+0x2e>
 80068a0:	2000      	movs	r0, #0
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	6802      	ldr	r2, [r0, #0]
 80068a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068aa:	2300      	movs	r3, #0
 80068ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068b0:	e7f7      	b.n	80068a2 <_Balloc+0x66>
 80068b2:	bf00      	nop
 80068b4:	080078b9 	.word	0x080078b9
 80068b8:	0800794a 	.word	0x0800794a

080068bc <_Bfree>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	69c6      	ldr	r6, [r0, #28]
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b976      	cbnz	r6, 80068e4 <_Bfree+0x28>
 80068c6:	2010      	movs	r0, #16
 80068c8:	f7ff fe56 	bl	8006578 <malloc>
 80068cc:	4602      	mov	r2, r0
 80068ce:	61e8      	str	r0, [r5, #28]
 80068d0:	b920      	cbnz	r0, 80068dc <_Bfree+0x20>
 80068d2:	4b09      	ldr	r3, [pc, #36]	@ (80068f8 <_Bfree+0x3c>)
 80068d4:	4809      	ldr	r0, [pc, #36]	@ (80068fc <_Bfree+0x40>)
 80068d6:	218f      	movs	r1, #143	@ 0x8f
 80068d8:	f000 fc22 	bl	8007120 <__assert_func>
 80068dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e0:	6006      	str	r6, [r0, #0]
 80068e2:	60c6      	str	r6, [r0, #12]
 80068e4:	b13c      	cbz	r4, 80068f6 <_Bfree+0x3a>
 80068e6:	69eb      	ldr	r3, [r5, #28]
 80068e8:	6862      	ldr	r2, [r4, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f0:	6021      	str	r1, [r4, #0]
 80068f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	080078b9 	.word	0x080078b9
 80068fc:	0800794a 	.word	0x0800794a

08006900 <__multadd>:
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	690d      	ldr	r5, [r1, #16]
 8006906:	4607      	mov	r7, r0
 8006908:	460c      	mov	r4, r1
 800690a:	461e      	mov	r6, r3
 800690c:	f101 0c14 	add.w	ip, r1, #20
 8006910:	2000      	movs	r0, #0
 8006912:	f8dc 3000 	ldr.w	r3, [ip]
 8006916:	b299      	uxth	r1, r3
 8006918:	fb02 6101 	mla	r1, r2, r1, r6
 800691c:	0c1e      	lsrs	r6, r3, #16
 800691e:	0c0b      	lsrs	r3, r1, #16
 8006920:	fb02 3306 	mla	r3, r2, r6, r3
 8006924:	b289      	uxth	r1, r1
 8006926:	3001      	adds	r0, #1
 8006928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800692c:	4285      	cmp	r5, r0
 800692e:	f84c 1b04 	str.w	r1, [ip], #4
 8006932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006936:	dcec      	bgt.n	8006912 <__multadd+0x12>
 8006938:	b30e      	cbz	r6, 800697e <__multadd+0x7e>
 800693a:	68a3      	ldr	r3, [r4, #8]
 800693c:	42ab      	cmp	r3, r5
 800693e:	dc19      	bgt.n	8006974 <__multadd+0x74>
 8006940:	6861      	ldr	r1, [r4, #4]
 8006942:	4638      	mov	r0, r7
 8006944:	3101      	adds	r1, #1
 8006946:	f7ff ff79 	bl	800683c <_Balloc>
 800694a:	4680      	mov	r8, r0
 800694c:	b928      	cbnz	r0, 800695a <__multadd+0x5a>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <__multadd+0x84>)
 8006952:	480d      	ldr	r0, [pc, #52]	@ (8006988 <__multadd+0x88>)
 8006954:	21ba      	movs	r1, #186	@ 0xba
 8006956:	f000 fbe3 	bl	8007120 <__assert_func>
 800695a:	6922      	ldr	r2, [r4, #16]
 800695c:	3202      	adds	r2, #2
 800695e:	f104 010c 	add.w	r1, r4, #12
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	300c      	adds	r0, #12
 8006966:	f000 fbcd 	bl	8007104 <memcpy>
 800696a:	4621      	mov	r1, r4
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ffa5 	bl	80068bc <_Bfree>
 8006972:	4644      	mov	r4, r8
 8006974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006978:	3501      	adds	r5, #1
 800697a:	615e      	str	r6, [r3, #20]
 800697c:	6125      	str	r5, [r4, #16]
 800697e:	4620      	mov	r0, r4
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	08007928 	.word	0x08007928
 8006988:	0800794a 	.word	0x0800794a

0800698c <__hi0bits>:
 800698c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006990:	4603      	mov	r3, r0
 8006992:	bf36      	itet	cc
 8006994:	0403      	lslcc	r3, r0, #16
 8006996:	2000      	movcs	r0, #0
 8006998:	2010      	movcc	r0, #16
 800699a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800699e:	bf3c      	itt	cc
 80069a0:	021b      	lslcc	r3, r3, #8
 80069a2:	3008      	addcc	r0, #8
 80069a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069a8:	bf3c      	itt	cc
 80069aa:	011b      	lslcc	r3, r3, #4
 80069ac:	3004      	addcc	r0, #4
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b2:	bf3c      	itt	cc
 80069b4:	009b      	lslcc	r3, r3, #2
 80069b6:	3002      	addcc	r0, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	db05      	blt.n	80069c8 <__hi0bits+0x3c>
 80069bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069c0:	f100 0001 	add.w	r0, r0, #1
 80069c4:	bf08      	it	eq
 80069c6:	2020      	moveq	r0, #32
 80069c8:	4770      	bx	lr

080069ca <__lo0bits>:
 80069ca:	6803      	ldr	r3, [r0, #0]
 80069cc:	4602      	mov	r2, r0
 80069ce:	f013 0007 	ands.w	r0, r3, #7
 80069d2:	d00b      	beq.n	80069ec <__lo0bits+0x22>
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d421      	bmi.n	8006a1c <__lo0bits+0x52>
 80069d8:	0798      	lsls	r0, r3, #30
 80069da:	bf49      	itett	mi
 80069dc:	085b      	lsrmi	r3, r3, #1
 80069de:	089b      	lsrpl	r3, r3, #2
 80069e0:	2001      	movmi	r0, #1
 80069e2:	6013      	strmi	r3, [r2, #0]
 80069e4:	bf5c      	itt	pl
 80069e6:	6013      	strpl	r3, [r2, #0]
 80069e8:	2002      	movpl	r0, #2
 80069ea:	4770      	bx	lr
 80069ec:	b299      	uxth	r1, r3
 80069ee:	b909      	cbnz	r1, 80069f4 <__lo0bits+0x2a>
 80069f0:	0c1b      	lsrs	r3, r3, #16
 80069f2:	2010      	movs	r0, #16
 80069f4:	b2d9      	uxtb	r1, r3
 80069f6:	b909      	cbnz	r1, 80069fc <__lo0bits+0x32>
 80069f8:	3008      	adds	r0, #8
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	0719      	lsls	r1, r3, #28
 80069fe:	bf04      	itt	eq
 8006a00:	091b      	lsreq	r3, r3, #4
 8006a02:	3004      	addeq	r0, #4
 8006a04:	0799      	lsls	r1, r3, #30
 8006a06:	bf04      	itt	eq
 8006a08:	089b      	lsreq	r3, r3, #2
 8006a0a:	3002      	addeq	r0, #2
 8006a0c:	07d9      	lsls	r1, r3, #31
 8006a0e:	d403      	bmi.n	8006a18 <__lo0bits+0x4e>
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	f100 0001 	add.w	r0, r0, #1
 8006a16:	d003      	beq.n	8006a20 <__lo0bits+0x56>
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	4770      	bx	lr
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	4770      	bx	lr
 8006a20:	2020      	movs	r0, #32
 8006a22:	4770      	bx	lr

08006a24 <__i2b>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	460c      	mov	r4, r1
 8006a28:	2101      	movs	r1, #1
 8006a2a:	f7ff ff07 	bl	800683c <_Balloc>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	b928      	cbnz	r0, 8006a3e <__i2b+0x1a>
 8006a32:	4b05      	ldr	r3, [pc, #20]	@ (8006a48 <__i2b+0x24>)
 8006a34:	4805      	ldr	r0, [pc, #20]	@ (8006a4c <__i2b+0x28>)
 8006a36:	f240 1145 	movw	r1, #325	@ 0x145
 8006a3a:	f000 fb71 	bl	8007120 <__assert_func>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	6144      	str	r4, [r0, #20]
 8006a42:	6103      	str	r3, [r0, #16]
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	bf00      	nop
 8006a48:	08007928 	.word	0x08007928
 8006a4c:	0800794a 	.word	0x0800794a

08006a50 <__multiply>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	4614      	mov	r4, r2
 8006a56:	690a      	ldr	r2, [r1, #16]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bfa8      	it	ge
 8006a5e:	4623      	movge	r3, r4
 8006a60:	460f      	mov	r7, r1
 8006a62:	bfa4      	itt	ge
 8006a64:	460c      	movge	r4, r1
 8006a66:	461f      	movge	r7, r3
 8006a68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	6861      	ldr	r1, [r4, #4]
 8006a74:	eb0a 0609 	add.w	r6, sl, r9
 8006a78:	42b3      	cmp	r3, r6
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	bfb8      	it	lt
 8006a7e:	3101      	addlt	r1, #1
 8006a80:	f7ff fedc 	bl	800683c <_Balloc>
 8006a84:	b930      	cbnz	r0, 8006a94 <__multiply+0x44>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b44      	ldr	r3, [pc, #272]	@ (8006b9c <__multiply+0x14c>)
 8006a8a:	4845      	ldr	r0, [pc, #276]	@ (8006ba0 <__multiply+0x150>)
 8006a8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a90:	f000 fb46 	bl	8007120 <__assert_func>
 8006a94:	f100 0514 	add.w	r5, r0, #20
 8006a98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4543      	cmp	r3, r8
 8006aa2:	d321      	bcc.n	8006ae8 <__multiply+0x98>
 8006aa4:	f107 0114 	add.w	r1, r7, #20
 8006aa8:	f104 0214 	add.w	r2, r4, #20
 8006aac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ab0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	1b13      	subs	r3, r2, r4
 8006ab8:	3b15      	subs	r3, #21
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	3304      	adds	r3, #4
 8006ac0:	f104 0715 	add.w	r7, r4, #21
 8006ac4:	42ba      	cmp	r2, r7
 8006ac6:	bf38      	it	cc
 8006ac8:	2304      	movcc	r3, #4
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	9b02      	ldr	r3, [sp, #8]
 8006ace:	9103      	str	r1, [sp, #12]
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	d80c      	bhi.n	8006aee <__multiply+0x9e>
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	dd03      	ble.n	8006ae0 <__multiply+0x90>
 8006ad8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05b      	beq.n	8006b98 <__multiply+0x148>
 8006ae0:	6106      	str	r6, [r0, #16]
 8006ae2:	b005      	add	sp, #20
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	f843 2b04 	str.w	r2, [r3], #4
 8006aec:	e7d8      	b.n	8006aa0 <__multiply+0x50>
 8006aee:	f8b1 a000 	ldrh.w	sl, [r1]
 8006af2:	f1ba 0f00 	cmp.w	sl, #0
 8006af6:	d024      	beq.n	8006b42 <__multiply+0xf2>
 8006af8:	f104 0e14 	add.w	lr, r4, #20
 8006afc:	46a9      	mov	r9, r5
 8006afe:	f04f 0c00 	mov.w	ip, #0
 8006b02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b06:	f8d9 3000 	ldr.w	r3, [r9]
 8006b0a:	fa1f fb87 	uxth.w	fp, r7
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b18:	f8d9 7000 	ldr.w	r7, [r9]
 8006b1c:	4463      	add	r3, ip
 8006b1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b22:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b30:	4572      	cmp	r2, lr
 8006b32:	f849 3b04 	str.w	r3, [r9], #4
 8006b36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b3a:	d8e2      	bhi.n	8006b02 <__multiply+0xb2>
 8006b3c:	9b01      	ldr	r3, [sp, #4]
 8006b3e:	f845 c003 	str.w	ip, [r5, r3]
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b48:	3104      	adds	r1, #4
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	d021      	beq.n	8006b94 <__multiply+0x144>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	f104 0c14 	add.w	ip, r4, #20
 8006b56:	46ae      	mov	lr, r5
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8006b60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b64:	fb09 770b 	mla	r7, r9, fp, r7
 8006b68:	4457      	add	r7, sl
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b70:	f84e 3b04 	str.w	r3, [lr], #4
 8006b74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b7c:	f8be 3000 	ldrh.w	r3, [lr]
 8006b80:	fb09 330a 	mla	r3, r9, sl, r3
 8006b84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b88:	4562      	cmp	r2, ip
 8006b8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b8e:	d8e5      	bhi.n	8006b5c <__multiply+0x10c>
 8006b90:	9f01      	ldr	r7, [sp, #4]
 8006b92:	51eb      	str	r3, [r5, r7]
 8006b94:	3504      	adds	r5, #4
 8006b96:	e799      	b.n	8006acc <__multiply+0x7c>
 8006b98:	3e01      	subs	r6, #1
 8006b9a:	e79b      	b.n	8006ad4 <__multiply+0x84>
 8006b9c:	08007928 	.word	0x08007928
 8006ba0:	0800794a 	.word	0x0800794a

08006ba4 <__pow5mult>:
 8006ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	4615      	mov	r5, r2
 8006baa:	f012 0203 	ands.w	r2, r2, #3
 8006bae:	4607      	mov	r7, r0
 8006bb0:	460e      	mov	r6, r1
 8006bb2:	d007      	beq.n	8006bc4 <__pow5mult+0x20>
 8006bb4:	4c25      	ldr	r4, [pc, #148]	@ (8006c4c <__pow5mult+0xa8>)
 8006bb6:	3a01      	subs	r2, #1
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bbe:	f7ff fe9f 	bl	8006900 <__multadd>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	10ad      	asrs	r5, r5, #2
 8006bc6:	d03d      	beq.n	8006c44 <__pow5mult+0xa0>
 8006bc8:	69fc      	ldr	r4, [r7, #28]
 8006bca:	b97c      	cbnz	r4, 8006bec <__pow5mult+0x48>
 8006bcc:	2010      	movs	r0, #16
 8006bce:	f7ff fcd3 	bl	8006578 <malloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	61f8      	str	r0, [r7, #28]
 8006bd6:	b928      	cbnz	r0, 8006be4 <__pow5mult+0x40>
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c50 <__pow5mult+0xac>)
 8006bda:	481e      	ldr	r0, [pc, #120]	@ (8006c54 <__pow5mult+0xb0>)
 8006bdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006be0:	f000 fa9e 	bl	8007120 <__assert_func>
 8006be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006be8:	6004      	str	r4, [r0, #0]
 8006bea:	60c4      	str	r4, [r0, #12]
 8006bec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bf4:	b94c      	cbnz	r4, 8006c0a <__pow5mult+0x66>
 8006bf6:	f240 2171 	movw	r1, #625	@ 0x271
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff ff12 	bl	8006a24 <__i2b>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c06:	4604      	mov	r4, r0
 8006c08:	6003      	str	r3, [r0, #0]
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	07eb      	lsls	r3, r5, #31
 8006c10:	d50a      	bpl.n	8006c28 <__pow5mult+0x84>
 8006c12:	4631      	mov	r1, r6
 8006c14:	4622      	mov	r2, r4
 8006c16:	4638      	mov	r0, r7
 8006c18:	f7ff ff1a 	bl	8006a50 <__multiply>
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff fe4b 	bl	80068bc <_Bfree>
 8006c26:	4646      	mov	r6, r8
 8006c28:	106d      	asrs	r5, r5, #1
 8006c2a:	d00b      	beq.n	8006c44 <__pow5mult+0xa0>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	b938      	cbnz	r0, 8006c40 <__pow5mult+0x9c>
 8006c30:	4622      	mov	r2, r4
 8006c32:	4621      	mov	r1, r4
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff ff0b 	bl	8006a50 <__multiply>
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	f8c0 9000 	str.w	r9, [r0]
 8006c40:	4604      	mov	r4, r0
 8006c42:	e7e4      	b.n	8006c0e <__pow5mult+0x6a>
 8006c44:	4630      	mov	r0, r6
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	bf00      	nop
 8006c4c:	080079a4 	.word	0x080079a4
 8006c50:	080078b9 	.word	0x080078b9
 8006c54:	0800794a 	.word	0x0800794a

08006c58 <__lshift>:
 8006c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	6849      	ldr	r1, [r1, #4]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4691      	mov	r9, r2
 8006c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c70:	f108 0601 	add.w	r6, r8, #1
 8006c74:	42b3      	cmp	r3, r6
 8006c76:	db0b      	blt.n	8006c90 <__lshift+0x38>
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff fddf 	bl	800683c <_Balloc>
 8006c7e:	4605      	mov	r5, r0
 8006c80:	b948      	cbnz	r0, 8006c96 <__lshift+0x3e>
 8006c82:	4602      	mov	r2, r0
 8006c84:	4b28      	ldr	r3, [pc, #160]	@ (8006d28 <__lshift+0xd0>)
 8006c86:	4829      	ldr	r0, [pc, #164]	@ (8006d2c <__lshift+0xd4>)
 8006c88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c8c:	f000 fa48 	bl	8007120 <__assert_func>
 8006c90:	3101      	adds	r1, #1
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	e7ee      	b.n	8006c74 <__lshift+0x1c>
 8006c96:	2300      	movs	r3, #0
 8006c98:	f100 0114 	add.w	r1, r0, #20
 8006c9c:	f100 0210 	add.w	r2, r0, #16
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	4553      	cmp	r3, sl
 8006ca4:	db33      	blt.n	8006d0e <__lshift+0xb6>
 8006ca6:	6920      	ldr	r0, [r4, #16]
 8006ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cac:	f104 0314 	add.w	r3, r4, #20
 8006cb0:	f019 091f 	ands.w	r9, r9, #31
 8006cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cbc:	d02b      	beq.n	8006d16 <__lshift+0xbe>
 8006cbe:	f1c9 0e20 	rsb	lr, r9, #32
 8006cc2:	468a      	mov	sl, r1
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	fa00 f009 	lsl.w	r0, r0, r9
 8006ccc:	4310      	orrs	r0, r2
 8006cce:	f84a 0b04 	str.w	r0, [sl], #4
 8006cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd6:	459c      	cmp	ip, r3
 8006cd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cdc:	d8f3      	bhi.n	8006cc6 <__lshift+0x6e>
 8006cde:	ebac 0304 	sub.w	r3, ip, r4
 8006ce2:	3b15      	subs	r3, #21
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	3304      	adds	r3, #4
 8006cea:	f104 0015 	add.w	r0, r4, #21
 8006cee:	4584      	cmp	ip, r0
 8006cf0:	bf38      	it	cc
 8006cf2:	2304      	movcc	r3, #4
 8006cf4:	50ca      	str	r2, [r1, r3]
 8006cf6:	b10a      	cbz	r2, 8006cfc <__lshift+0xa4>
 8006cf8:	f108 0602 	add.w	r6, r8, #2
 8006cfc:	3e01      	subs	r6, #1
 8006cfe:	4638      	mov	r0, r7
 8006d00:	612e      	str	r6, [r5, #16]
 8006d02:	4621      	mov	r1, r4
 8006d04:	f7ff fdda 	bl	80068bc <_Bfree>
 8006d08:	4628      	mov	r0, r5
 8006d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d12:	3301      	adds	r3, #1
 8006d14:	e7c5      	b.n	8006ca2 <__lshift+0x4a>
 8006d16:	3904      	subs	r1, #4
 8006d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d20:	459c      	cmp	ip, r3
 8006d22:	d8f9      	bhi.n	8006d18 <__lshift+0xc0>
 8006d24:	e7ea      	b.n	8006cfc <__lshift+0xa4>
 8006d26:	bf00      	nop
 8006d28:	08007928 	.word	0x08007928
 8006d2c:	0800794a 	.word	0x0800794a

08006d30 <__mcmp>:
 8006d30:	690a      	ldr	r2, [r1, #16]
 8006d32:	4603      	mov	r3, r0
 8006d34:	6900      	ldr	r0, [r0, #16]
 8006d36:	1a80      	subs	r0, r0, r2
 8006d38:	b530      	push	{r4, r5, lr}
 8006d3a:	d10e      	bne.n	8006d5a <__mcmp+0x2a>
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	3114      	adds	r1, #20
 8006d40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d50:	4295      	cmp	r5, r2
 8006d52:	d003      	beq.n	8006d5c <__mcmp+0x2c>
 8006d54:	d205      	bcs.n	8006d62 <__mcmp+0x32>
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d5a:	bd30      	pop	{r4, r5, pc}
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d3f3      	bcc.n	8006d48 <__mcmp+0x18>
 8006d60:	e7fb      	b.n	8006d5a <__mcmp+0x2a>
 8006d62:	2001      	movs	r0, #1
 8006d64:	e7f9      	b.n	8006d5a <__mcmp+0x2a>
	...

08006d68 <__mdiff>:
 8006d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	4689      	mov	r9, r1
 8006d6e:	4606      	mov	r6, r0
 8006d70:	4611      	mov	r1, r2
 8006d72:	4648      	mov	r0, r9
 8006d74:	4614      	mov	r4, r2
 8006d76:	f7ff ffdb 	bl	8006d30 <__mcmp>
 8006d7a:	1e05      	subs	r5, r0, #0
 8006d7c:	d112      	bne.n	8006da4 <__mdiff+0x3c>
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff fd5b 	bl	800683c <_Balloc>
 8006d86:	4602      	mov	r2, r0
 8006d88:	b928      	cbnz	r0, 8006d96 <__mdiff+0x2e>
 8006d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e88 <__mdiff+0x120>)
 8006d8c:	f240 2137 	movw	r1, #567	@ 0x237
 8006d90:	483e      	ldr	r0, [pc, #248]	@ (8006e8c <__mdiff+0x124>)
 8006d92:	f000 f9c5 	bl	8007120 <__assert_func>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	b003      	add	sp, #12
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	bfbc      	itt	lt
 8006da6:	464b      	movlt	r3, r9
 8006da8:	46a1      	movlt	r9, r4
 8006daa:	4630      	mov	r0, r6
 8006dac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006db0:	bfba      	itte	lt
 8006db2:	461c      	movlt	r4, r3
 8006db4:	2501      	movlt	r5, #1
 8006db6:	2500      	movge	r5, #0
 8006db8:	f7ff fd40 	bl	800683c <_Balloc>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	b918      	cbnz	r0, 8006dc8 <__mdiff+0x60>
 8006dc0:	4b31      	ldr	r3, [pc, #196]	@ (8006e88 <__mdiff+0x120>)
 8006dc2:	f240 2145 	movw	r1, #581	@ 0x245
 8006dc6:	e7e3      	b.n	8006d90 <__mdiff+0x28>
 8006dc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006dcc:	6926      	ldr	r6, [r4, #16]
 8006dce:	60c5      	str	r5, [r0, #12]
 8006dd0:	f109 0310 	add.w	r3, r9, #16
 8006dd4:	f109 0514 	add.w	r5, r9, #20
 8006dd8:	f104 0e14 	add.w	lr, r4, #20
 8006ddc:	f100 0b14 	add.w	fp, r0, #20
 8006de0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006de4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	46d9      	mov	r9, fp
 8006dec:	f04f 0c00 	mov.w	ip, #0
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006df6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	fa1f f38a 	uxth.w	r3, sl
 8006e00:	4619      	mov	r1, r3
 8006e02:	b283      	uxth	r3, r0
 8006e04:	1acb      	subs	r3, r1, r3
 8006e06:	0c00      	lsrs	r0, r0, #16
 8006e08:	4463      	add	r3, ip
 8006e0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e18:	4576      	cmp	r6, lr
 8006e1a:	f849 3b04 	str.w	r3, [r9], #4
 8006e1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e22:	d8e5      	bhi.n	8006df0 <__mdiff+0x88>
 8006e24:	1b33      	subs	r3, r6, r4
 8006e26:	3b15      	subs	r3, #21
 8006e28:	f023 0303 	bic.w	r3, r3, #3
 8006e2c:	3415      	adds	r4, #21
 8006e2e:	3304      	adds	r3, #4
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	bf38      	it	cc
 8006e34:	2304      	movcc	r3, #4
 8006e36:	441d      	add	r5, r3
 8006e38:	445b      	add	r3, fp
 8006e3a:	461e      	mov	r6, r3
 8006e3c:	462c      	mov	r4, r5
 8006e3e:	4544      	cmp	r4, r8
 8006e40:	d30e      	bcc.n	8006e60 <__mdiff+0xf8>
 8006e42:	f108 0103 	add.w	r1, r8, #3
 8006e46:	1b49      	subs	r1, r1, r5
 8006e48:	f021 0103 	bic.w	r1, r1, #3
 8006e4c:	3d03      	subs	r5, #3
 8006e4e:	45a8      	cmp	r8, r5
 8006e50:	bf38      	it	cc
 8006e52:	2100      	movcc	r1, #0
 8006e54:	440b      	add	r3, r1
 8006e56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e5a:	b191      	cbz	r1, 8006e82 <__mdiff+0x11a>
 8006e5c:	6117      	str	r7, [r2, #16]
 8006e5e:	e79d      	b.n	8006d9c <__mdiff+0x34>
 8006e60:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e64:	46e6      	mov	lr, ip
 8006e66:	0c08      	lsrs	r0, r1, #16
 8006e68:	fa1c fc81 	uxtah	ip, ip, r1
 8006e6c:	4471      	add	r1, lr
 8006e6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e72:	b289      	uxth	r1, r1
 8006e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e78:	f846 1b04 	str.w	r1, [r6], #4
 8006e7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e80:	e7dd      	b.n	8006e3e <__mdiff+0xd6>
 8006e82:	3f01      	subs	r7, #1
 8006e84:	e7e7      	b.n	8006e56 <__mdiff+0xee>
 8006e86:	bf00      	nop
 8006e88:	08007928 	.word	0x08007928
 8006e8c:	0800794a 	.word	0x0800794a

08006e90 <__d2b>:
 8006e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e94:	460f      	mov	r7, r1
 8006e96:	2101      	movs	r1, #1
 8006e98:	ec59 8b10 	vmov	r8, r9, d0
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	f7ff fccd 	bl	800683c <_Balloc>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	b930      	cbnz	r0, 8006eb4 <__d2b+0x24>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b23      	ldr	r3, [pc, #140]	@ (8006f38 <__d2b+0xa8>)
 8006eaa:	4824      	ldr	r0, [pc, #144]	@ (8006f3c <__d2b+0xac>)
 8006eac:	f240 310f 	movw	r1, #783	@ 0x30f
 8006eb0:	f000 f936 	bl	8007120 <__assert_func>
 8006eb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ebc:	b10d      	cbz	r5, 8006ec2 <__d2b+0x32>
 8006ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	f1b8 0300 	subs.w	r3, r8, #0
 8006ec8:	d023      	beq.n	8006f12 <__d2b+0x82>
 8006eca:	4668      	mov	r0, sp
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f7ff fd7c 	bl	80069ca <__lo0bits>
 8006ed2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ed6:	b1d0      	cbz	r0, 8006f0e <__d2b+0x7e>
 8006ed8:	f1c0 0320 	rsb	r3, r0, #32
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	40c2      	lsrs	r2, r0
 8006ee4:	6163      	str	r3, [r4, #20]
 8006ee6:	9201      	str	r2, [sp, #4]
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	61a3      	str	r3, [r4, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2201      	moveq	r2, #1
 8006ef2:	2202      	movne	r2, #2
 8006ef4:	6122      	str	r2, [r4, #16]
 8006ef6:	b1a5      	cbz	r5, 8006f22 <__d2b+0x92>
 8006ef8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006efc:	4405      	add	r5, r0
 8006efe:	603d      	str	r5, [r7, #0]
 8006f00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f04:	6030      	str	r0, [r6, #0]
 8006f06:	4620      	mov	r0, r4
 8006f08:	b003      	add	sp, #12
 8006f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	6161      	str	r1, [r4, #20]
 8006f10:	e7ea      	b.n	8006ee8 <__d2b+0x58>
 8006f12:	a801      	add	r0, sp, #4
 8006f14:	f7ff fd59 	bl	80069ca <__lo0bits>
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	6163      	str	r3, [r4, #20]
 8006f1c:	3020      	adds	r0, #32
 8006f1e:	2201      	movs	r2, #1
 8006f20:	e7e8      	b.n	8006ef4 <__d2b+0x64>
 8006f22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f2a:	6038      	str	r0, [r7, #0]
 8006f2c:	6918      	ldr	r0, [r3, #16]
 8006f2e:	f7ff fd2d 	bl	800698c <__hi0bits>
 8006f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f36:	e7e5      	b.n	8006f04 <__d2b+0x74>
 8006f38:	08007928 	.word	0x08007928
 8006f3c:	0800794a 	.word	0x0800794a

08006f40 <__sread>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	460c      	mov	r4, r1
 8006f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f48:	f000 f8a8 	bl	800709c <_read_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	bfab      	itete	ge
 8006f50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f52:	89a3      	ldrhlt	r3, [r4, #12]
 8006f54:	181b      	addge	r3, r3, r0
 8006f56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f5a:	bfac      	ite	ge
 8006f5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f5e:	81a3      	strhlt	r3, [r4, #12]
 8006f60:	bd10      	pop	{r4, pc}

08006f62 <__swrite>:
 8006f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	461f      	mov	r7, r3
 8006f68:	898b      	ldrh	r3, [r1, #12]
 8006f6a:	05db      	lsls	r3, r3, #23
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4616      	mov	r6, r2
 8006f72:	d505      	bpl.n	8006f80 <__swrite+0x1e>
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	2302      	movs	r3, #2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f000 f87c 	bl	8007078 <_lseek_r>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	f000 b8a3 	b.w	80070e0 <_write_r>

08006f9a <__sseek>:
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f000 f869 	bl	8007078 <_lseek_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	bf15      	itete	ne
 8006fac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fb6:	81a3      	strheq	r3, [r4, #12]
 8006fb8:	bf18      	it	ne
 8006fba:	81a3      	strhne	r3, [r4, #12]
 8006fbc:	bd10      	pop	{r4, pc}

08006fbe <__sclose>:
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 b849 	b.w	8007058 <_close_r>

08006fc6 <_realloc_r>:
 8006fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	4680      	mov	r8, r0
 8006fcc:	4615      	mov	r5, r2
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b921      	cbnz	r1, 8006fdc <_realloc_r+0x16>
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	4611      	mov	r1, r2
 8006fd8:	f7ff baf8 	b.w	80065cc <_malloc_r>
 8006fdc:	b92a      	cbnz	r2, 8006fea <_realloc_r+0x24>
 8006fde:	f000 f8d1 	bl	8007184 <_free_r>
 8006fe2:	2400      	movs	r4, #0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fea:	f000 f927 	bl	800723c <_malloc_usable_size_r>
 8006fee:	4285      	cmp	r5, r0
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	d802      	bhi.n	8006ffa <_realloc_r+0x34>
 8006ff4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ff8:	d8f4      	bhi.n	8006fe4 <_realloc_r+0x1e>
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	f7ff fae5 	bl	80065cc <_malloc_r>
 8007002:	4607      	mov	r7, r0
 8007004:	2800      	cmp	r0, #0
 8007006:	d0ec      	beq.n	8006fe2 <_realloc_r+0x1c>
 8007008:	42b5      	cmp	r5, r6
 800700a:	462a      	mov	r2, r5
 800700c:	4621      	mov	r1, r4
 800700e:	bf28      	it	cs
 8007010:	4632      	movcs	r2, r6
 8007012:	f000 f877 	bl	8007104 <memcpy>
 8007016:	4621      	mov	r1, r4
 8007018:	4640      	mov	r0, r8
 800701a:	f000 f8b3 	bl	8007184 <_free_r>
 800701e:	463c      	mov	r4, r7
 8007020:	e7e0      	b.n	8006fe4 <_realloc_r+0x1e>

08007022 <memmove>:
 8007022:	4288      	cmp	r0, r1
 8007024:	b510      	push	{r4, lr}
 8007026:	eb01 0402 	add.w	r4, r1, r2
 800702a:	d902      	bls.n	8007032 <memmove+0x10>
 800702c:	4284      	cmp	r4, r0
 800702e:	4623      	mov	r3, r4
 8007030:	d807      	bhi.n	8007042 <memmove+0x20>
 8007032:	1e43      	subs	r3, r0, #1
 8007034:	42a1      	cmp	r1, r4
 8007036:	d008      	beq.n	800704a <memmove+0x28>
 8007038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800703c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007040:	e7f8      	b.n	8007034 <memmove+0x12>
 8007042:	4402      	add	r2, r0
 8007044:	4601      	mov	r1, r0
 8007046:	428a      	cmp	r2, r1
 8007048:	d100      	bne.n	800704c <memmove+0x2a>
 800704a:	bd10      	pop	{r4, pc}
 800704c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007050:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007054:	e7f7      	b.n	8007046 <memmove+0x24>
	...

08007058 <_close_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d06      	ldr	r5, [pc, #24]	@ (8007074 <_close_r+0x1c>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fa f9aa 	bl	80013bc <_close>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d102      	bne.n	8007072 <_close_r+0x1a>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	b103      	cbz	r3, 8007072 <_close_r+0x1a>
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	20000434 	.word	0x20000434

08007078 <_lseek_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d07      	ldr	r5, [pc, #28]	@ (8007098 <_lseek_r+0x20>)
 800707c:	4604      	mov	r4, r0
 800707e:	4608      	mov	r0, r1
 8007080:	4611      	mov	r1, r2
 8007082:	2200      	movs	r2, #0
 8007084:	602a      	str	r2, [r5, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	f7fa f9bf 	bl	800140a <_lseek>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_lseek_r+0x1e>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_lseek_r+0x1e>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000434 	.word	0x20000434

0800709c <_read_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	@ (80070bc <_read_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa f94d 	bl	800134a <_read>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_read_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_read_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	20000434 	.word	0x20000434

080070c0 <_sbrk_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d06      	ldr	r5, [pc, #24]	@ (80070dc <_sbrk_r+0x1c>)
 80070c4:	2300      	movs	r3, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	f7fa f9aa 	bl	8001424 <_sbrk>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_sbrk_r+0x1a>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_sbrk_r+0x1a>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20000434 	.word	0x20000434

080070e0 <_write_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d07      	ldr	r5, [pc, #28]	@ (8007100 <_write_r+0x20>)
 80070e4:	4604      	mov	r4, r0
 80070e6:	4608      	mov	r0, r1
 80070e8:	4611      	mov	r1, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fa f948 	bl	8001384 <_write>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_write_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_write_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000434 	.word	0x20000434

08007104 <memcpy>:
 8007104:	440a      	add	r2, r1
 8007106:	4291      	cmp	r1, r2
 8007108:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800710c:	d100      	bne.n	8007110 <memcpy+0xc>
 800710e:	4770      	bx	lr
 8007110:	b510      	push	{r4, lr}
 8007112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800711a:	4291      	cmp	r1, r2
 800711c:	d1f9      	bne.n	8007112 <memcpy+0xe>
 800711e:	bd10      	pop	{r4, pc}

08007120 <__assert_func>:
 8007120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007122:	4614      	mov	r4, r2
 8007124:	461a      	mov	r2, r3
 8007126:	4b09      	ldr	r3, [pc, #36]	@ (800714c <__assert_func+0x2c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4605      	mov	r5, r0
 800712c:	68d8      	ldr	r0, [r3, #12]
 800712e:	b954      	cbnz	r4, 8007146 <__assert_func+0x26>
 8007130:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <__assert_func+0x30>)
 8007132:	461c      	mov	r4, r3
 8007134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007138:	9100      	str	r1, [sp, #0]
 800713a:	462b      	mov	r3, r5
 800713c:	4905      	ldr	r1, [pc, #20]	@ (8007154 <__assert_func+0x34>)
 800713e:	f000 f885 	bl	800724c <fiprintf>
 8007142:	f000 f8a2 	bl	800728a <abort>
 8007146:	4b04      	ldr	r3, [pc, #16]	@ (8007158 <__assert_func+0x38>)
 8007148:	e7f4      	b.n	8007134 <__assert_func+0x14>
 800714a:	bf00      	nop
 800714c:	20000018 	.word	0x20000018
 8007150:	08007be6 	.word	0x08007be6
 8007154:	08007bb8 	.word	0x08007bb8
 8007158:	08007bab 	.word	0x08007bab

0800715c <_calloc_r>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	fba1 5402 	umull	r5, r4, r1, r2
 8007162:	b93c      	cbnz	r4, 8007174 <_calloc_r+0x18>
 8007164:	4629      	mov	r1, r5
 8007166:	f7ff fa31 	bl	80065cc <_malloc_r>
 800716a:	4606      	mov	r6, r0
 800716c:	b928      	cbnz	r0, 800717a <_calloc_r+0x1e>
 800716e:	2600      	movs	r6, #0
 8007170:	4630      	mov	r0, r6
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	220c      	movs	r2, #12
 8007176:	6002      	str	r2, [r0, #0]
 8007178:	e7f9      	b.n	800716e <_calloc_r+0x12>
 800717a:	462a      	mov	r2, r5
 800717c:	4621      	mov	r1, r4
 800717e:	f7fe fa1d 	bl	80055bc <memset>
 8007182:	e7f5      	b.n	8007170 <_calloc_r+0x14>

08007184 <_free_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	2900      	cmp	r1, #0
 800718a:	d041      	beq.n	8007210 <_free_r+0x8c>
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f0c      	subs	r4, r1, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfb8      	it	lt
 8007196:	18e4      	addlt	r4, r4, r3
 8007198:	f7ff fb44 	bl	8006824 <__malloc_lock>
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <_free_r+0x90>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x2c>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	4628      	mov	r0, r5
 80071a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ac:	f7ff bb40 	b.w	8006830 <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x42>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x1e>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x4c>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x42>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1850      	adds	r0, r2, r1
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x6c>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	4401      	add	r1, r0
 80071dc:	1850      	adds	r0, r2, r1
 80071de:	4283      	cmp	r3, r0
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x22>
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	4408      	add	r0, r1
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x22>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x74>
 80071f2:	230c      	movs	r3, #12
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x22>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1809      	addeq	r1, r1, r0
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x22>
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	20000430 	.word	0x20000430

08007218 <__ascii_mbtowc>:
 8007218:	b082      	sub	sp, #8
 800721a:	b901      	cbnz	r1, 800721e <__ascii_mbtowc+0x6>
 800721c:	a901      	add	r1, sp, #4
 800721e:	b142      	cbz	r2, 8007232 <__ascii_mbtowc+0x1a>
 8007220:	b14b      	cbz	r3, 8007236 <__ascii_mbtowc+0x1e>
 8007222:	7813      	ldrb	r3, [r2, #0]
 8007224:	600b      	str	r3, [r1, #0]
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	1e10      	subs	r0, r2, #0
 800722a:	bf18      	it	ne
 800722c:	2001      	movne	r0, #1
 800722e:	b002      	add	sp, #8
 8007230:	4770      	bx	lr
 8007232:	4610      	mov	r0, r2
 8007234:	e7fb      	b.n	800722e <__ascii_mbtowc+0x16>
 8007236:	f06f 0001 	mvn.w	r0, #1
 800723a:	e7f8      	b.n	800722e <__ascii_mbtowc+0x16>

0800723c <_malloc_usable_size_r>:
 800723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007240:	1f18      	subs	r0, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfbc      	itt	lt
 8007246:	580b      	ldrlt	r3, [r1, r0]
 8007248:	18c0      	addlt	r0, r0, r3
 800724a:	4770      	bx	lr

0800724c <fiprintf>:
 800724c:	b40e      	push	{r1, r2, r3}
 800724e:	b503      	push	{r0, r1, lr}
 8007250:	4601      	mov	r1, r0
 8007252:	ab03      	add	r3, sp, #12
 8007254:	4805      	ldr	r0, [pc, #20]	@ (800726c <fiprintf+0x20>)
 8007256:	f853 2b04 	ldr.w	r2, [r3], #4
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	f000 f845 	bl	80072ec <_vfiprintf_r>
 8007262:	b002      	add	sp, #8
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b003      	add	sp, #12
 800726a:	4770      	bx	lr
 800726c:	20000018 	.word	0x20000018

08007270 <__ascii_wctomb>:
 8007270:	4603      	mov	r3, r0
 8007272:	4608      	mov	r0, r1
 8007274:	b141      	cbz	r1, 8007288 <__ascii_wctomb+0x18>
 8007276:	2aff      	cmp	r2, #255	@ 0xff
 8007278:	d904      	bls.n	8007284 <__ascii_wctomb+0x14>
 800727a:	228a      	movs	r2, #138	@ 0x8a
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007282:	4770      	bx	lr
 8007284:	700a      	strb	r2, [r1, #0]
 8007286:	2001      	movs	r0, #1
 8007288:	4770      	bx	lr

0800728a <abort>:
 800728a:	b508      	push	{r3, lr}
 800728c:	2006      	movs	r0, #6
 800728e:	f000 fa85 	bl	800779c <raise>
 8007292:	2001      	movs	r0, #1
 8007294:	f7fa f84e 	bl	8001334 <_exit>

08007298 <__sfputc_r>:
 8007298:	6893      	ldr	r3, [r2, #8]
 800729a:	3b01      	subs	r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	b410      	push	{r4}
 80072a0:	6093      	str	r3, [r2, #8]
 80072a2:	da08      	bge.n	80072b6 <__sfputc_r+0x1e>
 80072a4:	6994      	ldr	r4, [r2, #24]
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	db01      	blt.n	80072ae <__sfputc_r+0x16>
 80072aa:	290a      	cmp	r1, #10
 80072ac:	d103      	bne.n	80072b6 <__sfputc_r+0x1e>
 80072ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b2:	f000 b933 	b.w	800751c <__swbuf_r>
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	1c58      	adds	r0, r3, #1
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	7019      	strb	r1, [r3, #0]
 80072be:	4608      	mov	r0, r1
 80072c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <__sfputs_r>:
 80072c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	4614      	mov	r4, r2
 80072ce:	18d5      	adds	r5, r2, r3
 80072d0:	42ac      	cmp	r4, r5
 80072d2:	d101      	bne.n	80072d8 <__sfputs_r+0x12>
 80072d4:	2000      	movs	r0, #0
 80072d6:	e007      	b.n	80072e8 <__sfputs_r+0x22>
 80072d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072dc:	463a      	mov	r2, r7
 80072de:	4630      	mov	r0, r6
 80072e0:	f7ff ffda 	bl	8007298 <__sfputc_r>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d1f3      	bne.n	80072d0 <__sfputs_r+0xa>
 80072e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072ec <_vfiprintf_r>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	460d      	mov	r5, r1
 80072f2:	b09d      	sub	sp, #116	@ 0x74
 80072f4:	4614      	mov	r4, r2
 80072f6:	4698      	mov	r8, r3
 80072f8:	4606      	mov	r6, r0
 80072fa:	b118      	cbz	r0, 8007304 <_vfiprintf_r+0x18>
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	b90b      	cbnz	r3, 8007304 <_vfiprintf_r+0x18>
 8007300:	f7fe f8ec 	bl	80054dc <__sinit>
 8007304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	d405      	bmi.n	8007316 <_vfiprintf_r+0x2a>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	059a      	lsls	r2, r3, #22
 800730e:	d402      	bmi.n	8007316 <_vfiprintf_r+0x2a>
 8007310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007312:	f7fe f98a 	bl	800562a <__retarget_lock_acquire_recursive>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	071b      	lsls	r3, r3, #28
 800731a:	d501      	bpl.n	8007320 <_vfiprintf_r+0x34>
 800731c:	692b      	ldr	r3, [r5, #16]
 800731e:	b99b      	cbnz	r3, 8007348 <_vfiprintf_r+0x5c>
 8007320:	4629      	mov	r1, r5
 8007322:	4630      	mov	r0, r6
 8007324:	f000 f938 	bl	8007598 <__swsetup_r>
 8007328:	b170      	cbz	r0, 8007348 <_vfiprintf_r+0x5c>
 800732a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800732c:	07dc      	lsls	r4, r3, #31
 800732e:	d504      	bpl.n	800733a <_vfiprintf_r+0x4e>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007334:	b01d      	add	sp, #116	@ 0x74
 8007336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	0598      	lsls	r0, r3, #22
 800733e:	d4f7      	bmi.n	8007330 <_vfiprintf_r+0x44>
 8007340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007342:	f7fe f973 	bl	800562c <__retarget_lock_release_recursive>
 8007346:	e7f3      	b.n	8007330 <_vfiprintf_r+0x44>
 8007348:	2300      	movs	r3, #0
 800734a:	9309      	str	r3, [sp, #36]	@ 0x24
 800734c:	2320      	movs	r3, #32
 800734e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007352:	f8cd 800c 	str.w	r8, [sp, #12]
 8007356:	2330      	movs	r3, #48	@ 0x30
 8007358:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007508 <_vfiprintf_r+0x21c>
 800735c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007360:	f04f 0901 	mov.w	r9, #1
 8007364:	4623      	mov	r3, r4
 8007366:	469a      	mov	sl, r3
 8007368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736c:	b10a      	cbz	r2, 8007372 <_vfiprintf_r+0x86>
 800736e:	2a25      	cmp	r2, #37	@ 0x25
 8007370:	d1f9      	bne.n	8007366 <_vfiprintf_r+0x7a>
 8007372:	ebba 0b04 	subs.w	fp, sl, r4
 8007376:	d00b      	beq.n	8007390 <_vfiprintf_r+0xa4>
 8007378:	465b      	mov	r3, fp
 800737a:	4622      	mov	r2, r4
 800737c:	4629      	mov	r1, r5
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ffa1 	bl	80072c6 <__sfputs_r>
 8007384:	3001      	adds	r0, #1
 8007386:	f000 80a7 	beq.w	80074d8 <_vfiprintf_r+0x1ec>
 800738a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800738c:	445a      	add	r2, fp
 800738e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 809f 	beq.w	80074d8 <_vfiprintf_r+0x1ec>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a4:	f10a 0a01 	add.w	sl, sl, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b2:	4654      	mov	r4, sl
 80073b4:	2205      	movs	r2, #5
 80073b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ba:	4853      	ldr	r0, [pc, #332]	@ (8007508 <_vfiprintf_r+0x21c>)
 80073bc:	f7f8 ff10 	bl	80001e0 <memchr>
 80073c0:	9a04      	ldr	r2, [sp, #16]
 80073c2:	b9d8      	cbnz	r0, 80073fc <_vfiprintf_r+0x110>
 80073c4:	06d1      	lsls	r1, r2, #27
 80073c6:	bf44      	itt	mi
 80073c8:	2320      	movmi	r3, #32
 80073ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ce:	0713      	lsls	r3, r2, #28
 80073d0:	bf44      	itt	mi
 80073d2:	232b      	movmi	r3, #43	@ 0x2b
 80073d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d8:	f89a 3000 	ldrb.w	r3, [sl]
 80073dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80073de:	d015      	beq.n	800740c <_vfiprintf_r+0x120>
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	4654      	mov	r4, sl
 80073e4:	2000      	movs	r0, #0
 80073e6:	f04f 0c0a 	mov.w	ip, #10
 80073ea:	4621      	mov	r1, r4
 80073ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f0:	3b30      	subs	r3, #48	@ 0x30
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d94b      	bls.n	800748e <_vfiprintf_r+0x1a2>
 80073f6:	b1b0      	cbz	r0, 8007426 <_vfiprintf_r+0x13a>
 80073f8:	9207      	str	r2, [sp, #28]
 80073fa:	e014      	b.n	8007426 <_vfiprintf_r+0x13a>
 80073fc:	eba0 0308 	sub.w	r3, r0, r8
 8007400:	fa09 f303 	lsl.w	r3, r9, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	46a2      	mov	sl, r4
 800740a:	e7d2      	b.n	80073b2 <_vfiprintf_r+0xc6>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	1d19      	adds	r1, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	9103      	str	r1, [sp, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfbb      	ittet	lt
 8007418:	425b      	neglt	r3, r3
 800741a:	f042 0202 	orrlt.w	r2, r2, #2
 800741e:	9307      	strge	r3, [sp, #28]
 8007420:	9307      	strlt	r3, [sp, #28]
 8007422:	bfb8      	it	lt
 8007424:	9204      	strlt	r2, [sp, #16]
 8007426:	7823      	ldrb	r3, [r4, #0]
 8007428:	2b2e      	cmp	r3, #46	@ 0x2e
 800742a:	d10a      	bne.n	8007442 <_vfiprintf_r+0x156>
 800742c:	7863      	ldrb	r3, [r4, #1]
 800742e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007430:	d132      	bne.n	8007498 <_vfiprintf_r+0x1ac>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	9203      	str	r2, [sp, #12]
 800743a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800743e:	3402      	adds	r4, #2
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007518 <_vfiprintf_r+0x22c>
 8007446:	7821      	ldrb	r1, [r4, #0]
 8007448:	2203      	movs	r2, #3
 800744a:	4650      	mov	r0, sl
 800744c:	f7f8 fec8 	bl	80001e0 <memchr>
 8007450:	b138      	cbz	r0, 8007462 <_vfiprintf_r+0x176>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	eba0 000a 	sub.w	r0, r0, sl
 8007458:	2240      	movs	r2, #64	@ 0x40
 800745a:	4082      	lsls	r2, r0
 800745c:	4313      	orrs	r3, r2
 800745e:	3401      	adds	r4, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4829      	ldr	r0, [pc, #164]	@ (800750c <_vfiprintf_r+0x220>)
 8007468:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800746c:	2206      	movs	r2, #6
 800746e:	f7f8 feb7 	bl	80001e0 <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d03f      	beq.n	80074f6 <_vfiprintf_r+0x20a>
 8007476:	4b26      	ldr	r3, [pc, #152]	@ (8007510 <_vfiprintf_r+0x224>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_vfiprintf_r+0x1d6>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	443b      	add	r3, r7
 800748a:	9309      	str	r3, [sp, #36]	@ 0x24
 800748c:	e76a      	b.n	8007364 <_vfiprintf_r+0x78>
 800748e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007492:	460c      	mov	r4, r1
 8007494:	2001      	movs	r0, #1
 8007496:	e7a8      	b.n	80073ea <_vfiprintf_r+0xfe>
 8007498:	2300      	movs	r3, #0
 800749a:	3401      	adds	r4, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4619      	mov	r1, r3
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	@ 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_vfiprintf_r+0x1cc>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c6      	beq.n	8007442 <_vfiprintf_r+0x156>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c4      	b.n	8007442 <_vfiprintf_r+0x156>
 80074b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80074bc:	4604      	mov	r4, r0
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f0      	b.n	80074a4 <_vfiprintf_r+0x1b8>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4b12      	ldr	r3, [pc, #72]	@ (8007514 <_vfiprintf_r+0x228>)
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7fd fbc1 	bl	8004c54 <_printf_float>
 80074d2:	4607      	mov	r7, r0
 80074d4:	1c78      	adds	r0, r7, #1
 80074d6:	d1d6      	bne.n	8007486 <_vfiprintf_r+0x19a>
 80074d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x1fe>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x1fe>
 80074e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e6:	f7fe f8a1 	bl	800562c <__retarget_lock_release_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af1f 	bmi.w	8007330 <_vfiprintf_r+0x44>
 80074f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f4:	e71e      	b.n	8007334 <_vfiprintf_r+0x48>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <_vfiprintf_r+0x228>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4630      	mov	r0, r6
 8007502:	f7fd fe3f 	bl	8005184 <_printf_i>
 8007506:	e7e4      	b.n	80074d2 <_vfiprintf_r+0x1e6>
 8007508:	08007939 	.word	0x08007939
 800750c:	08007943 	.word	0x08007943
 8007510:	08004c55 	.word	0x08004c55
 8007514:	080072c7 	.word	0x080072c7
 8007518:	0800793f 	.word	0x0800793f

0800751c <__swbuf_r>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	460e      	mov	r6, r1
 8007520:	4614      	mov	r4, r2
 8007522:	4605      	mov	r5, r0
 8007524:	b118      	cbz	r0, 800752e <__swbuf_r+0x12>
 8007526:	6a03      	ldr	r3, [r0, #32]
 8007528:	b90b      	cbnz	r3, 800752e <__swbuf_r+0x12>
 800752a:	f7fd ffd7 	bl	80054dc <__sinit>
 800752e:	69a3      	ldr	r3, [r4, #24]
 8007530:	60a3      	str	r3, [r4, #8]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	071a      	lsls	r2, r3, #28
 8007536:	d501      	bpl.n	800753c <__swbuf_r+0x20>
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	b943      	cbnz	r3, 800754e <__swbuf_r+0x32>
 800753c:	4621      	mov	r1, r4
 800753e:	4628      	mov	r0, r5
 8007540:	f000 f82a 	bl	8007598 <__swsetup_r>
 8007544:	b118      	cbz	r0, 800754e <__swbuf_r+0x32>
 8007546:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800754a:	4638      	mov	r0, r7
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	1a98      	subs	r0, r3, r2
 8007554:	6963      	ldr	r3, [r4, #20]
 8007556:	b2f6      	uxtb	r6, r6
 8007558:	4283      	cmp	r3, r0
 800755a:	4637      	mov	r7, r6
 800755c:	dc05      	bgt.n	800756a <__swbuf_r+0x4e>
 800755e:	4621      	mov	r1, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f7ff f937 	bl	80067d4 <_fflush_r>
 8007566:	2800      	cmp	r0, #0
 8007568:	d1ed      	bne.n	8007546 <__swbuf_r+0x2a>
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	3b01      	subs	r3, #1
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	701e      	strb	r6, [r3, #0]
 8007578:	6962      	ldr	r2, [r4, #20]
 800757a:	1c43      	adds	r3, r0, #1
 800757c:	429a      	cmp	r2, r3
 800757e:	d004      	beq.n	800758a <__swbuf_r+0x6e>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d5e1      	bpl.n	800754a <__swbuf_r+0x2e>
 8007586:	2e0a      	cmp	r6, #10
 8007588:	d1df      	bne.n	800754a <__swbuf_r+0x2e>
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff f921 	bl	80067d4 <_fflush_r>
 8007592:	2800      	cmp	r0, #0
 8007594:	d0d9      	beq.n	800754a <__swbuf_r+0x2e>
 8007596:	e7d6      	b.n	8007546 <__swbuf_r+0x2a>

08007598 <__swsetup_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4b29      	ldr	r3, [pc, #164]	@ (8007640 <__swsetup_r+0xa8>)
 800759c:	4605      	mov	r5, r0
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	460c      	mov	r4, r1
 80075a2:	b118      	cbz	r0, 80075ac <__swsetup_r+0x14>
 80075a4:	6a03      	ldr	r3, [r0, #32]
 80075a6:	b90b      	cbnz	r3, 80075ac <__swsetup_r+0x14>
 80075a8:	f7fd ff98 	bl	80054dc <__sinit>
 80075ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d422      	bmi.n	80075fa <__swsetup_r+0x62>
 80075b4:	06da      	lsls	r2, r3, #27
 80075b6:	d407      	bmi.n	80075c8 <__swsetup_r+0x30>
 80075b8:	2209      	movs	r2, #9
 80075ba:	602a      	str	r2, [r5, #0]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c6:	e033      	b.n	8007630 <__swsetup_r+0x98>
 80075c8:	0758      	lsls	r0, r3, #29
 80075ca:	d512      	bpl.n	80075f2 <__swsetup_r+0x5a>
 80075cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ce:	b141      	cbz	r1, 80075e2 <__swsetup_r+0x4a>
 80075d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d4:	4299      	cmp	r1, r3
 80075d6:	d002      	beq.n	80075de <__swsetup_r+0x46>
 80075d8:	4628      	mov	r0, r5
 80075da:	f7ff fdd3 	bl	8007184 <_free_r>
 80075de:	2300      	movs	r3, #0
 80075e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b94b      	cbnz	r3, 8007612 <__swsetup_r+0x7a>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007608:	d003      	beq.n	8007612 <__swsetup_r+0x7a>
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f83f 	bl	8007690 <__smakebuf_r>
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	f013 0201 	ands.w	r2, r3, #1
 800761a:	d00a      	beq.n	8007632 <__swsetup_r+0x9a>
 800761c:	2200      	movs	r2, #0
 800761e:	60a2      	str	r2, [r4, #8]
 8007620:	6962      	ldr	r2, [r4, #20]
 8007622:	4252      	negs	r2, r2
 8007624:	61a2      	str	r2, [r4, #24]
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	b942      	cbnz	r2, 800763c <__swsetup_r+0xa4>
 800762a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800762e:	d1c5      	bne.n	80075bc <__swsetup_r+0x24>
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	0799      	lsls	r1, r3, #30
 8007634:	bf58      	it	pl
 8007636:	6962      	ldrpl	r2, [r4, #20]
 8007638:	60a2      	str	r2, [r4, #8]
 800763a:	e7f4      	b.n	8007626 <__swsetup_r+0x8e>
 800763c:	2000      	movs	r0, #0
 800763e:	e7f7      	b.n	8007630 <__swsetup_r+0x98>
 8007640:	20000018 	.word	0x20000018

08007644 <__swhatbuf_r>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	460c      	mov	r4, r1
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	2900      	cmp	r1, #0
 800764e:	b096      	sub	sp, #88	@ 0x58
 8007650:	4615      	mov	r5, r2
 8007652:	461e      	mov	r6, r3
 8007654:	da0d      	bge.n	8007672 <__swhatbuf_r+0x2e>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800765c:	f04f 0100 	mov.w	r1, #0
 8007660:	bf14      	ite	ne
 8007662:	2340      	movne	r3, #64	@ 0x40
 8007664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007668:	2000      	movs	r0, #0
 800766a:	6031      	str	r1, [r6, #0]
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	b016      	add	sp, #88	@ 0x58
 8007670:	bd70      	pop	{r4, r5, r6, pc}
 8007672:	466a      	mov	r2, sp
 8007674:	f000 f848 	bl	8007708 <_fstat_r>
 8007678:	2800      	cmp	r0, #0
 800767a:	dbec      	blt.n	8007656 <__swhatbuf_r+0x12>
 800767c:	9901      	ldr	r1, [sp, #4]
 800767e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007686:	4259      	negs	r1, r3
 8007688:	4159      	adcs	r1, r3
 800768a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800768e:	e7eb      	b.n	8007668 <__swhatbuf_r+0x24>

08007690 <__smakebuf_r>:
 8007690:	898b      	ldrh	r3, [r1, #12]
 8007692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007694:	079d      	lsls	r5, r3, #30
 8007696:	4606      	mov	r6, r0
 8007698:	460c      	mov	r4, r1
 800769a:	d507      	bpl.n	80076ac <__smakebuf_r+0x1c>
 800769c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	6123      	str	r3, [r4, #16]
 80076a4:	2301      	movs	r3, #1
 80076a6:	6163      	str	r3, [r4, #20]
 80076a8:	b003      	add	sp, #12
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ac:	ab01      	add	r3, sp, #4
 80076ae:	466a      	mov	r2, sp
 80076b0:	f7ff ffc8 	bl	8007644 <__swhatbuf_r>
 80076b4:	9f00      	ldr	r7, [sp, #0]
 80076b6:	4605      	mov	r5, r0
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7fe ff86 	bl	80065cc <_malloc_r>
 80076c0:	b948      	cbnz	r0, 80076d6 <__smakebuf_r+0x46>
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	059a      	lsls	r2, r3, #22
 80076c8:	d4ee      	bmi.n	80076a8 <__smakebuf_r+0x18>
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	f043 0302 	orr.w	r3, r3, #2
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	e7e2      	b.n	800769c <__smakebuf_r+0xc>
 80076d6:	89a3      	ldrh	r3, [r4, #12]
 80076d8:	6020      	str	r0, [r4, #0]
 80076da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076e6:	b15b      	cbz	r3, 8007700 <__smakebuf_r+0x70>
 80076e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f81d 	bl	800772c <_isatty_r>
 80076f2:	b128      	cbz	r0, 8007700 <__smakebuf_r+0x70>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	431d      	orrs	r5, r3
 8007704:	81a5      	strh	r5, [r4, #12]
 8007706:	e7cf      	b.n	80076a8 <__smakebuf_r+0x18>

08007708 <_fstat_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d07      	ldr	r5, [pc, #28]	@ (8007728 <_fstat_r+0x20>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	4611      	mov	r1, r2
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	f7f9 fe5d 	bl	80013d4 <_fstat>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d102      	bne.n	8007724 <_fstat_r+0x1c>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b103      	cbz	r3, 8007724 <_fstat_r+0x1c>
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	20000434 	.word	0x20000434

0800772c <_isatty_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d06      	ldr	r5, [pc, #24]	@ (8007748 <_isatty_r+0x1c>)
 8007730:	2300      	movs	r3, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	f7f9 fe5c 	bl	80013f4 <_isatty>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_isatty_r+0x1a>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_isatty_r+0x1a>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20000434 	.word	0x20000434

0800774c <_raise_r>:
 800774c:	291f      	cmp	r1, #31
 800774e:	b538      	push	{r3, r4, r5, lr}
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	d904      	bls.n	8007760 <_raise_r+0x14>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007762:	b112      	cbz	r2, 800776a <_raise_r+0x1e>
 8007764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007768:	b94b      	cbnz	r3, 800777e <_raise_r+0x32>
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f830 	bl	80077d0 <_getpid_r>
 8007770:	4622      	mov	r2, r4
 8007772:	4601      	mov	r1, r0
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b817 	b.w	80077ac <_kill_r>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d00a      	beq.n	8007798 <_raise_r+0x4c>
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	d103      	bne.n	800778e <_raise_r+0x42>
 8007786:	2316      	movs	r3, #22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	2001      	movs	r0, #1
 800778c:	e7e7      	b.n	800775e <_raise_r+0x12>
 800778e:	2100      	movs	r1, #0
 8007790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007794:	4620      	mov	r0, r4
 8007796:	4798      	blx	r3
 8007798:	2000      	movs	r0, #0
 800779a:	e7e0      	b.n	800775e <_raise_r+0x12>

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd3 	b.w	800774c <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	20000018 	.word	0x20000018

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	@ (80077cc <_kill_r+0x20>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 fdab 	bl	8001314 <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	20000434 	.word	0x20000434

080077d0 <_getpid_r>:
 80077d0:	f7f9 bd98 	b.w	8001304 <_getpid>

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
